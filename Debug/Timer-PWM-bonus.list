
Timer-PWM-bonus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000392c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003a3c  08003a3c  00004a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003acc  08003acc  0000507c  2**0
                  CONTENTS
  4 .ARM          00000000  08003acc  08003acc  0000507c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003acc  08003acc  0000507c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003acc  08003acc  00004acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ad0  08003ad0  00004ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08003ad4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000007c  08003b50  0000507c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08003b50  00005278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000507c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000850d  00000000  00000000  000050a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001891  00000000  00000000  0000d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0000ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c0  00000000  00000000  0000f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001799e  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b50c  00000000  00000000  000279c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ef1  00000000  00000000  00032ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000badc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000bae08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bdd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a24 	.word	0x08003a24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003a24 	.word	0x08003a24

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	0000      	movs	r0, r0
	...

08000770 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	@ 0x28
 8000774:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000776:	f000 fe15 	bl	80013a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800077a:	f000 f8cd 	bl	8000918 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800077e:	f000 fa07 	bl	8000b90 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000782:	f000 f90f 	bl	80009a4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000786:	f000 f9af 	bl	8000ae8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	// Start the base timer for Timer 1
	HAL_TIM_Base_Start(&htim1);
 800078a:	485b      	ldr	r0, [pc, #364]	@ (80008f8 <main+0x188>)
 800078c:	f001 fd48 	bl	8002220 <HAL_TIM_Base_Start>

	// Start the PWM generation for Timer 1 Channel 1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000790:	2100      	movs	r1, #0
 8000792:	4859      	ldr	r0, [pc, #356]	@ (80008f8 <main+0x188>)
 8000794:	f001 fde6 	bl	8002364 <HAL_TIM_PWM_Start>

	// Initialize the LCD with 2 lines and 16 columns
	Alcd_Init(&lcd, 2, 16);
 8000798:	2210      	movs	r2, #16
 800079a:	2102      	movs	r1, #2
 800079c:	4857      	ldr	r0, [pc, #348]	@ (80008fc <main+0x18c>)
 800079e:	f000 fcc3 	bl	8001128 <Alcd_Init>

	// Start the encoder interface on Timer 2
	HAL_TIM_Encoder_Start(&htim2, TIM_ENCODERMODE_TI1);
 80007a2:	2101      	movs	r1, #1
 80007a4:	4856      	ldr	r0, [pc, #344]	@ (8000900 <main+0x190>)
 80007a6:	f001 ff21 	bl	80025ec <HAL_TIM_Encoder_Start>

	// Set initial PWM duty cycle to center value (neutral position = 0 angle)
	TIM1->CCR1 = 1499;
 80007aa:	4b56      	ldr	r3, [pc, #344]	@ (8000904 <main+0x194>)
 80007ac:	f240 52db 	movw	r2, #1499	@ 0x5db
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34

	char str[16];
	int16_t message;
	int16_t angle = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	83fb      	strh	r3, [r7, #30]
	int16_t pwm_cycle;

	// Clear the LCD
	Alcd_Clear(&lcd);
 80007b6:	4851      	ldr	r0, [pc, #324]	@ (80008fc <main+0x18c>)
 80007b8:	f000 fd8a 	bl	80012d0 <Alcd_Clear>
	// Display initial messages on the LCD
	Alcd_PutAt(&lcd, 0, 0, "The angle range");
 80007bc:	4852      	ldr	r0, [pc, #328]	@ (8000908 <main+0x198>)
 80007be:	f000 fddb 	bl	8001378 <Str_Len>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000908 <main+0x198>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	484b      	ldr	r0, [pc, #300]	@ (80008fc <main+0x18c>)
 80007d0:	f000 fd65 	bl	800129e <Alcd_PutAt_n>
	Alcd_PutAt(&lcd, 1, 0, "is 90 and -90");
 80007d4:	484d      	ldr	r0, [pc, #308]	@ (800090c <main+0x19c>)
 80007d6:	f000 fdcf 	bl	8001378 <Str_Len>
 80007da:	4603      	mov	r3, r0
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	4b4a      	ldr	r3, [pc, #296]	@ (800090c <main+0x19c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	4845      	ldr	r0, [pc, #276]	@ (80008fc <main+0x18c>)
 80007e8:	f000 fd59 	bl	800129e <Alcd_PutAt_n>
	HAL_Delay(2000);
 80007ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f0:	f000 fe3a 	bl	8001468 <HAL_Delay>
	Alcd_Clear(&lcd);
 80007f4:	4841      	ldr	r0, [pc, #260]	@ (80008fc <main+0x18c>)
 80007f6:	f000 fd6b 	bl	80012d0 <Alcd_Clear>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Read the current position of the encoder
		int32_t encoder_position = __HAL_TIM_GET_COUNTER(&htim2);
 80007fa:	4b41      	ldr	r3, [pc, #260]	@ (8000900 <main+0x190>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000800:	61bb      	str	r3, [r7, #24]

		// Update the angle with the encoder position
		angle = encoder_position;
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	83fb      	strh	r3, [r7, #30]
		Alcd_Clear(&lcd);
 8000806:	483d      	ldr	r0, [pc, #244]	@ (80008fc <main+0x18c>)
 8000808:	f000 fd62 	bl	80012d0 <Alcd_Clear>

		// Limit the angle to the maximum allowed value
		if (angle > MAX_ANGLE) {
 800080c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000810:	2b5a      	cmp	r3, #90	@ 0x5a
 8000812:	dd01      	ble.n	8000818 <main+0xa8>
			angle = MAX_ANGLE;
 8000814:	235a      	movs	r3, #90	@ 0x5a
 8000816:	83fb      	strh	r3, [r7, #30]
		}

		// Limit the angle to the minimum allowed value
		if (angle < MIN_ANGLE) {
 8000818:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800081c:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8000820:	da02      	bge.n	8000828 <main+0xb8>
			angle = MIN_ANGLE;
 8000822:	f64f 73a6 	movw	r3, #65446	@ 0xffa6
 8000826:	83fb      	strh	r3, [r7, #30]
		}

		// Display the current angle on the LCD
		message = sprintf(str, "angle = %d", angle);
 8000828:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4938      	ldr	r1, [pc, #224]	@ (8000910 <main+0x1a0>)
 8000830:	4618      	mov	r0, r3
 8000832:	f002 fc47 	bl	80030c4 <siprintf>
 8000836:	4603      	mov	r3, r0
 8000838:	82fb      	strh	r3, [r7, #22]
		Alcd_PutAt_n(&lcd, 0, 0, str, message);
 800083a:	8afb      	ldrh	r3, [r7, #22]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	4613      	mov	r3, r2
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	482c      	ldr	r0, [pc, #176]	@ (80008fc <main+0x18c>)
 800084a:	f000 fd28 	bl	800129e <Alcd_PutAt_n>

		// Calculate the PWM duty cycle based on the angle
		pwm_cycle = (5.5555 * angle) + 1499;
 800084e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fef8 	bl	8000648 <__aeabi_i2d>
 8000858:	a323      	add	r3, pc, #140	@ (adr r3, 80008e8 <main+0x178>)
 800085a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800085e:	f7ff fc77 	bl	8000150 <__aeabi_dmul>
 8000862:	4602      	mov	r2, r0
 8000864:	460b      	mov	r3, r1
 8000866:	4610      	mov	r0, r2
 8000868:	4619      	mov	r1, r3
 800086a:	a321      	add	r3, pc, #132	@ (adr r3, 80008f0 <main+0x180>)
 800086c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000870:	f7ff fd9e 	bl	80003b0 <__adddf3>
 8000874:	4602      	mov	r2, r0
 8000876:	460b      	mov	r3, r1
 8000878:	4610      	mov	r0, r2
 800087a:	4619      	mov	r1, r3
 800087c:	f7ff ff4e 	bl	800071c <__aeabi_d2iz>
 8000880:	4603      	mov	r3, r0
 8000882:	82bb      	strh	r3, [r7, #20]

		// Ensure the PWM duty cycle is within the allowed range
		if ((MIN_PWM < pwm_cycle) & (pwm_cycle < MAX_PWM)) {
 8000884:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000888:	f240 32e6 	movw	r2, #998	@ 0x3e6
 800088c:	4293      	cmp	r3, r2
 800088e:	bfcc      	ite	gt
 8000890:	2301      	movgt	r3, #1
 8000892:	2300      	movle	r3, #0
 8000894:	b2da      	uxtb	r2, r3
 8000896:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800089a:	f240 71cf 	movw	r1, #1999	@ 0x7cf
 800089e:	428b      	cmp	r3, r1
 80008a0:	bfd4      	ite	le
 80008a2:	2301      	movle	r3, #1
 80008a4:	2300      	movgt	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4013      	ands	r3, r2
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d016      	beq.n	80008de <main+0x16e>
			// Update the PWM duty cycle
			TIM1->CCR1 = pwm_cycle;
 80008b0:	4a14      	ldr	r2, [pc, #80]	@ (8000904 <main+0x194>)
 80008b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008b6:	6353      	str	r3, [r2, #52]	@ 0x34

			// Display the current PWM duty cycle on the LCD
			message = sprintf(str, "duty = %d", pwm_cycle);
 80008b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4915      	ldr	r1, [pc, #84]	@ (8000914 <main+0x1a4>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fbff 	bl	80030c4 <siprintf>
 80008c6:	4603      	mov	r3, r0
 80008c8:	82fb      	strh	r3, [r7, #22]
			Alcd_PutAt_n(&lcd, 1, 0, str, message);
 80008ca:	8afb      	ldrh	r3, [r7, #22]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	1d3a      	adds	r2, r7, #4
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	4808      	ldr	r0, [pc, #32]	@ (80008fc <main+0x18c>)
 80008da:	f000 fce0 	bl	800129e <Alcd_PutAt_n>
		}

		// Delay for a short period
		HAL_Delay(50);
 80008de:	2032      	movs	r0, #50	@ 0x32
 80008e0:	f000 fdc2 	bl	8001468 <HAL_Delay>
	while (1) {
 80008e4:	e789      	b.n	80007fa <main+0x8a>
 80008e6:	bf00      	nop
 80008e8:	fdf3b646 	.word	0xfdf3b646
 80008ec:	401638d4 	.word	0x401638d4
 80008f0:	00000000 	.word	0x00000000
 80008f4:	40976c00 	.word	0x40976c00
 80008f8:	20000098 	.word	0x20000098
 80008fc:	20000000 	.word	0x20000000
 8000900:	200000e0 	.word	0x200000e0
 8000904:	40012c00 	.word	0x40012c00
 8000908:	08003a3c 	.word	0x08003a3c
 800090c:	08003a4c 	.word	0x08003a4c
 8000910:	08003a5c 	.word	0x08003a5c
 8000914:	08003a68 	.word	0x08003a68

08000918 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b090      	sub	sp, #64	@ 0x40
 800091c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	2228      	movs	r2, #40	@ 0x28
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fbec 	bl	8003104 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000942:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000950:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000954:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000956:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4618      	mov	r0, r3
 8000962:	f001 f825 	bl	80019b0 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x58>
		Error_Handler();
 800096c:	f000 f93e 	bl	8000bec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000980:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fa92 	bl	8001eb4 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x82>
		Error_Handler();
 8000996:	f000 f929 	bl	8000bec <Error_Handler>
	}
}
 800099a:	bf00      	nop
 800099c:	3740      	adds	r7, #64	@ 0x40
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b096      	sub	sp, #88	@ 0x58
 80009a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009aa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80009c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]
 80009d4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2220      	movs	r2, #32
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fb91 	bl	8003104 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80009e2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 80009e4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ae4 <MX_TIM1_Init+0x140>)
 80009e6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71; // Set prescaler to 71
 80009e8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 80009ea:	2247      	movs	r2, #71	@ 0x47
 80009ec:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP; // Set counter mode to up
 80009ee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 19999; // Set period to 19999
 80009f4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 80009f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009fa:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; // Set clock division to 1
 80009fc:	4b38      	ldr	r3, [pc, #224]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0; // Set repetition counter to 0
 8000a02:	4b37      	ldr	r3, [pc, #220]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; // Disable auto-reload preload
 8000a08:	4b35      	ldr	r3, [pc, #212]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000a0e:	4834      	ldr	r0, [pc, #208]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a10:	f001 fbb6 	bl	8002180 <HAL_TIM_Base_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM1_Init+0x7a>
		Error_Handler(); // Handle error if initialization fails
 8000a1a:	f000 f8e7 	bl	8000bec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL; // Set clock source to internal
 8000a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000a24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482d      	ldr	r0, [pc, #180]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a2c:	f001 ff2e 	bl	800288c <HAL_TIM_ConfigClockSource>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x96>
		Error_Handler(); // Handle error if configuration fails
 8000a36:	f000 f8d9 	bl	8000bec <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000a3a:	4829      	ldr	r0, [pc, #164]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a3c:	f001 fc3a 	bl	80022b4 <HAL_TIM_PWM_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0xa6>
		Error_Handler(); // Handle error if PWM initialization fails
 8000a46:	f000 f8d1 	bl	8000bec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET; // Set master output trigger to reset
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE; // Disable master-slave mode
 8000a4e:	2300      	movs	r3, #0
 8000a50:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000a52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a56:	4619      	mov	r1, r3
 8000a58:	4821      	ldr	r0, [pc, #132]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a5a:	f002 fa83 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler(); // Handle error if synchronization configuration fails
 8000a64:	f000 f8c2 	bl	8000bec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1; // Set output compare mode to PWM1
 8000a68:	2360      	movs	r3, #96	@ 0x60
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 1000; // Set pulse value to 1000
 8000a6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH; // Set output compare polarity to high
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH; // Set output compare polarity to high
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE; // Disable output compare fast mode
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET; // Set output compare idle state to reset
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET; // Set output compare idle state to reset
 8000a82:	2300      	movs	r3, #0
 8000a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000a90:	f001 fe3a 	bl	8002708 <HAL_TIM_PWM_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler(); // Handle error if channel configuration fails
 8000a9a:	f000 f8a7 	bl	8000bec <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE; // Disable off-state run mode
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE; // Disable off-state idle mode
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF; // Set lock level to off
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0; // Set dead time to 0
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE; // Disable break state
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH; // Set break polarity to high
 8000ab2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE; // Disable automatic output
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000ac2:	f002 faad 	bl	8003020 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x12c>
			!= HAL_OK) {
		Error_Handler(); // Handle error if break/dead-time configuration fails
 8000acc:	f000 f88e 	bl	8000bec <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <MX_TIM1_Init+0x13c>)
 8000ad2:	f000 f94d 	bl	8000d70 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3758      	adds	r7, #88	@ 0x58
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000098 	.word	0x20000098
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2224      	movs	r2, #36	@ 0x24
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fb04 	bl	8003104 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0; // Set prescaler to 0
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP; // Set counter mode to up
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535; // Set period to 65535
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b1e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; // Set clock division to 1
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE; // Disable auto-reload preload
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1; // Set encoder mode to TI1
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING; // Set input capture polarity to rising edge
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI; // Set input capture selection to direct input
 8000b34:	2301      	movs	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1; // Set input capture prescaler to 1
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0; // Set input capture filter to 0
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING; // Set input capture polarity to rising edge
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI; // Set input capture selection to direct input
 8000b44:	2301      	movs	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1; // Set input capture prescaler to 1
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0; // Set input capture filter to 0
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b58:	f001 fca6 	bl	80024a8 <HAL_TIM_Encoder_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM2_Init+0x7e>
		Error_Handler(); // Handle error if encoder initialization fails
 8000b62:	f000 f843 	bl	8000bec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET; // Set master output trigger to reset
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE; // Disable master-slave mode
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <MX_TIM2_Init+0xa4>)
 8000b74:	f002 f9f6 	bl	8002f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler(); // Handle error if synchronization configuration fails
 8000b7e:	f000 f835 	bl	8000bec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3730      	adds	r7, #48	@ 0x30
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000e0 	.word	0x200000e0

08000b90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <MX_GPIO_Init+0x58>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000

08000bec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq(); // Disable interrupts
	while (1) {
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_MspInit+0x60>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_MspInit+0x60>)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a09      	ldr	r2, [pc, #36]	@ (8000c90 <HAL_TIM_Base_MspInit+0x34>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10b      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40012c00 	.word	0x40012c00
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb6:	d14e      	bne.n	8000d56 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb8:	4b29      	ldr	r3, [pc, #164]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a28      	ldr	r2, [pc, #160]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a22      	ldr	r2, [pc, #136]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000d16:	f000 fcaf 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480e      	ldr	r0, [pc, #56]	@ (8000d68 <HAL_TIM_Encoder_MspInit+0xd0>)
 8000d2e:	f000 fca3 	bl	8001678 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <HAL_TIM_Encoder_MspInit+0xd4>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d42:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <HAL_TIM_Encoder_MspInit+0xd4>)
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	40010000 	.word	0x40010000

08000d70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_TIM_MspPostInit+0x5c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d118      	bne.n	8000dc2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <HAL_TIM_MspPostInit+0x60>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <HAL_TIM_MspPostInit+0x60>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <HAL_TIM_MspPostInit+0x60>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000da8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <HAL_TIM_MspPostInit+0x64>)
 8000dbe:	f000 fc5b 	bl	8001678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40012c00 	.word	0x40012c00
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010800 	.word	0x40010800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 fb02 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	@ (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e60:	f002 f958 	bl	8003114 <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20005000 	.word	0x20005000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	20000128 	.word	0x20000128
 8000e98:	20000278 	.word	0x20000278

08000e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea8:	f7ff fff8 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eae:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec4:	4c09      	ldr	r4, [pc, #36]	@ (8000eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f002 f925 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fc4b 	bl	8000770 <main>
  bx lr
 8000eda:	4770      	bx	lr
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ee4:	08003ad4 	.word	0x08003ad4
  ldr r2, =_sbss
 8000ee8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000eec:	20000278 	.word	0x20000278

08000ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_2_IRQHandler>
	...

08000ef4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <DWT_Delay_Init+0x58>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <DWT_Delay_Init+0x58>)
 8000efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f02:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <DWT_Delay_Init+0x58>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <DWT_Delay_Init+0x58>)
 8000f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f0e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <DWT_Delay_Init+0x5c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <DWT_Delay_Init+0x5c>)
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <DWT_Delay_Init+0x5c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <DWT_Delay_Init+0x5c>)
 8000f22:	f043 0301 	orr.w	r3, r3, #1
 8000f26:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000f28:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <DWT_Delay_Init+0x5c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000f2e:	bf00      	nop
     __ASM volatile ("NOP");
 8000f30:	bf00      	nop
  __ASM volatile ("NOP");
 8000f32:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <DWT_Delay_Init+0x5c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e000      	b.n	8000f42 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000f40:	2301      	movs	r3, #1
  }
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000edf0 	.word	0xe000edf0
 8000f50:	e0001000 	.word	0xe0001000

08000f54 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <DWT_Delay_us+0x40>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f62:	f001 f8e5 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <DWT_Delay_us+0x44>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	0c9b      	lsrs	r3, r3, #18
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000f78:	bf00      	nop
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <DWT_Delay_us+0x40>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad2      	subs	r2, r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d3f8      	bcc.n	8000f7a <DWT_Delay_us+0x26>
		;
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e0001000 	.word	0xe0001000
 8000f98:	431bde83 	.word	0x431bde83

08000f9c <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ffd3 	bl	8000f54 <DWT_Delay_us>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7a1b      	ldrb	r3, [r3, #8]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	230f      	movs	r3, #15
 8000fd0:	408b      	lsls	r3, r1
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	400a      	ands	r2, r1
 8000fdc:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	7a09      	ldrb	r1, [r1, #8]
 8000fea:	408b      	lsls	r3, r1
 8000fec:	4619      	mov	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	60da      	str	r2, [r3, #12]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6958      	ldr	r0, [r3, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8b1b      	ldrh	r3, [r3, #24]
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	4619      	mov	r1, r3
 8001018:	f000 fcb2 	bl	8001980 <HAL_GPIO_WritePin>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68d8      	ldr	r0, [r3, #12]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8a1b      	ldrh	r3, [r3, #16]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	4619      	mov	r1, r3
 800103c:	f000 fca0 	bl	8001980 <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	8b1b      	ldrh	r3, [r3, #24]
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	2301      	movs	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	2302      	movs	r3, #2
 800106a:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fafe 	bl	8001678 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	8a1b      	ldrh	r3, [r3, #16]
 8001080:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	f107 0208 	add.w	r2, r7, #8
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f000 faf3 	bl	8001678 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7a1b      	ldrb	r3, [r3, #8]
 8001096:	461a      	mov	r2, r3
 8001098:	230f      	movs	r3, #15
 800109a:	4093      	lsls	r3, r2
 800109c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f107 0208 	add.w	r2, r7, #8
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fae5 	bl	8001678 <HAL_GPIO_Init>
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	70fb      	strb	r3, [r7, #3]
 80010c2:	4613      	mov	r3, r2
 80010c4:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	4619      	mov	r1, r3
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff98 	bl	8001000 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 80010d0:	78bb      	ldrb	r3, [r7, #2]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4619      	mov	r1, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff6c 	bl	8000fb6 <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 80010de:	2101      	movs	r1, #1
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff9f 	bl	8001024 <EN_SET>
 80010e6:	200a      	movs	r0, #10
 80010e8:	f7ff ff58 	bl	8000f9c <usDelay>
 80010ec:	2100      	movs	r1, #0
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff98 	bl	8001024 <EN_SET>
 80010f4:	2064      	movs	r0, #100	@ 0x64
 80010f6:	f7ff ff51 	bl	8000f9c <usDelay>
	;
	Write_HalfByte(lcd, value);
 80010fa:	78bb      	ldrb	r3, [r7, #2]
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff59 	bl	8000fb6 <Write_HalfByte>
	PulseEn
 8001104:	2101      	movs	r1, #1
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff8c 	bl	8001024 <EN_SET>
 800110c:	200a      	movs	r0, #10
 800110e:	f7ff ff45 	bl	8000f9c <usDelay>
 8001112:	2100      	movs	r1, #0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff85 	bl	8001024 <EN_SET>
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f7ff ff3e 	bl	8000f9c <usDelay>
	;
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
 8001134:	4613      	mov	r3, r2
 8001136:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 8001138:	f7ff fedc 	bl	8000ef4 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff83 	bl	8001048 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2240      	movs	r2, #64	@ 0x40
 800114c:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	78ba      	ldrb	r2, [r7, #2]
 8001152:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8001154:	78bb      	ldrb	r3, [r7, #2]
 8001156:	3340      	adds	r3, #64	@ 0x40
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 800115e:	2100      	movs	r1, #0
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff4d 	bl	8001000 <RS_SET>
	EN_SET(lcd, 0);
 8001166:	2100      	movs	r1, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff5b 	bl	8001024 <EN_SET>
	usDelay(50000);
 800116e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001172:	f7ff ff13 	bl	8000f9c <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e018      	b.n	80011ae <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 800117c:	2103      	movs	r1, #3
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff19 	bl	8000fb6 <Write_HalfByte>
		PulseEn
 8001184:	2101      	movs	r1, #1
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff4c 	bl	8001024 <EN_SET>
 800118c:	200a      	movs	r0, #10
 800118e:	f7ff ff05 	bl	8000f9c <usDelay>
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff45 	bl	8001024 <EN_SET>
 800119a:	2064      	movs	r0, #100	@ 0x64
 800119c:	f7ff fefe 	bl	8000f9c <usDelay>
		;
		usDelay(4500);
 80011a0:	f241 1094 	movw	r0, #4500	@ 0x1194
 80011a4:	f7ff fefa 	bl	8000f9c <usDelay>
	for (x = 0; x < 2; x++) {
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	3301      	adds	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d9e3      	bls.n	800117c <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80011b4:	2103      	movs	r1, #3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fefd 	bl	8000fb6 <Write_HalfByte>
	PulseEn
 80011bc:	2101      	movs	r1, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff30 	bl	8001024 <EN_SET>
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff fee9 	bl	8000f9c <usDelay>
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <EN_SET>
 80011d2:	2064      	movs	r0, #100	@ 0x64
 80011d4:	f7ff fee2 	bl	8000f9c <usDelay>
	;
	usDelay(150);
 80011d8:	2096      	movs	r0, #150	@ 0x96
 80011da:	f7ff fedf 	bl	8000f9c <usDelay>
	Write_HalfByte(lcd, 0x02);
 80011de:	2102      	movs	r1, #2
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fee8 	bl	8000fb6 <Write_HalfByte>
	PulseEn
 80011e6:	2101      	movs	r1, #1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff1b 	bl	8001024 <EN_SET>
 80011ee:	200a      	movs	r0, #10
 80011f0:	f7ff fed4 	bl	8000f9c <usDelay>
 80011f4:	2100      	movs	r1, #0
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff14 	bl	8001024 <EN_SET>
 80011fc:	2064      	movs	r0, #100	@ 0x64
 80011fe:	f7ff fecd 	bl	8000f9c <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8001202:	2228      	movs	r2, #40	@ 0x28
 8001204:	2100      	movs	r1, #0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff55 	bl	80010b6 <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 800120c:	2300      	movs	r3, #0
 800120e:	2200      	movs	r2, #0
 8001210:	2101      	movs	r1, #1
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f86d 	bl	80012f2 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f859 	bl	80012d0 <Alcd_Clear>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	70fb      	strb	r3, [r7, #3]
 8001232:	4613      	mov	r3, r2
 8001234:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	7e9a      	ldrb	r2, [r3, #26]
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	4413      	add	r3, r2
 8001242:	b2db      	uxtb	r3, r3
 8001244:	b25b      	sxtb	r3, r3
 8001246:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800124a:	b25b      	sxtb	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	2100      	movs	r1, #0
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff2f 	bl	80010b6 <Alcd_SendByte>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]
 8001272:	e00b      	b.n	800128c <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	2101      	movs	r1, #1
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff ff18 	bl	80010b6 <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	3301      	adds	r3, #1
 800128a:	75fb      	strb	r3, [r7, #23]
 800128c:	7dfa      	ldrb	r2, [r7, #23]
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3ef      	bcc.n	8001274 <Alcd_Put_n+0x14>
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	72fb      	strb	r3, [r7, #11]
 80012ac:	4613      	mov	r3, r2
 80012ae:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 80012b0:	7aba      	ldrb	r2, [r7, #10]
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	4619      	mov	r1, r3
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff ffb5 	bl	8001226 <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 80012bc:	7e3b      	ldrb	r3, [r7, #24]
 80012be:	461a      	mov	r2, r3
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff ffcc 	bl	8001260 <Alcd_Put_n>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 80012d8:	2201      	movs	r2, #1
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff feea 	bl	80010b6 <Alcd_SendByte>
	usDelay(2000);
 80012e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012e6:	f7ff fe59 	bl	8000f9c <usDelay>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	4608      	mov	r0, r1
 80012fc:	4611      	mov	r1, r2
 80012fe:	461a      	mov	r2, r3
 8001300:	4603      	mov	r3, r0
 8001302:	70fb      	strb	r3, [r7, #3]
 8001304:	460b      	mov	r3, r1
 8001306:	70bb      	strb	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7f9b      	ldrb	r3, [r3, #30]
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 8001326:	78bb      	ldrb	r3, [r7, #2]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7f9b      	ldrb	r3, [r3, #30]
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	b2da      	uxtb	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 800133a:	787b      	ldrb	r3, [r7, #1]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7f9b      	ldrb	r3, [r3, #30]
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7f9b      	ldrb	r3, [r3, #30]
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	b2da      	uxtb	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7f9b      	ldrb	r3, [r3, #30]
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fea3 	bl	80010b6 <Alcd_SendByte>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	int len = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8001384:	e002      	b.n	800138c <Str_Len+0x14>
		len++;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f6      	bne.n	8001386 <Str_Len+0xe>
	}
	return len;
 8001398:	68fb      	ldr	r3, [r7, #12]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_Init+0x28>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f92b 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	200f      	movs	r0, #15
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fc1a 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f935 	bl	800165e <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f90b 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	@ (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000020 	.word	0x20000020
 8001428:	20000028 	.word	0x20000028
 800142c:	20000024 	.word	0x20000024

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_IncTick+0x1c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <HAL_IncTick+0x20>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a03      	ldr	r2, [pc, #12]	@ (8001450 <HAL_IncTick+0x20>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000028 	.word	0x20000028
 8001450:	2000012c 	.word	0x2000012c

08001454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b02      	ldr	r3, [pc, #8]	@ (8001464 <HAL_GetTick+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	2000012c 	.word	0x2000012c

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff fff0 	bl	8001454 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffe0 	bl	8001454 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000028 	.word	0x20000028

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	@ (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	@ (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	@ 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	@ 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff90 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff49 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff5e 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff90 	bl	8001568 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5f 	bl	8001514 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffb0 	bl	80015cc <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b08b      	sub	sp, #44	@ 0x2c
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e169      	b.n	8001960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800168c:	2201      	movs	r2, #1
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8158 	bne.w	800195a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d05e      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016b4:	4a98      	ldr	r2, [pc, #608]	@ (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d875      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ba:	4a98      	ldr	r2, [pc, #608]	@ (800191c <HAL_GPIO_Init+0x2a4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d058      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016c0:	4a96      	ldr	r2, [pc, #600]	@ (800191c <HAL_GPIO_Init+0x2a4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d86f      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016c6:	4a96      	ldr	r2, [pc, #600]	@ (8001920 <HAL_GPIO_Init+0x2a8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d052      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016cc:	4a94      	ldr	r2, [pc, #592]	@ (8001920 <HAL_GPIO_Init+0x2a8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d869      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016d2:	4a94      	ldr	r2, [pc, #592]	@ (8001924 <HAL_GPIO_Init+0x2ac>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04c      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016d8:	4a92      	ldr	r2, [pc, #584]	@ (8001924 <HAL_GPIO_Init+0x2ac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d863      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016de:	4a92      	ldr	r2, [pc, #584]	@ (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d046      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016e4:	4a90      	ldr	r2, [pc, #576]	@ (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d85d      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d82a      	bhi.n	8001744 <HAL_GPIO_Init+0xcc>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d859      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016f2:	a201      	add	r2, pc, #4	@ (adr r2, 80016f8 <HAL_GPIO_Init+0x80>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001773 	.word	0x08001773
 80016fc:	0800174d 	.word	0x0800174d
 8001700:	0800175f 	.word	0x0800175f
 8001704:	080017a1 	.word	0x080017a1
 8001708:	080017a7 	.word	0x080017a7
 800170c:	080017a7 	.word	0x080017a7
 8001710:	080017a7 	.word	0x080017a7
 8001714:	080017a7 	.word	0x080017a7
 8001718:	080017a7 	.word	0x080017a7
 800171c:	080017a7 	.word	0x080017a7
 8001720:	080017a7 	.word	0x080017a7
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017a7 	.word	0x080017a7
 8001734:	080017a7 	.word	0x080017a7
 8001738:	080017a7 	.word	0x080017a7
 800173c:	08001755 	.word	0x08001755
 8001740:	08001769 	.word	0x08001769
 8001744:	4a79      	ldr	r2, [pc, #484]	@ (800192c <HAL_GPIO_Init+0x2b4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e02c      	b.n	80017a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e029      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e024      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	3308      	adds	r3, #8
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e01f      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	330c      	adds	r3, #12
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e01a      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177a:	2304      	movs	r3, #4
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e013      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	611a      	str	r2, [r3, #16]
          break;
 8001792:	e009      	b.n	80017a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	615a      	str	r2, [r3, #20]
          break;
 800179e:	e003      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          break;
 80017a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	@ 0xff
 80017ac:	d801      	bhi.n	80017b2 <HAL_GPIO_Init+0x13a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_Init+0x13e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2bff      	cmp	r3, #255	@ 0xff
 80017bc:	d802      	bhi.n	80017c4 <HAL_GPIO_Init+0x14c>
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x152>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	3b08      	subs	r3, #8
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	210f      	movs	r1, #15
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b1 	beq.w	800195a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b4a      	ldr	r3, [pc, #296]	@ (8001930 <HAL_GPIO_Init+0x2b8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001810:	4a48      	ldr	r2, [pc, #288]	@ (8001934 <HAL_GPIO_Init+0x2bc>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a40      	ldr	r2, [pc, #256]	@ (8001938 <HAL_GPIO_Init+0x2c0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3f      	ldr	r2, [pc, #252]	@ (800193c <HAL_GPIO_Init+0x2c4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3e      	ldr	r2, [pc, #248]	@ (8001940 <HAL_GPIO_Init+0x2c8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1e4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3d      	ldr	r2, [pc, #244]	@ (8001944 <HAL_GPIO_Init+0x2cc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1e0>
 8001854:	2303      	movs	r3, #3
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001858:	2304      	movs	r3, #4
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001864:	2300      	movs	r3, #0
 8001866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001876:	492f      	ldr	r1, [pc, #188]	@ (8001934 <HAL_GPIO_Init+0x2bc>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	492c      	ldr	r1, [pc, #176]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4928      	ldr	r1, [pc, #160]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b8:	4b23      	ldr	r3, [pc, #140]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	4922      	ldr	r1, [pc, #136]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c6:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	491e      	ldr	r1, [pc, #120]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4918      	ldr	r1, [pc, #96]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ee:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4914      	ldr	r1, [pc, #80]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d021      	beq.n	800194c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	490e      	ldr	r1, [pc, #56]	@ (8001948 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
 8001914:	e021      	b.n	800195a <HAL_GPIO_Init+0x2e2>
 8001916:	bf00      	nop
 8001918:	10320000 	.word	0x10320000
 800191c:	10310000 	.word	0x10310000
 8001920:	10220000 	.word	0x10220000
 8001924:	10210000 	.word	0x10210000
 8001928:	10120000 	.word	0x10120000
 800192c:	10110000 	.word	0x10110000
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	40010800 	.word	0x40010800
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40011000 	.word	0x40011000
 8001944:	40011400 	.word	0x40011400
 8001948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_GPIO_Init+0x304>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4909      	ldr	r1, [pc, #36]	@ (800197c <HAL_GPIO_Init+0x304>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f ae8e 	bne.w	800168c <HAL_GPIO_Init+0x14>
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	372c      	adds	r7, #44	@ 0x2c
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800199c:	e003      	b.n	80019a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	041a      	lsls	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	611a      	str	r2, [r3, #16]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e272      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8087 	beq.w	8001ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	4b92      	ldr	r3, [pc, #584]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d00c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019dc:	4b8f      	ldr	r3, [pc, #572]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d112      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
 80019e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f4:	d10b      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	4b89      	ldr	r3, [pc, #548]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06c      	beq.n	8001adc <HAL_RCC_OscConfig+0x12c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d168      	bne.n	8001adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e24c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x76>
 8001a18:	4b80      	ldr	r3, [pc, #512]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e02e      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x98>
 8001a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7a      	ldr	r2, [pc, #488]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b78      	ldr	r3, [pc, #480]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a77      	ldr	r2, [pc, #476]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0xbc>
 8001a52:	4b72      	ldr	r3, [pc, #456]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a71      	ldr	r2, [pc, #452]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6e      	ldr	r2, [pc, #440]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6a      	ldr	r2, [pc, #424]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b68      	ldr	r3, [pc, #416]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a67      	ldr	r2, [pc, #412]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fce2 	bl	8001454 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fcde 	bl	8001454 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	@ 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e200      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe4>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fcce 	bl	8001454 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fcca 	bl	8001454 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	@ 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1ec      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x10c>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b4c      	ldr	r3, [pc, #304]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af6:	4b49      	ldr	r3, [pc, #292]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d11c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x18c>
 8001b02:	4b46      	ldr	r3, [pc, #280]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	4b43      	ldr	r3, [pc, #268]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x176>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e1c0      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b3d      	ldr	r3, [pc, #244]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4939      	ldr	r1, [pc, #228]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	e03a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b44:	4b36      	ldr	r3, [pc, #216]	@ (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fc83 	bl	8001454 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fc7f 	bl	8001454 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1a1      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4927      	ldr	r1, [pc, #156]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e015      	b.n	8001bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b26      	ldr	r3, [pc, #152]	@ (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fc62 	bl	8001454 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc5e 	bl	8001454 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e180      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03a      	beq.n	8001c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d019      	beq.n	8001bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc6:	4b17      	ldr	r3, [pc, #92]	@ (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fc42 	bl	8001454 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fc3e 	bl	8001454 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e160      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f000 faa6 	bl	8002144 <RCC_Delay>
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff fc28 	bl	8001454 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c06:	e00f      	b.n	8001c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fc24 	bl	8001454 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d908      	bls.n	8001c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e146      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	42420000 	.word	0x42420000
 8001c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e9      	bne.n	8001c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80a6 	beq.w	8001d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b8b      	ldr	r3, [pc, #556]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10d      	bne.n	8001c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b88      	ldr	r3, [pc, #544]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a87      	ldr	r2, [pc, #540]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b85      	ldr	r3, [pc, #532]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	4b82      	ldr	r3, [pc, #520]	@ (8001e78 <HAL_RCC_OscConfig+0x4c8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e78 <HAL_RCC_OscConfig+0x4c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e78 <HAL_RCC_OscConfig+0x4c8>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fbe5 	bl	8001454 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7ff fbe1 	bl	8001454 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	@ 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e103      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b75      	ldr	r3, [pc, #468]	@ (8001e78 <HAL_RCC_OscConfig+0x4c8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x312>
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	e02d      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x334>
 8001cca:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a69      	ldr	r2, [pc, #420]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	4b67      	ldr	r3, [pc, #412]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a66      	ldr	r2, [pc, #408]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	e01c      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x356>
 8001cec:	4b61      	ldr	r3, [pc, #388]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a60      	ldr	r2, [pc, #384]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001d06:	4b5b      	ldr	r3, [pc, #364]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b58      	ldr	r3, [pc, #352]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a57      	ldr	r2, [pc, #348]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d015      	beq.n	8001d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb95 	bl	8001454 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fb91 	bl	8001454 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0b1      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ee      	beq.n	8001d2e <HAL_RCC_OscConfig+0x37e>
 8001d50:	e014      	b.n	8001d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fb7f 	bl	8001454 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fb7b 	bl	8001454 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e09b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	4b40      	ldr	r3, [pc, #256]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d105      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d82:	4b3c      	ldr	r3, [pc, #240]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a3b      	ldr	r2, [pc, #236]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8087 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d98:	4b36      	ldr	r3, [pc, #216]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d061      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d146      	bne.n	8001e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b33      	ldr	r3, [pc, #204]	@ (8001e7c <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb4f 	bl	8001454 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fb4b 	bl	8001454 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e06d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de2:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4921      	ldr	r1, [pc, #132]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a19      	ldr	r1, [r3, #32]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	430b      	orrs	r3, r1
 8001e06:	491b      	ldr	r1, [pc, #108]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <HAL_RCC_OscConfig+0x4cc>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff fb1f 	bl	8001454 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff fb1b 	bl	8001454 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e03d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46a>
 8001e38:	e035      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_RCC_OscConfig+0x4cc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fb08 	bl	8001454 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff fb04 	bl	8001454 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e026      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x498>
 8001e66:	e01e      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e019      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_RCC_OscConfig+0x500>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0d0      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b67      	ldr	r3, [pc, #412]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4965      	ldr	r1, [pc, #404]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b63      	ldr	r3, [pc, #396]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0b8      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f10:	4b59      	ldr	r3, [pc, #356]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a58      	ldr	r2, [pc, #352]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f28:	4b53      	ldr	r3, [pc, #332]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b50      	ldr	r3, [pc, #320]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	494d      	ldr	r1, [pc, #308]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d040      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d115      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e07f      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f72:	4b41      	ldr	r3, [pc, #260]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e073      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	4b3d      	ldr	r3, [pc, #244]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06b      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f92:	4b39      	ldr	r3, [pc, #228]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f023 0203 	bic.w	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4936      	ldr	r1, [pc, #216]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff fa56 	bl	8001454 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7ff fa52 	bl	8001454 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e053      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 020c 	and.w	r2, r3, #12
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d1eb      	bne.n	8001fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d210      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	4922      	ldr	r1, [pc, #136]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e032      	b.n	800206a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4916      	ldr	r1, [pc, #88]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202e:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	490e      	ldr	r1, [pc, #56]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002042:	f000 f821 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8002046:	4602      	mov	r2, r0
 8002048:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	490a      	ldr	r1, [pc, #40]	@ (800207c <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	5ccb      	ldrb	r3, [r1, r3]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	4a09      	ldr	r2, [pc, #36]	@ (8002080 <HAL_RCC_ClockConfig+0x1cc>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_ClockConfig+0x1d0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f9b4 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40022000 	.word	0x40022000
 8002078:	40021000 	.word	0x40021000
 800207c:	08003a74 	.word	0x08003a74
 8002080:	20000020 	.word	0x20000020
 8002084:	20000024 	.word	0x20000024

08002088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a2:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <HAL_RCC_GetSysClockFreq+0x94>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x30>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x36>
 80020b6:	e027      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ba:	613b      	str	r3, [r7, #16]
      break;
 80020bc:	e027      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4a17      	ldr	r2, [pc, #92]	@ (8002124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d6:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_RCC_GetSysClockFreq+0x94>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	0c5b      	lsrs	r3, r3, #17
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	4a11      	ldr	r2, [pc, #68]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020e2:	5cd3      	ldrb	r3, [r2, r3]
 80020e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ea:	fb03 f202 	mul.w	r2, r3, r2
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e004      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <HAL_RCC_GetSysClockFreq+0xa4>)
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	613b      	str	r3, [r7, #16]
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x98>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	693b      	ldr	r3, [r7, #16]
}
 8002110:	4618      	mov	r0, r3
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	007a1200 	.word	0x007a1200
 8002124:	08003a84 	.word	0x08003a84
 8002128:	08003a94 	.word	0x08003a94
 800212c:	003d0900 	.word	0x003d0900

08002130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b02      	ldr	r3, [pc, #8]	@ (8002140 <HAL_RCC_GetHCLKFreq+0x10>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000020 	.word	0x20000020

08002144 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800214c:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <RCC_Delay+0x34>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <RCC_Delay+0x38>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0a5b      	lsrs	r3, r3, #9
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002160:	bf00      	nop
  }
  while (Delay --);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <RCC_Delay+0x1c>
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000020 	.word	0x20000020
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e041      	b.n	8002216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fd58 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 fc2c 	bl	8002a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d001      	beq.n	8002238 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a18      	ldr	r2, [pc, #96]	@ (80022a8 <HAL_TIM_Base_Start+0x88>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_TIM_Base_Start+0x48>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002252:	d009      	beq.n	8002268 <HAL_TIM_Base_Start+0x48>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <HAL_TIM_Base_Start+0x8c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_TIM_Base_Start+0x48>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <HAL_TIM_Base_Start+0x90>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d111      	bne.n	800228c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b06      	cmp	r3, #6
 8002278:	d010      	beq.n	800229c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228a:	e007      	b.n	800229c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	40012c00 	.word	0x40012c00
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800

080022b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e041      	b.n	800234a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f839 	bl	8002352 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f000 fb92 	bl	8002a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_TIM_PWM_Start+0x24>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e022      	b.n	80023ce <HAL_TIM_PWM_Start+0x6a>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d109      	bne.n	80023a2 <HAL_TIM_PWM_Start+0x3e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	e015      	b.n	80023ce <HAL_TIM_PWM_Start+0x6a>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d109      	bne.n	80023bc <HAL_TIM_PWM_Start+0x58>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	e008      	b.n	80023ce <HAL_TIM_PWM_Start+0x6a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e05e      	b.n	8002494 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <HAL_TIM_PWM_Start+0x82>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023e4:	e013      	b.n	800240e <HAL_TIM_PWM_Start+0xaa>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d104      	bne.n	80023f6 <HAL_TIM_PWM_Start+0x92>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023f4:	e00b      	b.n	800240e <HAL_TIM_PWM_Start+0xaa>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d104      	bne.n	8002406 <HAL_TIM_PWM_Start+0xa2>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002404:	e003      	b.n	800240e <HAL_TIM_PWM_Start+0xaa>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	6839      	ldr	r1, [r7, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fd80 	bl	8002f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <HAL_TIM_PWM_Start+0x138>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d107      	bne.n	8002436 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a18      	ldr	r2, [pc, #96]	@ (800249c <HAL_TIM_PWM_Start+0x138>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_TIM_PWM_Start+0xfa>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002448:	d009      	beq.n	800245e <HAL_TIM_PWM_Start+0xfa>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a14      	ldr	r2, [pc, #80]	@ (80024a0 <HAL_TIM_PWM_Start+0x13c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIM_PWM_Start+0xfa>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a12      	ldr	r2, [pc, #72]	@ (80024a4 <HAL_TIM_PWM_Start+0x140>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d111      	bne.n	8002482 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b06      	cmp	r3, #6
 800246e:	d010      	beq.n	8002492 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002480:	e007      	b.n	8002492 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800

080024a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e093      	b.n	80025e4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7fe fbe1 	bl	8000c98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024ec:	f023 0307 	bic.w	r3, r3, #7
 80024f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3304      	adds	r3, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4610      	mov	r0, r2
 80024fe:	f000 fa8d 	bl	8002a1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	4313      	orrs	r3, r2
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002548:	f023 030c 	bic.w	r3, r3, #12
 800254c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	4313      	orrs	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	011a      	lsls	r2, r3, #4
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	031b      	lsls	r3, r3, #12
 8002578:	4313      	orrs	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002586:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	4313      	orrs	r3, r2
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002604:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800260c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002614:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d110      	bne.n	800263e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002622:	7b7b      	ldrb	r3, [r7, #13]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d001      	beq.n	800262c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e069      	b.n	8002700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800263c:	e031      	b.n	80026a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b04      	cmp	r3, #4
 8002642:	d110      	bne.n	8002666 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800264a:	7b3b      	ldrb	r3, [r7, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e055      	b.n	8002700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002664:	e01d      	b.n	80026a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d108      	bne.n	800267e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800266c:	7bbb      	ldrb	r3, [r7, #14]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002672:	7b7b      	ldrb	r3, [r7, #13]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d102      	bne.n	800267e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002678:	7b3b      	ldrb	r3, [r7, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e03e      	b.n	8002700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2202      	movs	r2, #2
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_TIM_Encoder_Start+0xc4>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d008      	beq.n	80026c0 <HAL_TIM_Encoder_Start+0xd4>
 80026ae:	e00f      	b.n	80026d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fc2f 	bl	8002f1c <TIM_CCxChannelCmd>
      break;
 80026be:	e016      	b.n	80026ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	2104      	movs	r1, #4
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fc27 	bl	8002f1c <TIM_CCxChannelCmd>
      break;
 80026ce:	e00e      	b.n	80026ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2201      	movs	r2, #1
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fc1f 	bl	8002f1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	2104      	movs	r1, #4
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc18 	bl	8002f1c <TIM_CCxChannelCmd>
      break;
 80026ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002722:	2302      	movs	r3, #2
 8002724:	e0ae      	b.n	8002884 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b0c      	cmp	r3, #12
 8002732:	f200 809f 	bhi.w	8002874 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002736:	a201      	add	r2, pc, #4	@ (adr r2, 800273c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273c:	08002771 	.word	0x08002771
 8002740:	08002875 	.word	0x08002875
 8002744:	08002875 	.word	0x08002875
 8002748:	08002875 	.word	0x08002875
 800274c:	080027b1 	.word	0x080027b1
 8002750:	08002875 	.word	0x08002875
 8002754:	08002875 	.word	0x08002875
 8002758:	08002875 	.word	0x08002875
 800275c:	080027f3 	.word	0x080027f3
 8002760:	08002875 	.word	0x08002875
 8002764:	08002875 	.word	0x08002875
 8002768:	08002875 	.word	0x08002875
 800276c:	08002833 	.word	0x08002833
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f9b2 	bl	8002ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0208 	orr.w	r2, r2, #8
 800278a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6999      	ldr	r1, [r3, #24]
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	619a      	str	r2, [r3, #24]
      break;
 80027ae:	e064      	b.n	800287a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f9f8 	bl	8002bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6999      	ldr	r1, [r3, #24]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	021a      	lsls	r2, r3, #8
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	619a      	str	r2, [r3, #24]
      break;
 80027f0:	e043      	b.n	800287a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fa41 	bl	8002c80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0208 	orr.w	r2, r2, #8
 800280c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0204 	bic.w	r2, r2, #4
 800281c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69d9      	ldr	r1, [r3, #28]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	61da      	str	r2, [r3, #28]
      break;
 8002830:	e023      	b.n	800287a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fa8b 	bl	8002d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800284c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800285c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69d9      	ldr	r1, [r3, #28]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	021a      	lsls	r2, r3, #8
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	61da      	str	r2, [r3, #28]
      break;
 8002872:	e002      	b.n	800287a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	75fb      	strb	r3, [r7, #23]
      break;
 8002878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_TIM_ConfigClockSource+0x1c>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e0b4      	b.n	8002a12 <HAL_TIM_ConfigClockSource+0x186>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e0:	d03e      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0xd4>
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e6:	f200 8087 	bhi.w	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 80028ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ee:	f000 8086 	beq.w	80029fe <HAL_TIM_ConfigClockSource+0x172>
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f6:	d87f      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d01a      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0xa6>
 80028fc:	2b70      	cmp	r3, #112	@ 0x70
 80028fe:	d87b      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b60      	cmp	r3, #96	@ 0x60
 8002902:	d050      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002904:	2b60      	cmp	r3, #96	@ 0x60
 8002906:	d877      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b50      	cmp	r3, #80	@ 0x50
 800290a:	d03c      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0xfa>
 800290c:	2b50      	cmp	r3, #80	@ 0x50
 800290e:	d873      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d058      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002914:	2b40      	cmp	r3, #64	@ 0x40
 8002916:	d86f      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b30      	cmp	r3, #48	@ 0x30
 800291a:	d064      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x15a>
 800291c:	2b30      	cmp	r3, #48	@ 0x30
 800291e:	d86b      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d060      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002924:	2b20      	cmp	r3, #32
 8002926:	d867      	bhi.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05c      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	2b10      	cmp	r3, #16
 800292e:	d05a      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002930:	e062      	b.n	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002942:	f000 facc 	bl	8002ede <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	609a      	str	r2, [r3, #8]
      break;
 800295e:	e04f      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002970:	f000 fab5 	bl	8002ede <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002982:	609a      	str	r2, [r3, #8]
      break;
 8002984:	e03c      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	461a      	mov	r2, r3
 8002994:	f000 fa2c 	bl	8002df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2150      	movs	r1, #80	@ 0x50
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fa83 	bl	8002eaa <TIM_ITRx_SetConfig>
      break;
 80029a4:	e02c      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b2:	461a      	mov	r2, r3
 80029b4:	f000 fa4a 	bl	8002e4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2160      	movs	r1, #96	@ 0x60
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fa73 	bl	8002eaa <TIM_ITRx_SetConfig>
      break;
 80029c4:	e01c      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 fa0c 	bl	8002df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2140      	movs	r1, #64	@ 0x40
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fa63 	bl	8002eaa <TIM_ITRx_SetConfig>
      break;
 80029e4:	e00c      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f000 fa5a 	bl	8002eaa <TIM_ITRx_SetConfig>
      break;
 80029f6:	e003      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      break;
 80029fc:	e000      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a29      	ldr	r2, [pc, #164]	@ (8002ad4 <TIM_Base_SetConfig+0xb8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <TIM_Base_SetConfig+0x30>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3a:	d007      	beq.n	8002a4c <TIM_Base_SetConfig+0x30>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a26      	ldr	r2, [pc, #152]	@ (8002ad8 <TIM_Base_SetConfig+0xbc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d003      	beq.n	8002a4c <TIM_Base_SetConfig+0x30>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a25      	ldr	r2, [pc, #148]	@ (8002adc <TIM_Base_SetConfig+0xc0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d108      	bne.n	8002a5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <TIM_Base_SetConfig+0xb8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <TIM_Base_SetConfig+0x62>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6c:	d007      	beq.n	8002a7e <TIM_Base_SetConfig+0x62>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <TIM_Base_SetConfig+0xbc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d003      	beq.n	8002a7e <TIM_Base_SetConfig+0x62>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a18      	ldr	r2, [pc, #96]	@ (8002adc <TIM_Base_SetConfig+0xc0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a07      	ldr	r2, [pc, #28]	@ (8002ad4 <TIM_Base_SetConfig+0xb8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d103      	bne.n	8002ac4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800

08002ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f023 0201 	bic.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0303 	bic.w	r3, r3, #3
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 0302 	bic.w	r3, r3, #2
 8002b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <TIM_OC1_SetConfig+0xc8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10c      	bne.n	8002b56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0308 	bic.w	r3, r3, #8
 8002b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a13      	ldr	r2, [pc, #76]	@ (8002ba8 <TIM_OC1_SetConfig+0xc8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d111      	bne.n	8002b82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	621a      	str	r2, [r3, #32]
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40012c00 	.word	0x40012c00

08002bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f023 0210 	bic.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0320 	bic.w	r3, r3, #32
 8002bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <TIM_OC2_SetConfig+0xd0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10d      	bne.n	8002c28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <TIM_OC2_SetConfig+0xd0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d113      	bne.n	8002c58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40012c00 	.word	0x40012c00

08002c80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <TIM_OC3_SetConfig+0xd0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d10d      	bne.n	8002cfa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a14      	ldr	r2, [pc, #80]	@ (8002d50 <TIM_OC3_SetConfig+0xd0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d113      	bne.n	8002d2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	621a      	str	r2, [r3, #32]
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40012c00 	.word	0x40012c00

08002d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	031b      	lsls	r3, r3, #12
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0f      	ldr	r2, [pc, #60]	@ (8002dec <TIM_OC4_SetConfig+0x98>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d109      	bne.n	8002dc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40012c00 	.word	0x40012c00

08002df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0201 	bic.w	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 030a 	bic.w	r3, r3, #10
 8002e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0210 	bic.w	r2, r3, #16
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	031b      	lsls	r3, r3, #12
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	621a      	str	r2, [r3, #32]
}
 8002ea0:	bf00      	nop
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f043 0307 	orr.w	r3, r3, #7
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b087      	sub	sp, #28
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	021a      	lsls	r2, r3, #8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	609a      	str	r2, [r3, #8]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	2201      	movs	r2, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1a      	ldr	r2, [r3, #32]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	401a      	ands	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 031f 	and.w	r3, r3, #31
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e046      	b.n	800300a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d009      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a12      	ldr	r2, [pc, #72]	@ (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a10      	ldr	r2, [pc, #64]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800

08003020 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003038:	2302      	movs	r3, #2
 800303a:	e03d      	b.n	80030b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr
	...

080030c4 <siprintf>:
 80030c4:	b40e      	push	{r1, r2, r3}
 80030c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80030ca:	b500      	push	{lr}
 80030cc:	b09c      	sub	sp, #112	@ 0x70
 80030ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80030d0:	9002      	str	r0, [sp, #8]
 80030d2:	9006      	str	r0, [sp, #24]
 80030d4:	9107      	str	r1, [sp, #28]
 80030d6:	9104      	str	r1, [sp, #16]
 80030d8:	4808      	ldr	r0, [pc, #32]	@ (80030fc <siprintf+0x38>)
 80030da:	4909      	ldr	r1, [pc, #36]	@ (8003100 <siprintf+0x3c>)
 80030dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80030e0:	9105      	str	r1, [sp, #20]
 80030e2:	6800      	ldr	r0, [r0, #0]
 80030e4:	a902      	add	r1, sp, #8
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	f000 f992 	bl	8003410 <_svfiprintf_r>
 80030ec:	2200      	movs	r2, #0
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	b01c      	add	sp, #112	@ 0x70
 80030f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030f8:	b003      	add	sp, #12
 80030fa:	4770      	bx	lr
 80030fc:	2000002c 	.word	0x2000002c
 8003100:	ffff0208 	.word	0xffff0208

08003104 <memset>:
 8003104:	4603      	mov	r3, r0
 8003106:	4402      	add	r2, r0
 8003108:	4293      	cmp	r3, r2
 800310a:	d100      	bne.n	800310e <memset+0xa>
 800310c:	4770      	bx	lr
 800310e:	f803 1b01 	strb.w	r1, [r3], #1
 8003112:	e7f9      	b.n	8003108 <memset+0x4>

08003114 <__errno>:
 8003114:	4b01      	ldr	r3, [pc, #4]	@ (800311c <__errno+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000002c 	.word	0x2000002c

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	2600      	movs	r6, #0
 8003124:	4d0c      	ldr	r5, [pc, #48]	@ (8003158 <__libc_init_array+0x38>)
 8003126:	4c0d      	ldr	r4, [pc, #52]	@ (800315c <__libc_init_array+0x3c>)
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	f000 fc78 	bl	8003a24 <_init>
 8003134:	2600      	movs	r6, #0
 8003136:	4d0a      	ldr	r5, [pc, #40]	@ (8003160 <__libc_init_array+0x40>)
 8003138:	4c0a      	ldr	r4, [pc, #40]	@ (8003164 <__libc_init_array+0x44>)
 800313a:	1b64      	subs	r4, r4, r5
 800313c:	10a4      	asrs	r4, r4, #2
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	f855 3b04 	ldr.w	r3, [r5], #4
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	08003acc 	.word	0x08003acc
 800315c:	08003acc 	.word	0x08003acc
 8003160:	08003acc 	.word	0x08003acc
 8003164:	08003ad0 	.word	0x08003ad0

08003168 <__retarget_lock_acquire_recursive>:
 8003168:	4770      	bx	lr

0800316a <__retarget_lock_release_recursive>:
 800316a:	4770      	bx	lr

0800316c <_free_r>:
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	4605      	mov	r5, r0
 8003170:	2900      	cmp	r1, #0
 8003172:	d040      	beq.n	80031f6 <_free_r+0x8a>
 8003174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003178:	1f0c      	subs	r4, r1, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	bfb8      	it	lt
 800317e:	18e4      	addlt	r4, r4, r3
 8003180:	f000 f8de 	bl	8003340 <__malloc_lock>
 8003184:	4a1c      	ldr	r2, [pc, #112]	@ (80031f8 <_free_r+0x8c>)
 8003186:	6813      	ldr	r3, [r2, #0]
 8003188:	b933      	cbnz	r3, 8003198 <_free_r+0x2c>
 800318a:	6063      	str	r3, [r4, #4]
 800318c:	6014      	str	r4, [r2, #0]
 800318e:	4628      	mov	r0, r5
 8003190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003194:	f000 b8da 	b.w	800334c <__malloc_unlock>
 8003198:	42a3      	cmp	r3, r4
 800319a:	d908      	bls.n	80031ae <_free_r+0x42>
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	1821      	adds	r1, r4, r0
 80031a0:	428b      	cmp	r3, r1
 80031a2:	bf01      	itttt	eq
 80031a4:	6819      	ldreq	r1, [r3, #0]
 80031a6:	685b      	ldreq	r3, [r3, #4]
 80031a8:	1809      	addeq	r1, r1, r0
 80031aa:	6021      	streq	r1, [r4, #0]
 80031ac:	e7ed      	b.n	800318a <_free_r+0x1e>
 80031ae:	461a      	mov	r2, r3
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	b10b      	cbz	r3, 80031b8 <_free_r+0x4c>
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	d9fa      	bls.n	80031ae <_free_r+0x42>
 80031b8:	6811      	ldr	r1, [r2, #0]
 80031ba:	1850      	adds	r0, r2, r1
 80031bc:	42a0      	cmp	r0, r4
 80031be:	d10b      	bne.n	80031d8 <_free_r+0x6c>
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	4401      	add	r1, r0
 80031c4:	1850      	adds	r0, r2, r1
 80031c6:	4283      	cmp	r3, r0
 80031c8:	6011      	str	r1, [r2, #0]
 80031ca:	d1e0      	bne.n	800318e <_free_r+0x22>
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4408      	add	r0, r1
 80031d2:	6010      	str	r0, [r2, #0]
 80031d4:	6053      	str	r3, [r2, #4]
 80031d6:	e7da      	b.n	800318e <_free_r+0x22>
 80031d8:	d902      	bls.n	80031e0 <_free_r+0x74>
 80031da:	230c      	movs	r3, #12
 80031dc:	602b      	str	r3, [r5, #0]
 80031de:	e7d6      	b.n	800318e <_free_r+0x22>
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	1821      	adds	r1, r4, r0
 80031e4:	428b      	cmp	r3, r1
 80031e6:	bf01      	itttt	eq
 80031e8:	6819      	ldreq	r1, [r3, #0]
 80031ea:	685b      	ldreq	r3, [r3, #4]
 80031ec:	1809      	addeq	r1, r1, r0
 80031ee:	6021      	streq	r1, [r4, #0]
 80031f0:	6063      	str	r3, [r4, #4]
 80031f2:	6054      	str	r4, [r2, #4]
 80031f4:	e7cb      	b.n	800318e <_free_r+0x22>
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	20000274 	.word	0x20000274

080031fc <sbrk_aligned>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4e0f      	ldr	r6, [pc, #60]	@ (800323c <sbrk_aligned+0x40>)
 8003200:	460c      	mov	r4, r1
 8003202:	6831      	ldr	r1, [r6, #0]
 8003204:	4605      	mov	r5, r0
 8003206:	b911      	cbnz	r1, 800320e <sbrk_aligned+0x12>
 8003208:	f000 fbaa 	bl	8003960 <_sbrk_r>
 800320c:	6030      	str	r0, [r6, #0]
 800320e:	4621      	mov	r1, r4
 8003210:	4628      	mov	r0, r5
 8003212:	f000 fba5 	bl	8003960 <_sbrk_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	d103      	bne.n	8003222 <sbrk_aligned+0x26>
 800321a:	f04f 34ff 	mov.w	r4, #4294967295
 800321e:	4620      	mov	r0, r4
 8003220:	bd70      	pop	{r4, r5, r6, pc}
 8003222:	1cc4      	adds	r4, r0, #3
 8003224:	f024 0403 	bic.w	r4, r4, #3
 8003228:	42a0      	cmp	r0, r4
 800322a:	d0f8      	beq.n	800321e <sbrk_aligned+0x22>
 800322c:	1a21      	subs	r1, r4, r0
 800322e:	4628      	mov	r0, r5
 8003230:	f000 fb96 	bl	8003960 <_sbrk_r>
 8003234:	3001      	adds	r0, #1
 8003236:	d1f2      	bne.n	800321e <sbrk_aligned+0x22>
 8003238:	e7ef      	b.n	800321a <sbrk_aligned+0x1e>
 800323a:	bf00      	nop
 800323c:	20000270 	.word	0x20000270

08003240 <_malloc_r>:
 8003240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003244:	1ccd      	adds	r5, r1, #3
 8003246:	f025 0503 	bic.w	r5, r5, #3
 800324a:	3508      	adds	r5, #8
 800324c:	2d0c      	cmp	r5, #12
 800324e:	bf38      	it	cc
 8003250:	250c      	movcc	r5, #12
 8003252:	2d00      	cmp	r5, #0
 8003254:	4606      	mov	r6, r0
 8003256:	db01      	blt.n	800325c <_malloc_r+0x1c>
 8003258:	42a9      	cmp	r1, r5
 800325a:	d904      	bls.n	8003266 <_malloc_r+0x26>
 800325c:	230c      	movs	r3, #12
 800325e:	6033      	str	r3, [r6, #0]
 8003260:	2000      	movs	r0, #0
 8003262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800333c <_malloc_r+0xfc>
 800326a:	f000 f869 	bl	8003340 <__malloc_lock>
 800326e:	f8d8 3000 	ldr.w	r3, [r8]
 8003272:	461c      	mov	r4, r3
 8003274:	bb44      	cbnz	r4, 80032c8 <_malloc_r+0x88>
 8003276:	4629      	mov	r1, r5
 8003278:	4630      	mov	r0, r6
 800327a:	f7ff ffbf 	bl	80031fc <sbrk_aligned>
 800327e:	1c43      	adds	r3, r0, #1
 8003280:	4604      	mov	r4, r0
 8003282:	d158      	bne.n	8003336 <_malloc_r+0xf6>
 8003284:	f8d8 4000 	ldr.w	r4, [r8]
 8003288:	4627      	mov	r7, r4
 800328a:	2f00      	cmp	r7, #0
 800328c:	d143      	bne.n	8003316 <_malloc_r+0xd6>
 800328e:	2c00      	cmp	r4, #0
 8003290:	d04b      	beq.n	800332a <_malloc_r+0xea>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	4639      	mov	r1, r7
 8003296:	4630      	mov	r0, r6
 8003298:	eb04 0903 	add.w	r9, r4, r3
 800329c:	f000 fb60 	bl	8003960 <_sbrk_r>
 80032a0:	4581      	cmp	r9, r0
 80032a2:	d142      	bne.n	800332a <_malloc_r+0xea>
 80032a4:	6821      	ldr	r1, [r4, #0]
 80032a6:	4630      	mov	r0, r6
 80032a8:	1a6d      	subs	r5, r5, r1
 80032aa:	4629      	mov	r1, r5
 80032ac:	f7ff ffa6 	bl	80031fc <sbrk_aligned>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d03a      	beq.n	800332a <_malloc_r+0xea>
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	442b      	add	r3, r5
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	f8d8 3000 	ldr.w	r3, [r8]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	bb62      	cbnz	r2, 800331c <_malloc_r+0xdc>
 80032c2:	f8c8 7000 	str.w	r7, [r8]
 80032c6:	e00f      	b.n	80032e8 <_malloc_r+0xa8>
 80032c8:	6822      	ldr	r2, [r4, #0]
 80032ca:	1b52      	subs	r2, r2, r5
 80032cc:	d420      	bmi.n	8003310 <_malloc_r+0xd0>
 80032ce:	2a0b      	cmp	r2, #11
 80032d0:	d917      	bls.n	8003302 <_malloc_r+0xc2>
 80032d2:	1961      	adds	r1, r4, r5
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	6025      	str	r5, [r4, #0]
 80032d8:	bf18      	it	ne
 80032da:	6059      	strne	r1, [r3, #4]
 80032dc:	6863      	ldr	r3, [r4, #4]
 80032de:	bf08      	it	eq
 80032e0:	f8c8 1000 	streq.w	r1, [r8]
 80032e4:	5162      	str	r2, [r4, r5]
 80032e6:	604b      	str	r3, [r1, #4]
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 f82f 	bl	800334c <__malloc_unlock>
 80032ee:	f104 000b 	add.w	r0, r4, #11
 80032f2:	1d23      	adds	r3, r4, #4
 80032f4:	f020 0007 	bic.w	r0, r0, #7
 80032f8:	1ac2      	subs	r2, r0, r3
 80032fa:	bf1c      	itt	ne
 80032fc:	1a1b      	subne	r3, r3, r0
 80032fe:	50a3      	strne	r3, [r4, r2]
 8003300:	e7af      	b.n	8003262 <_malloc_r+0x22>
 8003302:	6862      	ldr	r2, [r4, #4]
 8003304:	42a3      	cmp	r3, r4
 8003306:	bf0c      	ite	eq
 8003308:	f8c8 2000 	streq.w	r2, [r8]
 800330c:	605a      	strne	r2, [r3, #4]
 800330e:	e7eb      	b.n	80032e8 <_malloc_r+0xa8>
 8003310:	4623      	mov	r3, r4
 8003312:	6864      	ldr	r4, [r4, #4]
 8003314:	e7ae      	b.n	8003274 <_malloc_r+0x34>
 8003316:	463c      	mov	r4, r7
 8003318:	687f      	ldr	r7, [r7, #4]
 800331a:	e7b6      	b.n	800328a <_malloc_r+0x4a>
 800331c:	461a      	mov	r2, r3
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	42a3      	cmp	r3, r4
 8003322:	d1fb      	bne.n	800331c <_malloc_r+0xdc>
 8003324:	2300      	movs	r3, #0
 8003326:	6053      	str	r3, [r2, #4]
 8003328:	e7de      	b.n	80032e8 <_malloc_r+0xa8>
 800332a:	230c      	movs	r3, #12
 800332c:	4630      	mov	r0, r6
 800332e:	6033      	str	r3, [r6, #0]
 8003330:	f000 f80c 	bl	800334c <__malloc_unlock>
 8003334:	e794      	b.n	8003260 <_malloc_r+0x20>
 8003336:	6005      	str	r5, [r0, #0]
 8003338:	e7d6      	b.n	80032e8 <_malloc_r+0xa8>
 800333a:	bf00      	nop
 800333c:	20000274 	.word	0x20000274

08003340 <__malloc_lock>:
 8003340:	4801      	ldr	r0, [pc, #4]	@ (8003348 <__malloc_lock+0x8>)
 8003342:	f7ff bf11 	b.w	8003168 <__retarget_lock_acquire_recursive>
 8003346:	bf00      	nop
 8003348:	2000026c 	.word	0x2000026c

0800334c <__malloc_unlock>:
 800334c:	4801      	ldr	r0, [pc, #4]	@ (8003354 <__malloc_unlock+0x8>)
 800334e:	f7ff bf0c 	b.w	800316a <__retarget_lock_release_recursive>
 8003352:	bf00      	nop
 8003354:	2000026c 	.word	0x2000026c

08003358 <__ssputs_r>:
 8003358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800335c:	461f      	mov	r7, r3
 800335e:	688e      	ldr	r6, [r1, #8]
 8003360:	4682      	mov	sl, r0
 8003362:	42be      	cmp	r6, r7
 8003364:	460c      	mov	r4, r1
 8003366:	4690      	mov	r8, r2
 8003368:	680b      	ldr	r3, [r1, #0]
 800336a:	d82d      	bhi.n	80033c8 <__ssputs_r+0x70>
 800336c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003370:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003374:	d026      	beq.n	80033c4 <__ssputs_r+0x6c>
 8003376:	6965      	ldr	r5, [r4, #20]
 8003378:	6909      	ldr	r1, [r1, #16]
 800337a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800337e:	eba3 0901 	sub.w	r9, r3, r1
 8003382:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003386:	1c7b      	adds	r3, r7, #1
 8003388:	444b      	add	r3, r9
 800338a:	106d      	asrs	r5, r5, #1
 800338c:	429d      	cmp	r5, r3
 800338e:	bf38      	it	cc
 8003390:	461d      	movcc	r5, r3
 8003392:	0553      	lsls	r3, r2, #21
 8003394:	d527      	bpl.n	80033e6 <__ssputs_r+0x8e>
 8003396:	4629      	mov	r1, r5
 8003398:	f7ff ff52 	bl	8003240 <_malloc_r>
 800339c:	4606      	mov	r6, r0
 800339e:	b360      	cbz	r0, 80033fa <__ssputs_r+0xa2>
 80033a0:	464a      	mov	r2, r9
 80033a2:	6921      	ldr	r1, [r4, #16]
 80033a4:	f000 fafa 	bl	800399c <memcpy>
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80033ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b2:	81a3      	strh	r3, [r4, #12]
 80033b4:	6126      	str	r6, [r4, #16]
 80033b6:	444e      	add	r6, r9
 80033b8:	6026      	str	r6, [r4, #0]
 80033ba:	463e      	mov	r6, r7
 80033bc:	6165      	str	r5, [r4, #20]
 80033be:	eba5 0509 	sub.w	r5, r5, r9
 80033c2:	60a5      	str	r5, [r4, #8]
 80033c4:	42be      	cmp	r6, r7
 80033c6:	d900      	bls.n	80033ca <__ssputs_r+0x72>
 80033c8:	463e      	mov	r6, r7
 80033ca:	4632      	mov	r2, r6
 80033cc:	4641      	mov	r1, r8
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	f000 faac 	bl	800392c <memmove>
 80033d4:	2000      	movs	r0, #0
 80033d6:	68a3      	ldr	r3, [r4, #8]
 80033d8:	1b9b      	subs	r3, r3, r6
 80033da:	60a3      	str	r3, [r4, #8]
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	4433      	add	r3, r6
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e6:	462a      	mov	r2, r5
 80033e8:	f000 fae6 	bl	80039b8 <_realloc_r>
 80033ec:	4606      	mov	r6, r0
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d1e0      	bne.n	80033b4 <__ssputs_r+0x5c>
 80033f2:	4650      	mov	r0, sl
 80033f4:	6921      	ldr	r1, [r4, #16]
 80033f6:	f7ff feb9 	bl	800316c <_free_r>
 80033fa:	230c      	movs	r3, #12
 80033fc:	f8ca 3000 	str.w	r3, [sl]
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f04f 30ff 	mov.w	r0, #4294967295
 8003406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800340a:	81a3      	strh	r3, [r4, #12]
 800340c:	e7e9      	b.n	80033e2 <__ssputs_r+0x8a>
	...

08003410 <_svfiprintf_r>:
 8003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	4698      	mov	r8, r3
 8003416:	898b      	ldrh	r3, [r1, #12]
 8003418:	4607      	mov	r7, r0
 800341a:	061b      	lsls	r3, r3, #24
 800341c:	460d      	mov	r5, r1
 800341e:	4614      	mov	r4, r2
 8003420:	b09d      	sub	sp, #116	@ 0x74
 8003422:	d510      	bpl.n	8003446 <_svfiprintf_r+0x36>
 8003424:	690b      	ldr	r3, [r1, #16]
 8003426:	b973      	cbnz	r3, 8003446 <_svfiprintf_r+0x36>
 8003428:	2140      	movs	r1, #64	@ 0x40
 800342a:	f7ff ff09 	bl	8003240 <_malloc_r>
 800342e:	6028      	str	r0, [r5, #0]
 8003430:	6128      	str	r0, [r5, #16]
 8003432:	b930      	cbnz	r0, 8003442 <_svfiprintf_r+0x32>
 8003434:	230c      	movs	r3, #12
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	b01d      	add	sp, #116	@ 0x74
 800343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003442:	2340      	movs	r3, #64	@ 0x40
 8003444:	616b      	str	r3, [r5, #20]
 8003446:	2300      	movs	r3, #0
 8003448:	9309      	str	r3, [sp, #36]	@ 0x24
 800344a:	2320      	movs	r3, #32
 800344c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003450:	2330      	movs	r3, #48	@ 0x30
 8003452:	f04f 0901 	mov.w	r9, #1
 8003456:	f8cd 800c 	str.w	r8, [sp, #12]
 800345a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80035f4 <_svfiprintf_r+0x1e4>
 800345e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003462:	4623      	mov	r3, r4
 8003464:	469a      	mov	sl, r3
 8003466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800346a:	b10a      	cbz	r2, 8003470 <_svfiprintf_r+0x60>
 800346c:	2a25      	cmp	r2, #37	@ 0x25
 800346e:	d1f9      	bne.n	8003464 <_svfiprintf_r+0x54>
 8003470:	ebba 0b04 	subs.w	fp, sl, r4
 8003474:	d00b      	beq.n	800348e <_svfiprintf_r+0x7e>
 8003476:	465b      	mov	r3, fp
 8003478:	4622      	mov	r2, r4
 800347a:	4629      	mov	r1, r5
 800347c:	4638      	mov	r0, r7
 800347e:	f7ff ff6b 	bl	8003358 <__ssputs_r>
 8003482:	3001      	adds	r0, #1
 8003484:	f000 80a7 	beq.w	80035d6 <_svfiprintf_r+0x1c6>
 8003488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800348a:	445a      	add	r2, fp
 800348c:	9209      	str	r2, [sp, #36]	@ 0x24
 800348e:	f89a 3000 	ldrb.w	r3, [sl]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 809f 	beq.w	80035d6 <_svfiprintf_r+0x1c6>
 8003498:	2300      	movs	r3, #0
 800349a:	f04f 32ff 	mov.w	r2, #4294967295
 800349e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034a2:	f10a 0a01 	add.w	sl, sl, #1
 80034a6:	9304      	str	r3, [sp, #16]
 80034a8:	9307      	str	r3, [sp, #28]
 80034aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80034b0:	4654      	mov	r4, sl
 80034b2:	2205      	movs	r2, #5
 80034b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b8:	484e      	ldr	r0, [pc, #312]	@ (80035f4 <_svfiprintf_r+0x1e4>)
 80034ba:	f000 fa61 	bl	8003980 <memchr>
 80034be:	9a04      	ldr	r2, [sp, #16]
 80034c0:	b9d8      	cbnz	r0, 80034fa <_svfiprintf_r+0xea>
 80034c2:	06d0      	lsls	r0, r2, #27
 80034c4:	bf44      	itt	mi
 80034c6:	2320      	movmi	r3, #32
 80034c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034cc:	0711      	lsls	r1, r2, #28
 80034ce:	bf44      	itt	mi
 80034d0:	232b      	movmi	r3, #43	@ 0x2b
 80034d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034d6:	f89a 3000 	ldrb.w	r3, [sl]
 80034da:	2b2a      	cmp	r3, #42	@ 0x2a
 80034dc:	d015      	beq.n	800350a <_svfiprintf_r+0xfa>
 80034de:	4654      	mov	r4, sl
 80034e0:	2000      	movs	r0, #0
 80034e2:	f04f 0c0a 	mov.w	ip, #10
 80034e6:	9a07      	ldr	r2, [sp, #28]
 80034e8:	4621      	mov	r1, r4
 80034ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ee:	3b30      	subs	r3, #48	@ 0x30
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d94b      	bls.n	800358c <_svfiprintf_r+0x17c>
 80034f4:	b1b0      	cbz	r0, 8003524 <_svfiprintf_r+0x114>
 80034f6:	9207      	str	r2, [sp, #28]
 80034f8:	e014      	b.n	8003524 <_svfiprintf_r+0x114>
 80034fa:	eba0 0308 	sub.w	r3, r0, r8
 80034fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003502:	4313      	orrs	r3, r2
 8003504:	46a2      	mov	sl, r4
 8003506:	9304      	str	r3, [sp, #16]
 8003508:	e7d2      	b.n	80034b0 <_svfiprintf_r+0xa0>
 800350a:	9b03      	ldr	r3, [sp, #12]
 800350c:	1d19      	adds	r1, r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	9103      	str	r1, [sp, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	bfbb      	ittet	lt
 8003516:	425b      	neglt	r3, r3
 8003518:	f042 0202 	orrlt.w	r2, r2, #2
 800351c:	9307      	strge	r3, [sp, #28]
 800351e:	9307      	strlt	r3, [sp, #28]
 8003520:	bfb8      	it	lt
 8003522:	9204      	strlt	r2, [sp, #16]
 8003524:	7823      	ldrb	r3, [r4, #0]
 8003526:	2b2e      	cmp	r3, #46	@ 0x2e
 8003528:	d10a      	bne.n	8003540 <_svfiprintf_r+0x130>
 800352a:	7863      	ldrb	r3, [r4, #1]
 800352c:	2b2a      	cmp	r3, #42	@ 0x2a
 800352e:	d132      	bne.n	8003596 <_svfiprintf_r+0x186>
 8003530:	9b03      	ldr	r3, [sp, #12]
 8003532:	3402      	adds	r4, #2
 8003534:	1d1a      	adds	r2, r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	9203      	str	r2, [sp, #12]
 800353a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800353e:	9305      	str	r3, [sp, #20]
 8003540:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80035f8 <_svfiprintf_r+0x1e8>
 8003544:	2203      	movs	r2, #3
 8003546:	4650      	mov	r0, sl
 8003548:	7821      	ldrb	r1, [r4, #0]
 800354a:	f000 fa19 	bl	8003980 <memchr>
 800354e:	b138      	cbz	r0, 8003560 <_svfiprintf_r+0x150>
 8003550:	2240      	movs	r2, #64	@ 0x40
 8003552:	9b04      	ldr	r3, [sp, #16]
 8003554:	eba0 000a 	sub.w	r0, r0, sl
 8003558:	4082      	lsls	r2, r0
 800355a:	4313      	orrs	r3, r2
 800355c:	3401      	adds	r4, #1
 800355e:	9304      	str	r3, [sp, #16]
 8003560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003564:	2206      	movs	r2, #6
 8003566:	4825      	ldr	r0, [pc, #148]	@ (80035fc <_svfiprintf_r+0x1ec>)
 8003568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800356c:	f000 fa08 	bl	8003980 <memchr>
 8003570:	2800      	cmp	r0, #0
 8003572:	d036      	beq.n	80035e2 <_svfiprintf_r+0x1d2>
 8003574:	4b22      	ldr	r3, [pc, #136]	@ (8003600 <_svfiprintf_r+0x1f0>)
 8003576:	bb1b      	cbnz	r3, 80035c0 <_svfiprintf_r+0x1b0>
 8003578:	9b03      	ldr	r3, [sp, #12]
 800357a:	3307      	adds	r3, #7
 800357c:	f023 0307 	bic.w	r3, r3, #7
 8003580:	3308      	adds	r3, #8
 8003582:	9303      	str	r3, [sp, #12]
 8003584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003586:	4433      	add	r3, r6
 8003588:	9309      	str	r3, [sp, #36]	@ 0x24
 800358a:	e76a      	b.n	8003462 <_svfiprintf_r+0x52>
 800358c:	460c      	mov	r4, r1
 800358e:	2001      	movs	r0, #1
 8003590:	fb0c 3202 	mla	r2, ip, r2, r3
 8003594:	e7a8      	b.n	80034e8 <_svfiprintf_r+0xd8>
 8003596:	2300      	movs	r3, #0
 8003598:	f04f 0c0a 	mov.w	ip, #10
 800359c:	4619      	mov	r1, r3
 800359e:	3401      	adds	r4, #1
 80035a0:	9305      	str	r3, [sp, #20]
 80035a2:	4620      	mov	r0, r4
 80035a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035a8:	3a30      	subs	r2, #48	@ 0x30
 80035aa:	2a09      	cmp	r2, #9
 80035ac:	d903      	bls.n	80035b6 <_svfiprintf_r+0x1a6>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0c6      	beq.n	8003540 <_svfiprintf_r+0x130>
 80035b2:	9105      	str	r1, [sp, #20]
 80035b4:	e7c4      	b.n	8003540 <_svfiprintf_r+0x130>
 80035b6:	4604      	mov	r4, r0
 80035b8:	2301      	movs	r3, #1
 80035ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80035be:	e7f0      	b.n	80035a2 <_svfiprintf_r+0x192>
 80035c0:	ab03      	add	r3, sp, #12
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	462a      	mov	r2, r5
 80035c6:	4638      	mov	r0, r7
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <_svfiprintf_r+0x1f4>)
 80035ca:	a904      	add	r1, sp, #16
 80035cc:	f3af 8000 	nop.w
 80035d0:	1c42      	adds	r2, r0, #1
 80035d2:	4606      	mov	r6, r0
 80035d4:	d1d6      	bne.n	8003584 <_svfiprintf_r+0x174>
 80035d6:	89ab      	ldrh	r3, [r5, #12]
 80035d8:	065b      	lsls	r3, r3, #25
 80035da:	f53f af2d 	bmi.w	8003438 <_svfiprintf_r+0x28>
 80035de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80035e0:	e72c      	b.n	800343c <_svfiprintf_r+0x2c>
 80035e2:	ab03      	add	r3, sp, #12
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	462a      	mov	r2, r5
 80035e8:	4638      	mov	r0, r7
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <_svfiprintf_r+0x1f4>)
 80035ec:	a904      	add	r1, sp, #16
 80035ee:	f000 f87d 	bl	80036ec <_printf_i>
 80035f2:	e7ed      	b.n	80035d0 <_svfiprintf_r+0x1c0>
 80035f4:	08003a96 	.word	0x08003a96
 80035f8:	08003a9c 	.word	0x08003a9c
 80035fc:	08003aa0 	.word	0x08003aa0
 8003600:	00000000 	.word	0x00000000
 8003604:	08003359 	.word	0x08003359

08003608 <_printf_common>:
 8003608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360c:	4616      	mov	r6, r2
 800360e:	4698      	mov	r8, r3
 8003610:	688a      	ldr	r2, [r1, #8]
 8003612:	690b      	ldr	r3, [r1, #16]
 8003614:	4607      	mov	r7, r0
 8003616:	4293      	cmp	r3, r2
 8003618:	bfb8      	it	lt
 800361a:	4613      	movlt	r3, r2
 800361c:	6033      	str	r3, [r6, #0]
 800361e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003622:	460c      	mov	r4, r1
 8003624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003628:	b10a      	cbz	r2, 800362e <_printf_common+0x26>
 800362a:	3301      	adds	r3, #1
 800362c:	6033      	str	r3, [r6, #0]
 800362e:	6823      	ldr	r3, [r4, #0]
 8003630:	0699      	lsls	r1, r3, #26
 8003632:	bf42      	ittt	mi
 8003634:	6833      	ldrmi	r3, [r6, #0]
 8003636:	3302      	addmi	r3, #2
 8003638:	6033      	strmi	r3, [r6, #0]
 800363a:	6825      	ldr	r5, [r4, #0]
 800363c:	f015 0506 	ands.w	r5, r5, #6
 8003640:	d106      	bne.n	8003650 <_printf_common+0x48>
 8003642:	f104 0a19 	add.w	sl, r4, #25
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	6832      	ldr	r2, [r6, #0]
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	42ab      	cmp	r3, r5
 800364e:	dc2b      	bgt.n	80036a8 <_printf_common+0xa0>
 8003650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003654:	6822      	ldr	r2, [r4, #0]
 8003656:	3b00      	subs	r3, #0
 8003658:	bf18      	it	ne
 800365a:	2301      	movne	r3, #1
 800365c:	0692      	lsls	r2, r2, #26
 800365e:	d430      	bmi.n	80036c2 <_printf_common+0xba>
 8003660:	4641      	mov	r1, r8
 8003662:	4638      	mov	r0, r7
 8003664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003668:	47c8      	blx	r9
 800366a:	3001      	adds	r0, #1
 800366c:	d023      	beq.n	80036b6 <_printf_common+0xae>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	6922      	ldr	r2, [r4, #16]
 8003672:	f003 0306 	and.w	r3, r3, #6
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf14      	ite	ne
 800367a:	2500      	movne	r5, #0
 800367c:	6833      	ldreq	r3, [r6, #0]
 800367e:	f04f 0600 	mov.w	r6, #0
 8003682:	bf08      	it	eq
 8003684:	68e5      	ldreq	r5, [r4, #12]
 8003686:	f104 041a 	add.w	r4, r4, #26
 800368a:	bf08      	it	eq
 800368c:	1aed      	subeq	r5, r5, r3
 800368e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003692:	bf08      	it	eq
 8003694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003698:	4293      	cmp	r3, r2
 800369a:	bfc4      	itt	gt
 800369c:	1a9b      	subgt	r3, r3, r2
 800369e:	18ed      	addgt	r5, r5, r3
 80036a0:	42b5      	cmp	r5, r6
 80036a2:	d11a      	bne.n	80036da <_printf_common+0xd2>
 80036a4:	2000      	movs	r0, #0
 80036a6:	e008      	b.n	80036ba <_printf_common+0xb2>
 80036a8:	2301      	movs	r3, #1
 80036aa:	4652      	mov	r2, sl
 80036ac:	4641      	mov	r1, r8
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c8      	blx	r9
 80036b2:	3001      	adds	r0, #1
 80036b4:	d103      	bne.n	80036be <_printf_common+0xb6>
 80036b6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036be:	3501      	adds	r5, #1
 80036c0:	e7c1      	b.n	8003646 <_printf_common+0x3e>
 80036c2:	2030      	movs	r0, #48	@ 0x30
 80036c4:	18e1      	adds	r1, r4, r3
 80036c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036d0:	4422      	add	r2, r4
 80036d2:	3302      	adds	r3, #2
 80036d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80036d8:	e7c2      	b.n	8003660 <_printf_common+0x58>
 80036da:	2301      	movs	r3, #1
 80036dc:	4622      	mov	r2, r4
 80036de:	4641      	mov	r1, r8
 80036e0:	4638      	mov	r0, r7
 80036e2:	47c8      	blx	r9
 80036e4:	3001      	adds	r0, #1
 80036e6:	d0e6      	beq.n	80036b6 <_printf_common+0xae>
 80036e8:	3601      	adds	r6, #1
 80036ea:	e7d9      	b.n	80036a0 <_printf_common+0x98>

080036ec <_printf_i>:
 80036ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f0:	7e0f      	ldrb	r7, [r1, #24]
 80036f2:	4691      	mov	r9, r2
 80036f4:	2f78      	cmp	r7, #120	@ 0x78
 80036f6:	4680      	mov	r8, r0
 80036f8:	460c      	mov	r4, r1
 80036fa:	469a      	mov	sl, r3
 80036fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80036fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003702:	d807      	bhi.n	8003714 <_printf_i+0x28>
 8003704:	2f62      	cmp	r7, #98	@ 0x62
 8003706:	d80a      	bhi.n	800371e <_printf_i+0x32>
 8003708:	2f00      	cmp	r7, #0
 800370a:	f000 80d3 	beq.w	80038b4 <_printf_i+0x1c8>
 800370e:	2f58      	cmp	r7, #88	@ 0x58
 8003710:	f000 80ba 	beq.w	8003888 <_printf_i+0x19c>
 8003714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800371c:	e03a      	b.n	8003794 <_printf_i+0xa8>
 800371e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003722:	2b15      	cmp	r3, #21
 8003724:	d8f6      	bhi.n	8003714 <_printf_i+0x28>
 8003726:	a101      	add	r1, pc, #4	@ (adr r1, 800372c <_printf_i+0x40>)
 8003728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800372c:	08003785 	.word	0x08003785
 8003730:	08003799 	.word	0x08003799
 8003734:	08003715 	.word	0x08003715
 8003738:	08003715 	.word	0x08003715
 800373c:	08003715 	.word	0x08003715
 8003740:	08003715 	.word	0x08003715
 8003744:	08003799 	.word	0x08003799
 8003748:	08003715 	.word	0x08003715
 800374c:	08003715 	.word	0x08003715
 8003750:	08003715 	.word	0x08003715
 8003754:	08003715 	.word	0x08003715
 8003758:	0800389b 	.word	0x0800389b
 800375c:	080037c3 	.word	0x080037c3
 8003760:	08003855 	.word	0x08003855
 8003764:	08003715 	.word	0x08003715
 8003768:	08003715 	.word	0x08003715
 800376c:	080038bd 	.word	0x080038bd
 8003770:	08003715 	.word	0x08003715
 8003774:	080037c3 	.word	0x080037c3
 8003778:	08003715 	.word	0x08003715
 800377c:	08003715 	.word	0x08003715
 8003780:	0800385d 	.word	0x0800385d
 8003784:	6833      	ldr	r3, [r6, #0]
 8003786:	1d1a      	adds	r2, r3, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6032      	str	r2, [r6, #0]
 800378c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003794:	2301      	movs	r3, #1
 8003796:	e09e      	b.n	80038d6 <_printf_i+0x1ea>
 8003798:	6833      	ldr	r3, [r6, #0]
 800379a:	6820      	ldr	r0, [r4, #0]
 800379c:	1d19      	adds	r1, r3, #4
 800379e:	6031      	str	r1, [r6, #0]
 80037a0:	0606      	lsls	r6, r0, #24
 80037a2:	d501      	bpl.n	80037a8 <_printf_i+0xbc>
 80037a4:	681d      	ldr	r5, [r3, #0]
 80037a6:	e003      	b.n	80037b0 <_printf_i+0xc4>
 80037a8:	0645      	lsls	r5, r0, #25
 80037aa:	d5fb      	bpl.n	80037a4 <_printf_i+0xb8>
 80037ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037b0:	2d00      	cmp	r5, #0
 80037b2:	da03      	bge.n	80037bc <_printf_i+0xd0>
 80037b4:	232d      	movs	r3, #45	@ 0x2d
 80037b6:	426d      	negs	r5, r5
 80037b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037bc:	230a      	movs	r3, #10
 80037be:	4859      	ldr	r0, [pc, #356]	@ (8003924 <_printf_i+0x238>)
 80037c0:	e011      	b.n	80037e6 <_printf_i+0xfa>
 80037c2:	6821      	ldr	r1, [r4, #0]
 80037c4:	6833      	ldr	r3, [r6, #0]
 80037c6:	0608      	lsls	r0, r1, #24
 80037c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80037cc:	d402      	bmi.n	80037d4 <_printf_i+0xe8>
 80037ce:	0649      	lsls	r1, r1, #25
 80037d0:	bf48      	it	mi
 80037d2:	b2ad      	uxthmi	r5, r5
 80037d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	bf14      	ite	ne
 80037da:	230a      	movne	r3, #10
 80037dc:	2308      	moveq	r3, #8
 80037de:	4851      	ldr	r0, [pc, #324]	@ (8003924 <_printf_i+0x238>)
 80037e0:	2100      	movs	r1, #0
 80037e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037e6:	6866      	ldr	r6, [r4, #4]
 80037e8:	2e00      	cmp	r6, #0
 80037ea:	bfa8      	it	ge
 80037ec:	6821      	ldrge	r1, [r4, #0]
 80037ee:	60a6      	str	r6, [r4, #8]
 80037f0:	bfa4      	itt	ge
 80037f2:	f021 0104 	bicge.w	r1, r1, #4
 80037f6:	6021      	strge	r1, [r4, #0]
 80037f8:	b90d      	cbnz	r5, 80037fe <_printf_i+0x112>
 80037fa:	2e00      	cmp	r6, #0
 80037fc:	d04b      	beq.n	8003896 <_printf_i+0x1aa>
 80037fe:	4616      	mov	r6, r2
 8003800:	fbb5 f1f3 	udiv	r1, r5, r3
 8003804:	fb03 5711 	mls	r7, r3, r1, r5
 8003808:	5dc7      	ldrb	r7, [r0, r7]
 800380a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800380e:	462f      	mov	r7, r5
 8003810:	42bb      	cmp	r3, r7
 8003812:	460d      	mov	r5, r1
 8003814:	d9f4      	bls.n	8003800 <_printf_i+0x114>
 8003816:	2b08      	cmp	r3, #8
 8003818:	d10b      	bne.n	8003832 <_printf_i+0x146>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	07df      	lsls	r7, r3, #31
 800381e:	d508      	bpl.n	8003832 <_printf_i+0x146>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	6861      	ldr	r1, [r4, #4]
 8003824:	4299      	cmp	r1, r3
 8003826:	bfde      	ittt	le
 8003828:	2330      	movle	r3, #48	@ 0x30
 800382a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800382e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003832:	1b92      	subs	r2, r2, r6
 8003834:	6122      	str	r2, [r4, #16]
 8003836:	464b      	mov	r3, r9
 8003838:	4621      	mov	r1, r4
 800383a:	4640      	mov	r0, r8
 800383c:	f8cd a000 	str.w	sl, [sp]
 8003840:	aa03      	add	r2, sp, #12
 8003842:	f7ff fee1 	bl	8003608 <_printf_common>
 8003846:	3001      	adds	r0, #1
 8003848:	d14a      	bne.n	80038e0 <_printf_i+0x1f4>
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	b004      	add	sp, #16
 8003850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	f043 0320 	orr.w	r3, r3, #32
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	2778      	movs	r7, #120	@ 0x78
 800385e:	4832      	ldr	r0, [pc, #200]	@ (8003928 <_printf_i+0x23c>)
 8003860:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	6831      	ldr	r1, [r6, #0]
 8003868:	061f      	lsls	r7, r3, #24
 800386a:	f851 5b04 	ldr.w	r5, [r1], #4
 800386e:	d402      	bmi.n	8003876 <_printf_i+0x18a>
 8003870:	065f      	lsls	r7, r3, #25
 8003872:	bf48      	it	mi
 8003874:	b2ad      	uxthmi	r5, r5
 8003876:	6031      	str	r1, [r6, #0]
 8003878:	07d9      	lsls	r1, r3, #31
 800387a:	bf44      	itt	mi
 800387c:	f043 0320 	orrmi.w	r3, r3, #32
 8003880:	6023      	strmi	r3, [r4, #0]
 8003882:	b11d      	cbz	r5, 800388c <_printf_i+0x1a0>
 8003884:	2310      	movs	r3, #16
 8003886:	e7ab      	b.n	80037e0 <_printf_i+0xf4>
 8003888:	4826      	ldr	r0, [pc, #152]	@ (8003924 <_printf_i+0x238>)
 800388a:	e7e9      	b.n	8003860 <_printf_i+0x174>
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	f023 0320 	bic.w	r3, r3, #32
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	e7f6      	b.n	8003884 <_printf_i+0x198>
 8003896:	4616      	mov	r6, r2
 8003898:	e7bd      	b.n	8003816 <_printf_i+0x12a>
 800389a:	6833      	ldr	r3, [r6, #0]
 800389c:	6825      	ldr	r5, [r4, #0]
 800389e:	1d18      	adds	r0, r3, #4
 80038a0:	6961      	ldr	r1, [r4, #20]
 80038a2:	6030      	str	r0, [r6, #0]
 80038a4:	062e      	lsls	r6, r5, #24
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	d501      	bpl.n	80038ae <_printf_i+0x1c2>
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	e002      	b.n	80038b4 <_printf_i+0x1c8>
 80038ae:	0668      	lsls	r0, r5, #25
 80038b0:	d5fb      	bpl.n	80038aa <_printf_i+0x1be>
 80038b2:	8019      	strh	r1, [r3, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	4616      	mov	r6, r2
 80038b8:	6123      	str	r3, [r4, #16]
 80038ba:	e7bc      	b.n	8003836 <_printf_i+0x14a>
 80038bc:	6833      	ldr	r3, [r6, #0]
 80038be:	2100      	movs	r1, #0
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	6032      	str	r2, [r6, #0]
 80038c4:	681e      	ldr	r6, [r3, #0]
 80038c6:	6862      	ldr	r2, [r4, #4]
 80038c8:	4630      	mov	r0, r6
 80038ca:	f000 f859 	bl	8003980 <memchr>
 80038ce:	b108      	cbz	r0, 80038d4 <_printf_i+0x1e8>
 80038d0:	1b80      	subs	r0, r0, r6
 80038d2:	6060      	str	r0, [r4, #4]
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	2300      	movs	r3, #0
 80038da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038de:	e7aa      	b.n	8003836 <_printf_i+0x14a>
 80038e0:	4632      	mov	r2, r6
 80038e2:	4649      	mov	r1, r9
 80038e4:	4640      	mov	r0, r8
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	47d0      	blx	sl
 80038ea:	3001      	adds	r0, #1
 80038ec:	d0ad      	beq.n	800384a <_printf_i+0x15e>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	079b      	lsls	r3, r3, #30
 80038f2:	d413      	bmi.n	800391c <_printf_i+0x230>
 80038f4:	68e0      	ldr	r0, [r4, #12]
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	4298      	cmp	r0, r3
 80038fa:	bfb8      	it	lt
 80038fc:	4618      	movlt	r0, r3
 80038fe:	e7a6      	b.n	800384e <_printf_i+0x162>
 8003900:	2301      	movs	r3, #1
 8003902:	4632      	mov	r2, r6
 8003904:	4649      	mov	r1, r9
 8003906:	4640      	mov	r0, r8
 8003908:	47d0      	blx	sl
 800390a:	3001      	adds	r0, #1
 800390c:	d09d      	beq.n	800384a <_printf_i+0x15e>
 800390e:	3501      	adds	r5, #1
 8003910:	68e3      	ldr	r3, [r4, #12]
 8003912:	9903      	ldr	r1, [sp, #12]
 8003914:	1a5b      	subs	r3, r3, r1
 8003916:	42ab      	cmp	r3, r5
 8003918:	dcf2      	bgt.n	8003900 <_printf_i+0x214>
 800391a:	e7eb      	b.n	80038f4 <_printf_i+0x208>
 800391c:	2500      	movs	r5, #0
 800391e:	f104 0619 	add.w	r6, r4, #25
 8003922:	e7f5      	b.n	8003910 <_printf_i+0x224>
 8003924:	08003aa7 	.word	0x08003aa7
 8003928:	08003ab8 	.word	0x08003ab8

0800392c <memmove>:
 800392c:	4288      	cmp	r0, r1
 800392e:	b510      	push	{r4, lr}
 8003930:	eb01 0402 	add.w	r4, r1, r2
 8003934:	d902      	bls.n	800393c <memmove+0x10>
 8003936:	4284      	cmp	r4, r0
 8003938:	4623      	mov	r3, r4
 800393a:	d807      	bhi.n	800394c <memmove+0x20>
 800393c:	1e43      	subs	r3, r0, #1
 800393e:	42a1      	cmp	r1, r4
 8003940:	d008      	beq.n	8003954 <memmove+0x28>
 8003942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800394a:	e7f8      	b.n	800393e <memmove+0x12>
 800394c:	4601      	mov	r1, r0
 800394e:	4402      	add	r2, r0
 8003950:	428a      	cmp	r2, r1
 8003952:	d100      	bne.n	8003956 <memmove+0x2a>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800395a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800395e:	e7f7      	b.n	8003950 <memmove+0x24>

08003960 <_sbrk_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	2300      	movs	r3, #0
 8003964:	4d05      	ldr	r5, [pc, #20]	@ (800397c <_sbrk_r+0x1c>)
 8003966:	4604      	mov	r4, r0
 8003968:	4608      	mov	r0, r1
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	f7fd fa60 	bl	8000e30 <_sbrk>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_sbrk_r+0x1a>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_sbrk_r+0x1a>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000268 	.word	0x20000268

08003980 <memchr>:
 8003980:	4603      	mov	r3, r0
 8003982:	b510      	push	{r4, lr}
 8003984:	b2c9      	uxtb	r1, r1
 8003986:	4402      	add	r2, r0
 8003988:	4293      	cmp	r3, r2
 800398a:	4618      	mov	r0, r3
 800398c:	d101      	bne.n	8003992 <memchr+0x12>
 800398e:	2000      	movs	r0, #0
 8003990:	e003      	b.n	800399a <memchr+0x1a>
 8003992:	7804      	ldrb	r4, [r0, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	428c      	cmp	r4, r1
 8003998:	d1f6      	bne.n	8003988 <memchr+0x8>
 800399a:	bd10      	pop	{r4, pc}

0800399c <memcpy>:
 800399c:	440a      	add	r2, r1
 800399e:	4291      	cmp	r1, r2
 80039a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039a4:	d100      	bne.n	80039a8 <memcpy+0xc>
 80039a6:	4770      	bx	lr
 80039a8:	b510      	push	{r4, lr}
 80039aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ae:	4291      	cmp	r1, r2
 80039b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039b4:	d1f9      	bne.n	80039aa <memcpy+0xe>
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <_realloc_r>:
 80039b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039bc:	4680      	mov	r8, r0
 80039be:	4615      	mov	r5, r2
 80039c0:	460c      	mov	r4, r1
 80039c2:	b921      	cbnz	r1, 80039ce <_realloc_r+0x16>
 80039c4:	4611      	mov	r1, r2
 80039c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ca:	f7ff bc39 	b.w	8003240 <_malloc_r>
 80039ce:	b92a      	cbnz	r2, 80039dc <_realloc_r+0x24>
 80039d0:	f7ff fbcc 	bl	800316c <_free_r>
 80039d4:	2400      	movs	r4, #0
 80039d6:	4620      	mov	r0, r4
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	f000 f81a 	bl	8003a14 <_malloc_usable_size_r>
 80039e0:	4285      	cmp	r5, r0
 80039e2:	4606      	mov	r6, r0
 80039e4:	d802      	bhi.n	80039ec <_realloc_r+0x34>
 80039e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039ea:	d8f4      	bhi.n	80039d6 <_realloc_r+0x1e>
 80039ec:	4629      	mov	r1, r5
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff fc26 	bl	8003240 <_malloc_r>
 80039f4:	4607      	mov	r7, r0
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d0ec      	beq.n	80039d4 <_realloc_r+0x1c>
 80039fa:	42b5      	cmp	r5, r6
 80039fc:	462a      	mov	r2, r5
 80039fe:	4621      	mov	r1, r4
 8003a00:	bf28      	it	cs
 8003a02:	4632      	movcs	r2, r6
 8003a04:	f7ff ffca 	bl	800399c <memcpy>
 8003a08:	4621      	mov	r1, r4
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	f7ff fbae 	bl	800316c <_free_r>
 8003a10:	463c      	mov	r4, r7
 8003a12:	e7e0      	b.n	80039d6 <_realloc_r+0x1e>

08003a14 <_malloc_usable_size_r>:
 8003a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a18:	1f18      	subs	r0, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfbc      	itt	lt
 8003a1e:	580b      	ldrlt	r3, [r1, r0]
 8003a20:	18c0      	addlt	r0, r0, r3
 8003a22:	4770      	bx	lr

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr
