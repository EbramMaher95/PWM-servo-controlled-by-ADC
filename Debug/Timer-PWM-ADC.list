
Timer-PWM-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08006eb0  08006eb0  00007eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007298  08007298  000091f4  2**0
                  CONTENTS
  4 .ARM          00000008  08007298  08007298  00008298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a0  080072a0  000091f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072a4  080072a4  000082a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  080072a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001f4  0800749c  000091f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  0800749c  000093dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a018  00000000  00000000  0000921d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df4  00000000  00000000  00013235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00015030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000914  00000000  00000000  00015c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019203  00000000  00000000  0001652c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d95c  00000000  00000000  0002f72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f077  00000000  00000000  0003d08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004328  00000000  00000000  000cc148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d0470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e94 	.word	0x08006e94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08006e94 	.word	0x08006e94

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <__aeabi_f2uiz>:
 8000e30:	0042      	lsls	r2, r0, #1
 8000e32:	d20e      	bcs.n	8000e52 <__aeabi_f2uiz+0x22>
 8000e34:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e38:	d30b      	bcc.n	8000e52 <__aeabi_f2uiz+0x22>
 8000e3a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e42:	d409      	bmi.n	8000e58 <__aeabi_f2uiz+0x28>
 8000e44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e4c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr
 8000e58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_f2uiz+0x32>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d102      	bne.n	8000e68 <__aeabi_f2uiz+0x38>
 8000e62:	f04f 30ff 	mov.w	r0, #4294967295
 8000e66:	4770      	bx	lr
 8000e68:	f04f 0000 	mov.w	r0, #0
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000e76:	f000 feaf 	bl	8001bd8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000e7a:	f000 f90b 	bl	8001094 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000e7e:	f000 fa45 	bl	800130c <MX_GPIO_Init>
    MX_TIM1_Init();
 8000e82:	f000 f9a1 	bl	80011c8 <MX_TIM1_Init>
    MX_ADC1_Init();
 8000e86:	f000 f961 	bl	800114c <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */

    // Start the base timer for Timer 1
    HAL_TIM_Base_Start(&htim1);
 8000e8a:	4875      	ldr	r0, [pc, #468]	@ (8001060 <main+0x1f0>)
 8000e8c:	f002 fb8e 	bl	80035ac <HAL_TIM_Base_Start>

    // Start the PWM generation for Timer 1 Channel 1
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4873      	ldr	r0, [pc, #460]	@ (8001060 <main+0x1f0>)
 8000e94:	f002 fc2c 	bl	80036f0 <HAL_TIM_PWM_Start>

    // Initialize the LCD with 2 lines and 16 columns
    Alcd_Init(&lcd, 2, 16);
 8000e98:	2210      	movs	r2, #16
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4871      	ldr	r0, [pc, #452]	@ (8001064 <main+0x1f4>)
 8000e9e:	f000 fd5d 	bl	800195c <Alcd_Init>

    // Set initial PWM duty cycle to center value (neutral position = 0 angle)
    TIM1->CCR1 = 1499;
 8000ea2:	4b71      	ldr	r3, [pc, #452]	@ (8001068 <main+0x1f8>)
 8000ea4:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000ea8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Declare variables for display and calculation
    char str[16];
    int16_t message;
    float angle = 0;
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    float pwm_cycle;
    int16_t adc_voltage;

    // Clear the LCD
    Alcd_Clear(&lcd);
 8000eb0:	486c      	ldr	r0, [pc, #432]	@ (8001064 <main+0x1f4>)
 8000eb2:	f000 fe27 	bl	8001b04 <Alcd_Clear>
    // Display initial messages on the LCD
    Alcd_PutAt(&lcd, 0, 0, "The angle range");
 8000eb6:	486d      	ldr	r0, [pc, #436]	@ (800106c <main+0x1fc>)
 8000eb8:	f000 fe78 	bl	8001bac <Str_Len>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800106c <main+0x1fc>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4866      	ldr	r0, [pc, #408]	@ (8001064 <main+0x1f4>)
 8000eca:	f000 fe02 	bl	8001ad2 <Alcd_PutAt_n>
    Alcd_PutAt(&lcd, 1, 0, "is 90 and -90");
 8000ece:	4868      	ldr	r0, [pc, #416]	@ (8001070 <main+0x200>)
 8000ed0:	f000 fe6c 	bl	8001bac <Str_Len>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4b65      	ldr	r3, [pc, #404]	@ (8001070 <main+0x200>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4860      	ldr	r0, [pc, #384]	@ (8001064 <main+0x1f4>)
 8000ee2:	f000 fdf6 	bl	8001ad2 <Alcd_PutAt_n>
    HAL_Delay(2000);
 8000ee6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eea:	f000 fed7 	bl	8001c9c <HAL_Delay>
    Alcd_Clear(&lcd);
 8000eee:	485d      	ldr	r0, [pc, #372]	@ (8001064 <main+0x1f4>)
 8000ef0:	f000 fe08 	bl	8001b04 <Alcd_Clear>

    // Start ADC
    HAL_ADC_Start(&hadc1);
 8000ef4:	485f      	ldr	r0, [pc, #380]	@ (8001074 <main+0x204>)
 8000ef6:	f000 ffcd 	bl	8001e94 <HAL_ADC_Start>

    // Wait for ADC conversion to complete
    HAL_ADC_PollForConversion(&hadc1, 100);
 8000efa:	2164      	movs	r1, #100	@ 0x64
 8000efc:	485d      	ldr	r0, [pc, #372]	@ (8001074 <main+0x204>)
 8000efe:	f001 f877 	bl	8001ff0 <HAL_ADC_PollForConversion>
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        // Clear the LCD
        Alcd_Clear(&lcd);
 8000f02:	4858      	ldr	r0, [pc, #352]	@ (8001064 <main+0x1f4>)
 8000f04:	f000 fdfe 	bl	8001b04 <Alcd_Clear>

        // Get ADC value
        adc_voltage = HAL_ADC_GetValue(&hadc1);
 8000f08:	485a      	ldr	r0, [pc, #360]	@ (8001074 <main+0x204>)
 8000f0a:	f001 f977 	bl	80021fc <HAL_ADC_GetValue>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	837b      	strh	r3, [r7, #26]

        // Display ADC value on the LCD
        message = sprintf(str, "signal = %d", adc_voltage);
 8000f12:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	4957      	ldr	r1, [pc, #348]	@ (8001078 <main+0x208>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fe86 	bl	8004c2c <siprintf>
 8000f20:	4603      	mov	r3, r0
 8000f22:	833b      	strh	r3, [r7, #24]
        Alcd_PutAt_n(&lcd, 0, 0, str, message);
 8000f24:	8b3b      	ldrh	r3, [r7, #24]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	1d3a      	adds	r2, r7, #4
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	484c      	ldr	r0, [pc, #304]	@ (8001064 <main+0x1f4>)
 8000f34:	f000 fdcd 	bl	8001ad2 <Alcd_PutAt_n>

        // Convert the input ADC value to an angle
        angle = ((float) adc_voltage * 0.044776) - 90;
 8000f38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fead 	bl	8000c9c <__aeabi_i2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6f 	bl	8000428 <__aeabi_f2d>
 8000f4a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001048 <main+0x1d8>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fac2 	bl	80004d8 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b46      	ldr	r3, [pc, #280]	@ (800107c <main+0x20c>)
 8000f62:	f7ff f901 	bl	8000168 <__aeabi_dsub>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fd8b 	bl	8000a88 <__aeabi_d2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	61fb      	str	r3, [r7, #28]

        // Limit the angle to the maximum allowed value
        if (angle > MAX_ANGLE) {
 8000f76:	4942      	ldr	r1, [pc, #264]	@ (8001080 <main+0x210>)
 8000f78:	69f8      	ldr	r0, [r7, #28]
 8000f7a:	f7ff ff4f 	bl	8000e1c <__aeabi_fcmpgt>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <main+0x118>
            angle = MAX_ANGLE;
 8000f84:	4b3e      	ldr	r3, [pc, #248]	@ (8001080 <main+0x210>)
 8000f86:	61fb      	str	r3, [r7, #28]
        }

        // Limit the angle to the minimum allowed value
        if (angle < MIN_ANGLE) {
 8000f88:	493e      	ldr	r1, [pc, #248]	@ (8001084 <main+0x214>)
 8000f8a:	69f8      	ldr	r0, [r7, #28]
 8000f8c:	f7ff ff28 	bl	8000de0 <__aeabi_fcmplt>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <main+0x12a>
            angle = MIN_ANGLE;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	@ (8001084 <main+0x214>)
 8000f98:	61fb      	str	r3, [r7, #28]
        }

        // Display the current angle on the LCD
        message = sprintf(str, "angle = %.2f", angle);
 8000f9a:	69f8      	ldr	r0, [r7, #28]
 8000f9c:	f7ff fa44 	bl	8000428 <__aeabi_f2d>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	1d38      	adds	r0, r7, #4
 8000fa6:	4938      	ldr	r1, [pc, #224]	@ (8001088 <main+0x218>)
 8000fa8:	f003 fe40 	bl	8004c2c <siprintf>
 8000fac:	4603      	mov	r3, r0
 8000fae:	833b      	strh	r3, [r7, #24]
        Alcd_PutAt_n(&lcd, 1, 0, str, message);
 8000fb0:	8b3b      	ldrh	r3, [r7, #24]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	1d3a      	adds	r2, r7, #4
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4829      	ldr	r0, [pc, #164]	@ (8001064 <main+0x1f4>)
 8000fc0:	f000 fd87 	bl	8001ad2 <Alcd_PutAt_n>

        // Calculate the PWM duty cycle based on the angle
        pwm_cycle = (5.5555 * angle) + 1499;
 8000fc4:	69f8      	ldr	r0, [r7, #28]
 8000fc6:	f7ff fa2f 	bl	8000428 <__aeabi_f2d>
 8000fca:	a321      	add	r3, pc, #132	@ (adr r3, 8001050 <main+0x1e0>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fa82 	bl	80004d8 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a31e      	add	r3, pc, #120	@ (adr r3, 8001058 <main+0x1e8>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff f8c3 	bl	800016c <__adddf3>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd4b 	bl	8000a88 <__aeabi_d2f>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	617b      	str	r3, [r7, #20]

        // Ensure the PWM duty cycle is within the allowed range
        if ((MIN_PWM < pwm_cycle) & (pwm_cycle < MAX_PWM)) {
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	461c      	mov	r4, r3
 8000ffa:	4924      	ldr	r1, [pc, #144]	@ (800108c <main+0x21c>)
 8000ffc:	6978      	ldr	r0, [r7, #20]
 8000ffe:	f7ff ff0d 	bl	8000e1c <__aeabi_fcmpgt>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <main+0x19c>
 8001008:	2300      	movs	r3, #0
 800100a:	461c      	mov	r4, r3
 800100c:	b2e4      	uxtb	r4, r4
 800100e:	2301      	movs	r3, #1
 8001010:	461d      	mov	r5, r3
 8001012:	491f      	ldr	r1, [pc, #124]	@ (8001090 <main+0x220>)
 8001014:	6978      	ldr	r0, [r7, #20]
 8001016:	f7ff fee3 	bl	8000de0 <__aeabi_fcmplt>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <main+0x1b4>
 8001020:	2300      	movs	r3, #0
 8001022:	461d      	mov	r5, r3
 8001024:	b2eb      	uxtb	r3, r5
 8001026:	4023      	ands	r3, r4
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <main+0x1ca>
            // Update the PWM duty cycle
            TIM1->CCR1 = pwm_cycle;
 800102e:	4c0e      	ldr	r4, [pc, #56]	@ (8001068 <main+0x1f8>)
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f7ff fefd 	bl	8000e30 <__aeabi_f2uiz>
 8001036:	4603      	mov	r3, r0
 8001038:	6363      	str	r3, [r4, #52]	@ 0x34
        }

        // Delay for a short period
        HAL_Delay(500);
 800103a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800103e:	f000 fe2d 	bl	8001c9c <HAL_Delay>
    while (1) {
 8001042:	e75e      	b.n	8000f02 <main+0x92>
 8001044:	f3af 8000 	nop.w
 8001048:	3f4a98ab 	.word	0x3f4a98ab
 800104c:	3fa6ece1 	.word	0x3fa6ece1
 8001050:	fdf3b646 	.word	0xfdf3b646
 8001054:	401638d4 	.word	0x401638d4
 8001058:	00000000 	.word	0x00000000
 800105c:	40976c00 	.word	0x40976c00
 8001060:	20000240 	.word	0x20000240
 8001064:	20000000 	.word	0x20000000
 8001068:	40012c00 	.word	0x40012c00
 800106c:	08006eb0 	.word	0x08006eb0
 8001070:	08006ec0 	.word	0x08006ec0
 8001074:	20000210 	.word	0x20000210
 8001078:	08006ed0 	.word	0x08006ed0
 800107c:	40568000 	.word	0x40568000
 8001080:	42b40000 	.word	0x42b40000
 8001084:	c2b40000 	.word	0xc2b40000
 8001088:	08006edc 	.word	0x08006edc
 800108c:	44798000 	.word	0x44798000
 8001090:	44fa0000 	.word	0x44fa0000

08001094 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	@ 0x50
 8001098:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800109a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109e:	2228      	movs	r2, #40	@ 0x28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fe25 	bl	8004cf2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010de:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fca6 	bl	8002a3c <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x66>
        Error_Handler();
 80010f6:	f000 f937 	bl	8001368 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	617b      	str	r3, [r7, #20]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800110a:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f001 ff12 	bl	8002f40 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x92>
        Error_Handler();
 8001122:	f000 f921 	bl	8001368 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001126:	2302      	movs	r3, #2
 8001128:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800112a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800112e:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f87e 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xae>
        Error_Handler();
 800113e:	f000 f913 	bl	8001368 <Error_Handler>
    }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	@ 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <MX_ADC1_Init+0x74>)
 800115e:	4a19      	ldr	r2, [pc, #100]	@ (80011c4 <MX_ADC1_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <MX_ADC1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001168:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <MX_ADC1_Init+0x74>)
 800116a:	2201      	movs	r2, #1
 800116c:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <MX_ADC1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_ADC1_Init+0x74>)
 8001176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800117a:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <MX_ADC1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_ADC1_Init+0x74>)
 8001184:	2201      	movs	r2, #1
 8001186:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <MX_ADC1_Init+0x74>)
 800118a:	f000 fdab 	bl	8001ce4 <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0x4c>
        Error_Handler();
 8001194:	f000 f8e8 	bl	8001368 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_9;
 8001198:	2309      	movs	r3, #9
 800119a:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <MX_ADC1_Init+0x74>)
 80011aa:	f001 f833 	bl	8002214 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ADC1_Init+0x6c>
        Error_Handler();
 80011b4:	f000 f8d8 	bl	8001368 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000210 	.word	0x20000210
 80011c4:	40012400 	.word	0x40012400

080011c8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b096      	sub	sp, #88	@ 0x58
 80011cc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2220      	movs	r2, #32
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fd76 	bl	8004cf2 <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001206:	4b3f      	ldr	r3, [pc, #252]	@ (8001304 <MX_TIM1_Init+0x13c>)
 8001208:	4a3f      	ldr	r2, [pc, #252]	@ (8001308 <MX_TIM1_Init+0x140>)
 800120a:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 71;
 800120c:	4b3d      	ldr	r3, [pc, #244]	@ (8001304 <MX_TIM1_Init+0x13c>)
 800120e:	2247      	movs	r2, #71	@ 0x47
 8001210:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b3c      	ldr	r3, [pc, #240]	@ (8001304 <MX_TIM1_Init+0x13c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 19999;
 8001218:	4b3a      	ldr	r3, [pc, #232]	@ (8001304 <MX_TIM1_Init+0x13c>)
 800121a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800121e:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	4b38      	ldr	r3, [pc, #224]	@ (8001304 <MX_TIM1_Init+0x13c>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001226:	4b37      	ldr	r3, [pc, #220]	@ (8001304 <MX_TIM1_Init+0x13c>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b35      	ldr	r3, [pc, #212]	@ (8001304 <MX_TIM1_Init+0x13c>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001232:	4834      	ldr	r0, [pc, #208]	@ (8001304 <MX_TIM1_Init+0x13c>)
 8001234:	f002 f96a 	bl	800350c <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x7a>
        Error_Handler();
 800123e:	f000 f893 	bl	8001368 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001246:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001248:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800124c:	4619      	mov	r1, r3
 800124e:	482d      	ldr	r0, [pc, #180]	@ (8001304 <MX_TIM1_Init+0x13c>)
 8001250:	f002 fbb2 	bl	80039b8 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x96>
        Error_Handler();
 800125a:	f000 f885 	bl	8001368 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800125e:	4829      	ldr	r0, [pc, #164]	@ (8001304 <MX_TIM1_Init+0x13c>)
 8001260:	f002 f9ee 	bl	8003640 <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xa6>
        Error_Handler();
 800126a:	f000 f87d 	bl	8001368 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	643b      	str	r3, [r7, #64]	@ 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001276:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800127a:	4619      	mov	r1, r3
 800127c:	4821      	ldr	r0, [pc, #132]	@ (8001304 <MX_TIM1_Init+0x13c>)
 800127e:	f002 ff07 	bl	8004090 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0xc4>
            != HAL_OK) {
        Error_Handler();
 8001288:	f000 f86e 	bl	8001368 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128c:	2360      	movs	r3, #96	@ 0x60
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.Pulse = 1000;
 8001290:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80012aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	4814      	ldr	r0, [pc, #80]	@ (8001304 <MX_TIM1_Init+0x13c>)
 80012b4:	f002 fabe 	bl	8003834 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xfa>
            != HAL_OK) {
        Error_Handler();
 80012be:	f000 f853 	bl	8001368 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012da:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <MX_TIM1_Init+0x13c>)
 80012e6:	f002 ff31 	bl	800414c <HAL_TIMEx_ConfigBreakDeadTime>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x12c>
            != HAL_OK) {
        Error_Handler();
 80012f0:	f000 f83a 	bl	8001368 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 80012f4:	4803      	ldr	r0, [pc, #12]	@ (8001304 <MX_TIM1_Init+0x13c>)
 80012f6:	f000 f8c9 	bl	800148c <HAL_TIM_MspPostInit>

}
 80012fa:	bf00      	nop
 80012fc:	3758      	adds	r7, #88	@ 0x58
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000240 	.word	0x20000240
 8001308:	40012c00 	.word	0x40012c00

0800130c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001318:	f043 0320 	orr.w	r3, r3, #32
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0320 	and.w	r3, r3, #32
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <MX_GPIO_Init+0x58>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a0d      	ldr	r2, [pc, #52]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <MX_GPIO_Init+0x58>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000

08001368 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq(); // Disable interrupts
    while (1) {
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <Error_Handler+0x8>

08001374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	4a14      	ldr	r2, [pc, #80]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6193      	str	r3, [r2, #24]
 8001386:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <HAL_MspInit+0x5c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <HAL_MspInit+0x5c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_MspInit+0x60>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	4a04      	ldr	r2, [pc, #16]	@ (80013d4 <HAL_MspInit+0x60>)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000

080013d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <HAL_ADC_MspInit+0x6c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d121      	bne.n	800143c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <HAL_ADC_MspInit+0x70>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_ADC_MspInit+0x70>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_ADC_MspInit+0x70>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_ADC_MspInit+0x70>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <HAL_ADC_MspInit+0x70>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_ADC_MspInit+0x70>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001428:	2302      	movs	r3, #2
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142c:	2303      	movs	r3, #3
 800142e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <HAL_ADC_MspInit+0x74>)
 8001438:	f001 f964 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40012400 	.word	0x40012400
 8001448:	40021000 	.word	0x40021000
 800144c:	40010c00 	.word	0x40010c00

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <HAL_TIM_Base_MspInit+0x34>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10b      	bne.n	800147a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_TIM_Base_MspInit+0x38>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <HAL_TIM_Base_MspInit+0x38>)
 8001468:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <HAL_TIM_Base_MspInit+0x38>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40012c00 	.word	0x40012c00
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <HAL_TIM_MspPostInit+0x5c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d118      	bne.n	80014de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_TIM_MspPostInit+0x60>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	@ (80014ec <HAL_TIM_MspPostInit+0x60>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_TIM_MspPostInit+0x60>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <HAL_TIM_MspPostInit+0x64>)
 80014da:	f001 f913 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <NMI_Handler+0x4>

080014fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <MemManage_Handler+0x4>

0800150c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <UsageFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 fb8e 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <_kill>:

int _kill(int pid, int sig)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001564:	f003 fc18 	bl	8004d98 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	2216      	movs	r2, #22
 800156c:	601a      	str	r2, [r3, #0]
  return -1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_exit>:

void _exit (int status)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001582:	f04f 31ff 	mov.w	r1, #4294967295
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffe7 	bl	800155a <_kill>
  while (1) {}    /* Make sure we hang here */
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <_exit+0x12>

08001590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00a      	b.n	80015b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015a2:	f3af 8000 	nop.w
 80015a6:	4601      	mov	r1, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf0      	blt.n	80015a2 <_read+0x12>
  }

  return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e009      	b.n	80015f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf1      	blt.n	80015dc <_write+0x12>
  }
  return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001628:	605a      	str	r2, [r3, #4]
  return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <_isatty>:

int _isatty(int file)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
	...

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	@ (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f003 fb80 	bl	8004d98 <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20005000 	.word	0x20005000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	20000288 	.word	0x20000288
 80016cc:	200003e0 	.word	0x200003e0

080016d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016dc:	f7ff fff8 	bl	80016d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e0:	480b      	ldr	r0, [pc, #44]	@ (8001710 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016e2:	490c      	ldr	r1, [pc, #48]	@ (8001714 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001718 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e8:	e002      	b.n	80016f0 <LoopCopyDataInit>

080016ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ee:	3304      	adds	r3, #4

080016f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f4:	d3f9      	bcc.n	80016ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f8:	4c09      	ldr	r4, [pc, #36]	@ (8001720 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016fc:	e001      	b.n	8001702 <LoopFillZerobss>

080016fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001700:	3204      	adds	r2, #4

08001702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001704:	d3fb      	bcc.n	80016fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001706:	f003 fb4d 	bl	8004da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170a:	f7ff fbb1 	bl	8000e70 <main>
  bx lr
 800170e:	4770      	bx	lr
  ldr r0, =_sdata
 8001710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001714:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001718:	080072a8 	.word	0x080072a8
  ldr r2, =_sbss
 800171c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001720:	200003dc 	.word	0x200003dc

08001724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC1_2_IRQHandler>
	...

08001728 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <DWT_Delay_Init+0x58>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a13      	ldr	r2, [pc, #76]	@ (8001780 <DWT_Delay_Init+0x58>)
 8001732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001736:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <DWT_Delay_Init+0x58>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4a10      	ldr	r2, [pc, #64]	@ (8001780 <DWT_Delay_Init+0x58>)
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001742:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <DWT_Delay_Init+0x5c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0e      	ldr	r2, [pc, #56]	@ (8001784 <DWT_Delay_Init+0x5c>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <DWT_Delay_Init+0x5c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <DWT_Delay_Init+0x5c>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <DWT_Delay_Init+0x5c>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001762:	bf00      	nop
     __ASM volatile ("NOP");
 8001764:	bf00      	nop
  __ASM volatile ("NOP");
 8001766:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <DWT_Delay_Init+0x5c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001774:	2301      	movs	r3, #1
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000edf0 	.word	0xe000edf0
 8001784:	e0001000 	.word	0xe0001000

08001788 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8001790:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <DWT_Delay_us+0x40>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001796:	f001 fd11 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 800179a:	4603      	mov	r3, r0
 800179c:	4a0b      	ldr	r2, [pc, #44]	@ (80017cc <DWT_Delay_us+0x44>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0c9b      	lsrs	r3, r3, #18
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80017ac:	bf00      	nop
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <DWT_Delay_us+0x40>)
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad2      	subs	r2, r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3f8      	bcc.n	80017ae <DWT_Delay_us+0x26>
		;
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e0001000 	.word	0xe0001000
 80017cc:	431bde83 	.word	0x431bde83

080017d0 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ffd3 	bl	8001788 <DWT_Delay_us>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7a1b      	ldrb	r3, [r3, #8]
 8001800:	4619      	mov	r1, r3
 8001802:	230f      	movs	r3, #15
 8001804:	408b      	lsls	r3, r1
 8001806:	43db      	mvns	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	400a      	ands	r2, r1
 8001810:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	7a09      	ldrb	r1, [r1, #8]
 800181e:	408b      	lsls	r3, r1
 8001820:	4619      	mov	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	430a      	orrs	r2, r1
 8001828:	60da      	str	r2, [r3, #12]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6958      	ldr	r0, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8b1b      	ldrh	r3, [r3, #24]
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	4619      	mov	r1, r3
 800184c:	f001 f8de 	bl	8002a0c <HAL_GPIO_WritePin>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68d8      	ldr	r0, [r3, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	8a1b      	ldrh	r3, [r3, #16]
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	4619      	mov	r1, r3
 8001870:	f001 f8cc 	bl	8002a0c <HAL_GPIO_WritePin>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	8b1b      	ldrh	r3, [r3, #24]
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	2301      	movs	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	2302      	movs	r3, #2
 800189e:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f107 0208 	add.w	r2, r7, #8
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 ff2a 	bl	8002704 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	8a1b      	ldrh	r3, [r3, #16]
 80018b4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f107 0208 	add.w	r2, r7, #8
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 ff1f 	bl	8002704 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7a1b      	ldrb	r3, [r3, #8]
 80018ca:	461a      	mov	r2, r3
 80018cc:	230f      	movs	r3, #15
 80018ce:	4093      	lsls	r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f107 0208 	add.w	r2, r7, #8
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 ff11 	bl	8002704 <HAL_GPIO_Init>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	70fb      	strb	r3, [r7, #3]
 80018f6:	4613      	mov	r3, r2
 80018f8:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff98 	bl	8001834 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8001904:	78bb      	ldrb	r3, [r7, #2]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff6c 	bl	80017ea <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8001912:	2101      	movs	r1, #1
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff9f 	bl	8001858 <EN_SET>
 800191a:	200a      	movs	r0, #10
 800191c:	f7ff ff58 	bl	80017d0 <usDelay>
 8001920:	2100      	movs	r1, #0
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff98 	bl	8001858 <EN_SET>
 8001928:	2064      	movs	r0, #100	@ 0x64
 800192a:	f7ff ff51 	bl	80017d0 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800192e:	78bb      	ldrb	r3, [r7, #2]
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ff59 	bl	80017ea <Write_HalfByte>
	PulseEn
 8001938:	2101      	movs	r1, #1
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff8c 	bl	8001858 <EN_SET>
 8001940:	200a      	movs	r0, #10
 8001942:	f7ff ff45 	bl	80017d0 <usDelay>
 8001946:	2100      	movs	r1, #0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff85 	bl	8001858 <EN_SET>
 800194e:	2064      	movs	r0, #100	@ 0x64
 8001950:	f7ff ff3e 	bl	80017d0 <usDelay>
	;
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
 8001968:	4613      	mov	r3, r2
 800196a:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 800196c:	f7ff fedc 	bl	8001728 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff83 	bl	800187c <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2240      	movs	r2, #64	@ 0x40
 8001980:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	78ba      	ldrb	r2, [r7, #2]
 8001986:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8001988:	78bb      	ldrb	r3, [r7, #2]
 800198a:	3340      	adds	r3, #64	@ 0x40
 800198c:	b2da      	uxtb	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8001992:	2100      	movs	r1, #0
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff4d 	bl	8001834 <RS_SET>
	EN_SET(lcd, 0);
 800199a:	2100      	movs	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff5b 	bl	8001858 <EN_SET>
	usDelay(50000);
 80019a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019a6:	f7ff ff13 	bl	80017d0 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e018      	b.n	80019e2 <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 80019b0:	2103      	movs	r1, #3
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ff19 	bl	80017ea <Write_HalfByte>
		PulseEn
 80019b8:	2101      	movs	r1, #1
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff4c 	bl	8001858 <EN_SET>
 80019c0:	200a      	movs	r0, #10
 80019c2:	f7ff ff05 	bl	80017d0 <usDelay>
 80019c6:	2100      	movs	r1, #0
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff45 	bl	8001858 <EN_SET>
 80019ce:	2064      	movs	r0, #100	@ 0x64
 80019d0:	f7ff fefe 	bl	80017d0 <usDelay>
		;
		usDelay(4500);
 80019d4:	f241 1094 	movw	r0, #4500	@ 0x1194
 80019d8:	f7ff fefa 	bl	80017d0 <usDelay>
	for (x = 0; x < 2; x++) {
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	3301      	adds	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d9e3      	bls.n	80019b0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80019e8:	2103      	movs	r1, #3
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fefd 	bl	80017ea <Write_HalfByte>
	PulseEn
 80019f0:	2101      	movs	r1, #1
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff30 	bl	8001858 <EN_SET>
 80019f8:	200a      	movs	r0, #10
 80019fa:	f7ff fee9 	bl	80017d0 <usDelay>
 80019fe:	2100      	movs	r1, #0
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <EN_SET>
 8001a06:	2064      	movs	r0, #100	@ 0x64
 8001a08:	f7ff fee2 	bl	80017d0 <usDelay>
	;
	usDelay(150);
 8001a0c:	2096      	movs	r0, #150	@ 0x96
 8001a0e:	f7ff fedf 	bl	80017d0 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8001a12:	2102      	movs	r1, #2
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fee8 	bl	80017ea <Write_HalfByte>
	PulseEn
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff1b 	bl	8001858 <EN_SET>
 8001a22:	200a      	movs	r0, #10
 8001a24:	f7ff fed4 	bl	80017d0 <usDelay>
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff14 	bl	8001858 <EN_SET>
 8001a30:	2064      	movs	r0, #100	@ 0x64
 8001a32:	f7ff fecd 	bl	80017d0 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8001a36:	2228      	movs	r2, #40	@ 0x28
 8001a38:	2100      	movs	r1, #0
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff55 	bl	80018ea <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8001a40:	2300      	movs	r3, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	2101      	movs	r1, #1
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f86d 	bl	8001b26 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f859 	bl	8001b04 <Alcd_Clear>
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70fb      	strb	r3, [r7, #3]
 8001a66:	4613      	mov	r3, r2
 8001a68:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	7e9a      	ldrb	r2, [r3, #26]
 8001a72:	78bb      	ldrb	r3, [r7, #2]
 8001a74:	4413      	add	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	2100      	movs	r1, #0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff2f 	bl	80018ea <Alcd_SendByte>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
 8001aa6:	e00b      	b.n	8001ac0 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff ff18 	bl	80018ea <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	3301      	adds	r3, #1
 8001abe:	75fb      	strb	r3, [r7, #23]
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3ef      	bcc.n	8001aa8 <Alcd_Put_n+0x14>
	}
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	72fb      	strb	r3, [r7, #11]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8001ae4:	7aba      	ldrb	r2, [r7, #10]
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff ffb5 	bl	8001a5a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8001af0:	7e3b      	ldrb	r3, [r7, #24]
 8001af2:	461a      	mov	r2, r3
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff ffcc 	bl	8001a94 <Alcd_Put_n>
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2100      	movs	r1, #0
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff feea 	bl	80018ea <Alcd_SendByte>
	usDelay(2000);
 8001b16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b1a:	f7ff fe59 	bl	80017d0 <usDelay>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	4608      	mov	r0, r1
 8001b30:	4611      	mov	r1, r2
 8001b32:	461a      	mov	r2, r3
 8001b34:	4603      	mov	r3, r0
 8001b36:	70fb      	strb	r3, [r7, #3]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70bb      	strb	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7f9b      	ldrb	r3, [r3, #30]
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 8001b5a:	78bb      	ldrb	r3, [r7, #2]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7f9b      	ldrb	r3, [r3, #30]
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 8001b6e:	787b      	ldrb	r3, [r7, #1]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7f9b      	ldrb	r3, [r3, #30]
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7f9b      	ldrb	r3, [r3, #30]
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7f9b      	ldrb	r3, [r3, #30]
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff fea3 	bl	80018ea <Alcd_SendByte>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <Str_Len>:

void Alcd_PutChar(Alcd_t *lcd, char chr) {
	SendByte(1, chr);
}

int Str_Len(char *string) {
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	int len = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8001bb8:	e002      	b.n	8001bc0 <Str_Len+0x14>
		len++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
	while (*(string++)) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1f6      	bne.n	8001bba <Str_Len+0xe>
	}
	return len;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_Init+0x28>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_Init+0x28>)
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 fd57 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fbbe 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40022000 	.word	0x40022000

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fd61 	bl	80026ea <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 fd37 	bl	80026b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000020 	.word	0x20000020
 8001c5c:	20000028 	.word	0x20000028
 8001c60:	20000024 	.word	0x20000024

08001c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_IncTick+0x1c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a03      	ldr	r2, [pc, #12]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000028 	.word	0x20000028
 8001c84:	2000028c 	.word	0x2000028c

08001c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	@ (8001c98 <HAL_GetTick+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	2000028c 	.word	0x2000028c

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_Delay+0x44>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffe0 	bl	8001c88 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000028 	.word	0x20000028

08001ce4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0be      	b.n	8001e84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fb58 	bl	80013d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fbc5 	bl	80024b8 <ADC_ConversionStop_Disable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 8099 	bne.w	8001e72 <HAL_ADC_Init+0x18e>
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8095 	bne.w	8001e72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d50:	f023 0302 	bic.w	r3, r3, #2
 8001d54:	f043 0202 	orr.w	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7b1b      	ldrb	r3, [r3, #12]
 8001d6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d7c:	d003      	beq.n	8001d86 <HAL_ADC_Init+0xa2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d102      	bne.n	8001d8c <HAL_ADC_Init+0xa8>
 8001d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d8a:	e000      	b.n	8001d8e <HAL_ADC_Init+0xaa>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7d1b      	ldrb	r3, [r3, #20]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d119      	bne.n	8001dd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7b1b      	ldrb	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	035a      	lsls	r2, r3, #13
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	e00b      	b.n	8001dd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4b28      	ldr	r3, [pc, #160]	@ (8001e8c <HAL_ADC_Init+0x1a8>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e00:	d003      	beq.n	8001e0a <HAL_ADC_Init+0x126>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d104      	bne.n	8001e14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	051b      	lsls	r3, r3, #20
 8001e12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_ADC_Init+0x1ac>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d10b      	bne.n	8001e50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e4e:	e018      	b.n	8001e82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	f023 0312 	bic.w	r3, r3, #18
 8001e58:	f043 0210 	orr.w	r2, r3, #16
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e70:	e007      	b.n	8001e82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e90:	ff1f0efe 	.word	0xff1f0efe

08001e94 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Start+0x1a>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e098      	b.n	8001fe0 <HAL_ADC_Start+0x14c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 faa4 	bl	8002404 <ADC_Enable>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 8087 	bne.w	8001fd6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a41      	ldr	r2, [pc, #260]	@ (8001fe8 <HAL_ADC_Start+0x154>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_Start+0x5e>
 8001ee6:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <HAL_ADC_Start+0x158>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d115      	bne.n	8001f1e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d026      	beq.n	8001f5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f1c:	e01d      	b.n	8001f5a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001fec <HAL_ADC_Start+0x158>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_ADC_Start+0xaa>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe8 <HAL_ADC_Start+0x154>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_ADC_Start+0xc6>
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <HAL_ADC_Start+0x158>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	f023 0206 	bic.w	r2, r3, #6
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f72:	e002      	b.n	8001f7a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0202 	mvn.w	r2, #2
 8001f8a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f96:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f9a:	d113      	bne.n	8001fc4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fa0:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <HAL_ADC_Start+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <HAL_ADC_Start+0x158>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d108      	bne.n	8001fc4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	e00c      	b.n	8001fde <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40012800 	.word	0x40012800
 8001fec:	40012400 	.word	0x40012400

08001ff0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002006:	f7ff fe3f 	bl	8001c88 <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	f043 0220 	orr.w	r2, r3, #32
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e0d3      	b.n	80021da <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d131      	bne.n	80020a4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d12a      	bne.n	80020a4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800204e:	e021      	b.n	8002094 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d01d      	beq.n	8002094 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_ADC_PollForConversion+0x7e>
 800205e:	f7ff fe13 	bl	8001c88 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d212      	bcs.n	8002094 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	f043 0204 	orr.w	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0a2      	b.n	80021da <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0d6      	beq.n	8002050 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020a2:	e070      	b.n	8002186 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020a4:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <HAL_ADC_PollForConversion+0x1f4>)
 80020a6:	681c      	ldr	r4, [r3, #0]
 80020a8:	2002      	movs	r0, #2
 80020aa:	f001 f979 	bl	80033a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80020ae:	4603      	mov	r3, r0
 80020b0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6919      	ldr	r1, [r3, #16]
 80020ba:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_ADC_PollForConversion+0x1f8>)
 80020bc:	400b      	ands	r3, r1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_ADC_PollForConversion+0x104>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68d9      	ldr	r1, [r3, #12]
 80020c8:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <HAL_ADC_PollForConversion+0x1fc>)
 80020ca:	400b      	ands	r3, r1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_ADC_PollForConversion+0x104>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6919      	ldr	r1, [r3, #16]
 80020d6:	4b46      	ldr	r3, [pc, #280]	@ (80021f0 <HAL_ADC_PollForConversion+0x200>)
 80020d8:	400b      	ands	r3, r1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d108      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x100>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68d9      	ldr	r1, [r3, #12]
 80020e4:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <HAL_ADC_PollForConversion+0x204>)
 80020e6:	400b      	ands	r3, r1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_PollForConversion+0x100>
 80020ec:	2314      	movs	r3, #20
 80020ee:	e020      	b.n	8002132 <HAL_ADC_PollForConversion+0x142>
 80020f0:	2329      	movs	r3, #41	@ 0x29
 80020f2:	e01e      	b.n	8002132 <HAL_ADC_PollForConversion+0x142>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6919      	ldr	r1, [r3, #16]
 80020fa:	4b3d      	ldr	r3, [pc, #244]	@ (80021f0 <HAL_ADC_PollForConversion+0x200>)
 80020fc:	400b      	ands	r3, r1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_ADC_PollForConversion+0x120>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68d9      	ldr	r1, [r3, #12]
 8002108:	4b3a      	ldr	r3, [pc, #232]	@ (80021f4 <HAL_ADC_PollForConversion+0x204>)
 800210a:	400b      	ands	r3, r1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <HAL_ADC_PollForConversion+0x13c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6919      	ldr	r1, [r3, #16]
 8002116:	4b38      	ldr	r3, [pc, #224]	@ (80021f8 <HAL_ADC_PollForConversion+0x208>)
 8002118:	400b      	ands	r3, r1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_ADC_PollForConversion+0x140>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68d9      	ldr	r1, [r3, #12]
 8002124:	4b34      	ldr	r3, [pc, #208]	@ (80021f8 <HAL_ADC_PollForConversion+0x208>)
 8002126:	400b      	ands	r3, r1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_PollForConversion+0x140>
 800212c:	2354      	movs	r3, #84	@ 0x54
 800212e:	e000      	b.n	8002132 <HAL_ADC_PollForConversion+0x142>
 8002130:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002138:	e021      	b.n	800217e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d01a      	beq.n	8002178 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_ADC_PollForConversion+0x168>
 8002148:	f7ff fd9e 	bl	8001c88 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d20f      	bcs.n	8002178 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d90b      	bls.n	8002178 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	f043 0204 	orr.w	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e030      	b.n	80021da <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	429a      	cmp	r2, r3
 8002184:	d8d9      	bhi.n	800213a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f06f 0212 	mvn.w	r2, #18
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002194:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021aa:	d115      	bne.n	80021d8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d111      	bne.n	80021d8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000020 	.word	0x20000020
 80021e8:	24924924 	.word	0x24924924
 80021ec:	00924924 	.word	0x00924924
 80021f0:	12492492 	.word	0x12492492
 80021f4:	00492492 	.word	0x00492492
 80021f8:	00249249 	.word	0x00249249

080021fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x20>
 8002230:	2302      	movs	r3, #2
 8002232:	e0dc      	b.n	80023ee <HAL_ADC_ConfigChannel+0x1da>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d81c      	bhi.n	800227e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b05      	subs	r3, #5
 8002256:	221f      	movs	r2, #31
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	4019      	ands	r1, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b05      	subs	r3, #5
 8002270:	fa00 f203 	lsl.w	r2, r0, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	@ 0x34
 800227c:	e03c      	b.n	80022f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d81c      	bhi.n	80022c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3b23      	subs	r3, #35	@ 0x23
 8002298:	221f      	movs	r2, #31
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	4019      	ands	r1, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3b23      	subs	r3, #35	@ 0x23
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80022be:	e01b      	b.n	80022f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b41      	subs	r3, #65	@ 0x41
 80022d2:	221f      	movs	r2, #31
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	4019      	ands	r1, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	3b41      	subs	r3, #65	@ 0x41
 80022ec:	fa00 f203 	lsl.w	r2, r0, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	d91c      	bls.n	800233a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68d9      	ldr	r1, [r3, #12]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	3b1e      	subs	r3, #30
 8002312:	2207      	movs	r2, #7
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	4019      	ands	r1, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6898      	ldr	r0, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	3b1e      	subs	r3, #30
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	e019      	b.n	800236e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6919      	ldr	r1, [r3, #16]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	2207      	movs	r2, #7
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	4019      	ands	r1, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6898      	ldr	r0, [r3, #8]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	fa00 f203 	lsl.w	r2, r0, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d003      	beq.n	800237e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800237a:	2b11      	cmp	r3, #17
 800237c:	d132      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d125      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d126      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80023a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d11a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ae:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <HAL_ADC_ConfigChannel+0x1e8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a13      	ldr	r2, [pc, #76]	@ (8002400 <HAL_ADC_ConfigChannel+0x1ec>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	0c9a      	lsrs	r2, r3, #18
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023c4:	e002      	b.n	80023cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x1b2>
 80023d2:	e007      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	f043 0220 	orr.w	r2, r3, #32
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	40012400 	.word	0x40012400
 80023fc:	20000020 	.word	0x20000020
 8002400:	431bde83 	.word	0x431bde83

08002404 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d040      	beq.n	80024a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002432:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <ADC_Enable+0xac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1f      	ldr	r2, [pc, #124]	@ (80024b4 <ADC_Enable+0xb0>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002440:	e002      	b.n	8002448 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3b01      	subs	r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f9      	bne.n	8002442 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800244e:	f7ff fc1b 	bl	8001c88 <HAL_GetTick>
 8002452:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002454:	e01f      	b.n	8002496 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002456:	f7ff fc17 	bl	8001c88 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d918      	bls.n	8002496 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d011      	beq.n	8002496 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e007      	b.n	80024a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d1d8      	bne.n	8002456 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000020 	.word	0x20000020
 80024b4:	431bde83 	.word	0x431bde83

080024b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12e      	bne.n	8002530 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024e2:	f7ff fbd1 	bl	8001c88 <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024e8:	e01b      	b.n	8002522 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024ea:	f7ff fbcd 	bl	8001c88 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d914      	bls.n	8002522 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b01      	cmp	r3, #1
 8002504:	d10d      	bne.n	8002522 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	f043 0210 	orr.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e007      	b.n	8002532 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d0dc      	beq.n	80024ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	@ (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	@ (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff90 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff49 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff5e 	bl	8002584 <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff90 	bl	80025f4 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5f 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffb0 	bl	8002658 <SysTick_Config>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b08b      	sub	sp, #44	@ 0x2c
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	e169      	b.n	80029ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002718:	2201      	movs	r2, #1
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8158 	bne.w	80029e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a9a      	ldr	r2, [pc, #616]	@ (80029a4 <HAL_GPIO_Init+0x2a0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d05e      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002740:	4a98      	ldr	r2, [pc, #608]	@ (80029a4 <HAL_GPIO_Init+0x2a0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d875      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002746:	4a98      	ldr	r2, [pc, #608]	@ (80029a8 <HAL_GPIO_Init+0x2a4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d058      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 800274c:	4a96      	ldr	r2, [pc, #600]	@ (80029a8 <HAL_GPIO_Init+0x2a4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d86f      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002752:	4a96      	ldr	r2, [pc, #600]	@ (80029ac <HAL_GPIO_Init+0x2a8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d052      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002758:	4a94      	ldr	r2, [pc, #592]	@ (80029ac <HAL_GPIO_Init+0x2a8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d869      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800275e:	4a94      	ldr	r2, [pc, #592]	@ (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04c      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002764:	4a92      	ldr	r2, [pc, #584]	@ (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d863      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800276a:	4a92      	ldr	r2, [pc, #584]	@ (80029b4 <HAL_GPIO_Init+0x2b0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d046      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002770:	4a90      	ldr	r2, [pc, #576]	@ (80029b4 <HAL_GPIO_Init+0x2b0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d85d      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002776:	2b12      	cmp	r3, #18
 8002778:	d82a      	bhi.n	80027d0 <HAL_GPIO_Init+0xcc>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d859      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800277e:	a201      	add	r2, pc, #4	@ (adr r2, 8002784 <HAL_GPIO_Init+0x80>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027eb 	.word	0x080027eb
 8002790:	0800282d 	.word	0x0800282d
 8002794:	08002833 	.word	0x08002833
 8002798:	08002833 	.word	0x08002833
 800279c:	08002833 	.word	0x08002833
 80027a0:	08002833 	.word	0x08002833
 80027a4:	08002833 	.word	0x08002833
 80027a8:	08002833 	.word	0x08002833
 80027ac:	08002833 	.word	0x08002833
 80027b0:	08002833 	.word	0x08002833
 80027b4:	08002833 	.word	0x08002833
 80027b8:	08002833 	.word	0x08002833
 80027bc:	08002833 	.word	0x08002833
 80027c0:	08002833 	.word	0x08002833
 80027c4:	08002833 	.word	0x08002833
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	4a79      	ldr	r2, [pc, #484]	@ (80029b8 <HAL_GPIO_Init+0x2b4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027d6:	e02c      	b.n	8002832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e029      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	3304      	adds	r3, #4
 80027e6:	623b      	str	r3, [r7, #32]
          break;
 80027e8:	e024      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	3308      	adds	r3, #8
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e01f      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	330c      	adds	r3, #12
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e01a      	b.n	8002834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002806:	2304      	movs	r3, #4
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e013      	b.n	8002834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002814:	2308      	movs	r3, #8
 8002816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	611a      	str	r2, [r3, #16]
          break;
 800281e:	e009      	b.n	8002834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002820:	2308      	movs	r3, #8
 8002822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	615a      	str	r2, [r3, #20]
          break;
 800282a:	e003      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x130>
          break;
 8002832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2bff      	cmp	r3, #255	@ 0xff
 8002838:	d801      	bhi.n	800283e <HAL_GPIO_Init+0x13a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_Init+0x13e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2bff      	cmp	r3, #255	@ 0xff
 8002848:	d802      	bhi.n	8002850 <HAL_GPIO_Init+0x14c>
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	e002      	b.n	8002856 <HAL_GPIO_Init+0x152>
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	3b08      	subs	r3, #8
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	210f      	movs	r1, #15
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80b1 	beq.w	80029e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002884:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <HAL_GPIO_Init+0x2b8>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a4c      	ldr	r2, [pc, #304]	@ (80029bc <HAL_GPIO_Init+0x2b8>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_GPIO_Init+0x2b8>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800289c:	4a48      	ldr	r2, [pc, #288]	@ (80029c0 <HAL_GPIO_Init+0x2bc>)
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a40      	ldr	r2, [pc, #256]	@ (80029c4 <HAL_GPIO_Init+0x2c0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_GPIO_Init+0x1ec>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3f      	ldr	r2, [pc, #252]	@ (80029c8 <HAL_GPIO_Init+0x2c4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00d      	beq.n	80028ec <HAL_GPIO_Init+0x1e8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	@ (80029cc <HAL_GPIO_Init+0x2c8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <HAL_GPIO_Init+0x1e4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3d      	ldr	r2, [pc, #244]	@ (80029d0 <HAL_GPIO_Init+0x2cc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_GPIO_Init+0x1e0>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e4:	2304      	movs	r3, #4
 80028e6:	e004      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028f0:	2300      	movs	r3, #0
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	4093      	lsls	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002902:	492f      	ldr	r1, [pc, #188]	@ (80029c0 <HAL_GPIO_Init+0x2bc>)
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800291c:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	492c      	ldr	r1, [pc, #176]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800292a:	4b2a      	ldr	r3, [pc, #168]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	43db      	mvns	r3, r3
 8002932:	4928      	ldr	r1, [pc, #160]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002934:	4013      	ands	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002944:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4922      	ldr	r1, [pc, #136]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	491e      	ldr	r1, [pc, #120]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800295c:	4013      	ands	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800296c:	4b19      	ldr	r3, [pc, #100]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4918      	ldr	r1, [pc, #96]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800297a:	4b16      	ldr	r3, [pc, #88]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4914      	ldr	r1, [pc, #80]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d021      	beq.n	80029d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	490e      	ldr	r1, [pc, #56]	@ (80029d4 <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e021      	b.n	80029e6 <HAL_GPIO_Init+0x2e2>
 80029a2:	bf00      	nop
 80029a4:	10320000 	.word	0x10320000
 80029a8:	10310000 	.word	0x10310000
 80029ac:	10220000 	.word	0x10220000
 80029b0:	10210000 	.word	0x10210000
 80029b4:	10120000 	.word	0x10120000
 80029b8:	10110000 	.word	0x10110000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40010800 	.word	0x40010800
 80029c8:	40010c00 	.word	0x40010c00
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_GPIO_Init+0x304>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	43db      	mvns	r3, r3
 80029e0:	4909      	ldr	r1, [pc, #36]	@ (8002a08 <HAL_GPIO_Init+0x304>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f ae8e 	bne.w	8002718 <HAL_GPIO_Init+0x14>
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	372c      	adds	r7, #44	@ 0x2c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	787b      	ldrb	r3, [r7, #1]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a28:	e003      	b.n	8002a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	041a      	lsls	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e272      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8087 	beq.w	8002b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5c:	4b92      	ldr	r3, [pc, #584]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d00c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a68:	4b8f      	ldr	r3, [pc, #572]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d112      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5e>
 8002a74:	4b8c      	ldr	r3, [pc, #560]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a80:	d10b      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a82:	4b89      	ldr	r3, [pc, #548]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d06c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x12c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d168      	bne.n	8002b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e24c      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x76>
 8002aa4:	4b80      	ldr	r3, [pc, #512]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e02e      	b.n	8002b10 <HAL_RCC_OscConfig+0xd4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x98>
 8002aba:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7a      	ldr	r2, [pc, #488]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b78      	ldr	r3, [pc, #480]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a77      	ldr	r2, [pc, #476]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xd4>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0xbc>
 8002ade:	4b72      	ldr	r3, [pc, #456]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a71      	ldr	r2, [pc, #452]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xd4>
 8002af8:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b68      	ldr	r3, [pc, #416]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a67      	ldr	r2, [pc, #412]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7ff f8b6 	bl	8001c88 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7ff f8b2 	bl	8001c88 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e200      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xe4>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7ff f8a2 	bl	8001c88 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7ff f89e 	bl	8001c88 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e1ec      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x10c>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b76:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b82:	4b49      	ldr	r3, [pc, #292]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x18c>
 8002b8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x176>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1c0      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4939      	ldr	r1, [pc, #228]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e03a      	b.n	8002c3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <HAL_RCC_OscConfig+0x270>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd6:	f7ff f857 	bl	8001c88 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7ff f853 	bl	8001c88 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1a1      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4927      	ldr	r1, [pc, #156]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b26      	ldr	r3, [pc, #152]	@ (8002cac <HAL_RCC_OscConfig+0x270>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff f836 	bl	8001c88 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c20:	f7ff f832 	bl	8001c88 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e180      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d03a      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d019      	beq.n	8002c86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c52:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <HAL_RCC_OscConfig+0x274>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7ff f816 	bl	8001c88 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7ff f812 	bl	8001c88 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e160      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f000 faba 	bl	80031f8 <RCC_Delay>
 8002c84:	e01c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_OscConfig+0x274>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fffc 	bl	8001c88 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c92:	e00f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe fff8 	bl	8001c88 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d908      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e146      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	42420000 	.word	0x42420000
 8002cb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb4:	4b92      	ldr	r3, [pc, #584]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e9      	bne.n	8002c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80a6 	beq.w	8002e1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	4b88      	ldr	r3, [pc, #544]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	4a87      	ldr	r2, [pc, #540]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	61d3      	str	r3, [r2, #28]
 8002cea:	4b85      	ldr	r3, [pc, #532]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b82      	ldr	r3, [pc, #520]	@ (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d118      	bne.n	8002d38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d06:	4b7f      	ldr	r3, [pc, #508]	@ (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d12:	f7fe ffb9 	bl	8001c88 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1a:	f7fe ffb5 	bl	8001c88 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b64      	cmp	r3, #100	@ 0x64
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e103      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	4b75      	ldr	r3, [pc, #468]	@ (8002f04 <HAL_RCC_OscConfig+0x4c8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x312>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a6e      	ldr	r2, [pc, #440]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	e02d      	b.n	8002daa <HAL_RCC_OscConfig+0x36e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x334>
 8002d56:	4b6a      	ldr	r3, [pc, #424]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	4a69      	ldr	r2, [pc, #420]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6213      	str	r3, [r2, #32]
 8002d62:	4b67      	ldr	r3, [pc, #412]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a66      	ldr	r2, [pc, #408]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	f023 0304 	bic.w	r3, r3, #4
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	e01c      	b.n	8002daa <HAL_RCC_OscConfig+0x36e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x356>
 8002d78:	4b61      	ldr	r3, [pc, #388]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a60      	ldr	r2, [pc, #384]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6213      	str	r3, [r2, #32]
 8002d84:	4b5e      	ldr	r3, [pc, #376]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a5d      	ldr	r2, [pc, #372]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	e00b      	b.n	8002daa <HAL_RCC_OscConfig+0x36e>
 8002d92:	4b5b      	ldr	r3, [pc, #364]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a5a      	ldr	r2, [pc, #360]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6213      	str	r3, [r2, #32]
 8002d9e:	4b58      	ldr	r3, [pc, #352]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a57      	ldr	r2, [pc, #348]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 0304 	bic.w	r3, r3, #4
 8002da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe ff69 	bl	8001c88 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe ff65 	bl	8001c88 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0b1      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ee      	beq.n	8002dba <HAL_RCC_OscConfig+0x37e>
 8002ddc:	e014      	b.n	8002e08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dde:	f7fe ff53 	bl	8001c88 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe ff4f 	bl	8001c88 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e09b      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfc:	4b40      	ldr	r3, [pc, #256]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ee      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4a3b      	ldr	r2, [pc, #236]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8087 	beq.w	8002f32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e24:	4b36      	ldr	r3, [pc, #216]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d061      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d146      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b33      	ldr	r3, [pc, #204]	@ (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe ff23 	bl	8001c88 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e46:	f7fe ff1f 	bl	8001c88 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e06d      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	4b29      	ldr	r3, [pc, #164]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e6c:	d108      	bne.n	8002e80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4921      	ldr	r1, [pc, #132]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e80:	4b1f      	ldr	r3, [pc, #124]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a19      	ldr	r1, [r3, #32]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	430b      	orrs	r3, r1
 8002e92:	491b      	ldr	r1, [pc, #108]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e98:	4b1b      	ldr	r3, [pc, #108]	@ (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fef3 	bl	8001c88 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fe feef 	bl	8001c88 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e03d      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x46a>
 8002ec4:	e035      	b.n	8002f32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fedc 	bl	8001c88 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed4:	f7fe fed8 	bl	8001c88 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e026      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x498>
 8002ef2:	e01e      	b.n	8002f32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e019      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_OscConfig+0x500>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000

08002f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0d0      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b6a      	ldr	r3, [pc, #424]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b67      	ldr	r3, [pc, #412]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4965      	ldr	r1, [pc, #404]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b63      	ldr	r3, [pc, #396]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f9c:	4b59      	ldr	r3, [pc, #356]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb4:	4b53      	ldr	r3, [pc, #332]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b50      	ldr	r3, [pc, #320]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	494d      	ldr	r1, [pc, #308]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d040      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b47      	ldr	r3, [pc, #284]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d115      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b41      	ldr	r3, [pc, #260]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e073      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3d      	ldr	r3, [pc, #244]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06b      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b39      	ldr	r3, [pc, #228]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4936      	ldr	r1, [pc, #216]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe fe2a 	bl	8001c88 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fe26 	bl	8001c88 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e053      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b27      	ldr	r3, [pc, #156]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d210      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b24      	ldr	r3, [pc, #144]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4922      	ldr	r1, [pc, #136]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b20      	ldr	r3, [pc, #128]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e032      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4916      	ldr	r1, [pc, #88]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ba:	4b12      	ldr	r3, [pc, #72]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490e      	ldr	r1, [pc, #56]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ce:	f000 f821 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	490a      	ldr	r1, [pc, #40]	@ (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	fa22 f303 	lsr.w	r3, r2, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_RCC_ClockConfig+0x1cc>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	@ (8003110 <HAL_RCC_ClockConfig+0x1d0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fd88 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	08006eec 	.word	0x08006eec
 800310c:	20000020 	.word	0x20000020
 8003110:	20000024 	.word	0x20000024

08003114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312e:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d002      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x30>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d003      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x36>
 8003142:	e027      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003144:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003146:	613b      	str	r3, [r7, #16]
      break;
 8003148:	e027      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0c9b      	lsrs	r3, r3, #18
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003154:	5cd3      	ldrb	r3, [r2, r3]
 8003156:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003162:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0c5b      	lsrs	r3, r3, #17
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800316e:	5cd3      	ldrb	r3, [r2, r3]
 8003170:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a0d      	ldr	r2, [pc, #52]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003176:	fb03 f202 	mul.w	r2, r3, r2
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e004      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a0c      	ldr	r2, [pc, #48]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	613b      	str	r3, [r7, #16]
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	693b      	ldr	r3, [r7, #16]
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	007a1200 	.word	0x007a1200
 80031b0:	08006f04 	.word	0x08006f04
 80031b4:	08006f14 	.word	0x08006f14
 80031b8:	003d0900 	.word	0x003d0900

080031bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c0:	4b02      	ldr	r3, [pc, #8]	@ (80031cc <HAL_RCC_GetHCLKFreq+0x10>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	20000020 	.word	0x20000020

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff fff2 	bl	80031bc <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0adb      	lsrs	r3, r3, #11
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08006efc 	.word	0x08006efc

080031f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <RCC_Delay+0x34>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a0a      	ldr	r2, [pc, #40]	@ (8003230 <RCC_Delay+0x38>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a5b      	lsrs	r3, r3, #9
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003214:	bf00      	nop
  }
  while (Delay --);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e5a      	subs	r2, r3, #1
 800321a:	60fa      	str	r2, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f9      	bne.n	8003214 <RCC_Delay+0x1c>
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	20000020 	.word	0x20000020
 8003230:	10624dd3 	.word	0x10624dd3

08003234 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d07d      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003254:	4b4f      	ldr	r3, [pc, #316]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b4c      	ldr	r3, [pc, #304]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4a4b      	ldr	r2, [pc, #300]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326a:	61d3      	str	r3, [r2, #28]
 800326c:	4b49      	ldr	r3, [pc, #292]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003278:	2301      	movs	r3, #1
 800327a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	4b46      	ldr	r3, [pc, #280]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d118      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003288:	4b43      	ldr	r3, [pc, #268]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a42      	ldr	r2, [pc, #264]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003294:	f7fe fcf8 	bl	8001c88 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	e008      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fe fcf4 	bl	8001c88 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	@ 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e06d      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ba:	4b36      	ldr	r3, [pc, #216]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d02e      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d027      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e2:	4b2e      	ldr	r3, [pc, #184]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032e8:	4b2c      	ldr	r3, [pc, #176]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ee:	4a29      	ldr	r2, [pc, #164]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d014      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fcc3 	bl	8001c88 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	e00a      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003306:	f7fe fcbf 	bl	8001c88 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003314:	4293      	cmp	r3, r2
 8003316:	d901      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e036      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	4b1d      	ldr	r3, [pc, #116]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ee      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003328:	4b1a      	ldr	r3, [pc, #104]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4917      	ldr	r1, [pc, #92]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	4313      	orrs	r3, r2
 8003338:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003340:	4b14      	ldr	r3, [pc, #80]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4a13      	ldr	r2, [pc, #76]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800334a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003358:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	490b      	ldr	r1, [pc, #44]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003376:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4904      	ldr	r1, [pc, #16]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003384:	4313      	orrs	r3, r2
 8003386:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	40007000 	.word	0x40007000
 800339c:	42420440 	.word	0x42420440

080033a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	f200 808a 	bhi.w	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d045      	beq.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d075      	beq.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033d6:	e082      	b.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80033d8:	4b46      	ldr	r3, [pc, #280]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033de:	4b45      	ldr	r3, [pc, #276]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d07b      	beq.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	4a41      	ldr	r2, [pc, #260]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80033f4:	5cd3      	ldrb	r3, [r2, r3]
 80033f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003402:	4b3c      	ldr	r3, [pc, #240]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	0c5b      	lsrs	r3, r3, #17
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	4a3b      	ldr	r2, [pc, #236]	@ (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800341c:	4a38      	ldr	r2, [pc, #224]	@ (8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fbb2 f2f3 	udiv	r2, r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	61fb      	str	r3, [r7, #28]
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4a34      	ldr	r2, [pc, #208]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003438:	4b2e      	ldr	r3, [pc, #184]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003444:	d102      	bne.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	61bb      	str	r3, [r7, #24]
      break;
 800344a:	e04a      	b.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4a2d      	ldr	r2, [pc, #180]	@ (8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	61bb      	str	r3, [r7, #24]
      break;
 800345a:	e042      	b.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800345c:	4b25      	ldr	r3, [pc, #148]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346c:	d108      	bne.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	e01f      	b.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800348a:	d109      	bne.n	80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800348c:	4b19      	ldr	r3, [pc, #100]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003498:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e00f      	b.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034aa:	d11c      	bne.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d016      	beq.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80034b8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80034bc:	61bb      	str	r3, [r7, #24]
      break;
 80034be:	e012      	b.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80034c0:	e011      	b.n	80034e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80034c2:	f7ff fe85 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80034c6:	4602      	mov	r2, r0
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0b9b      	lsrs	r3, r3, #14
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	3301      	adds	r3, #1
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	61bb      	str	r3, [r7, #24]
      break;
 80034dc:	e004      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034e6:	bf00      	nop
    }
  }
  return (frequency);
 80034e8:	69bb      	ldr	r3, [r7, #24]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	08006f18 	.word	0x08006f18
 80034fc:	08006f28 	.word	0x08006f28
 8003500:	007a1200 	.word	0x007a1200
 8003504:	003d0900 	.word	0x003d0900
 8003508:	aaaaaaab 	.word	0xaaaaaaab

0800350c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e041      	b.n	80035a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd ff8c 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 fafc 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a18      	ldr	r2, [pc, #96]	@ (8003634 <HAL_TIM_Base_Start+0x88>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_TIM_Base_Start+0x48>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035de:	d009      	beq.n	80035f4 <HAL_TIM_Base_Start+0x48>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a14      	ldr	r2, [pc, #80]	@ (8003638 <HAL_TIM_Base_Start+0x8c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_TIM_Base_Start+0x48>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a13      	ldr	r2, [pc, #76]	@ (800363c <HAL_TIM_Base_Start+0x90>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d111      	bne.n	8003618 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b06      	cmp	r3, #6
 8003604:	d010      	beq.n	8003628 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	e007      	b.n	8003628 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800

08003640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e041      	b.n	80036d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f839 	bl	80036de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 fa62 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x24>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e022      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d109      	bne.n	800372e <HAL_TIM_PWM_Start+0x3e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e015      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start+0x58>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e008      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e05e      	b.n	8003820 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0x82>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003770:	e013      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0x92>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003780:	e00b      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003790:	e003      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2201      	movs	r2, #1
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fc50 	bl	8004048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003828 <HAL_TIM_PWM_Start+0x138>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a18      	ldr	r2, [pc, #96]	@ (8003828 <HAL_TIM_PWM_Start+0x138>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_TIM_PWM_Start+0xfa>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d4:	d009      	beq.n	80037ea <HAL_TIM_PWM_Start+0xfa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a14      	ldr	r2, [pc, #80]	@ (800382c <HAL_TIM_PWM_Start+0x13c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIM_PWM_Start+0xfa>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a12      	ldr	r2, [pc, #72]	@ (8003830 <HAL_TIM_PWM_Start+0x140>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d111      	bne.n	800380e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d010      	beq.n	800381e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	e007      	b.n	800381e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40012c00 	.word	0x40012c00
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800

08003834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0ae      	b.n	80039b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b0c      	cmp	r3, #12
 800385e:	f200 809f 	bhi.w	80039a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003862:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	0800389d 	.word	0x0800389d
 800386c:	080039a1 	.word	0x080039a1
 8003870:	080039a1 	.word	0x080039a1
 8003874:	080039a1 	.word	0x080039a1
 8003878:	080038dd 	.word	0x080038dd
 800387c:	080039a1 	.word	0x080039a1
 8003880:	080039a1 	.word	0x080039a1
 8003884:	080039a1 	.word	0x080039a1
 8003888:	0800391f 	.word	0x0800391f
 800388c:	080039a1 	.word	0x080039a1
 8003890:	080039a1 	.word	0x080039a1
 8003894:	080039a1 	.word	0x080039a1
 8003898:	0800395f 	.word	0x0800395f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f9b2 	bl	8003c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0208 	orr.w	r2, r2, #8
 80038b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0204 	bic.w	r2, r2, #4
 80038c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6999      	ldr	r1, [r3, #24]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	619a      	str	r2, [r3, #24]
      break;
 80038da:	e064      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f9f8 	bl	8003cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6999      	ldr	r1, [r3, #24]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	021a      	lsls	r2, r3, #8
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	619a      	str	r2, [r3, #24]
      break;
 800391c:	e043      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fa41 	bl	8003dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0208 	orr.w	r2, r2, #8
 8003938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0204 	bic.w	r2, r2, #4
 8003948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69d9      	ldr	r1, [r3, #28]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	61da      	str	r2, [r3, #28]
      break;
 800395c:	e023      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fa8b 	bl	8003e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69d9      	ldr	r1, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	021a      	lsls	r2, r3, #8
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	61da      	str	r2, [r3, #28]
      break;
 800399e:	e002      	b.n	80039a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
      break;
 80039a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0b4      	b.n	8003b3e <HAL_TIM_ConfigClockSource+0x186>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0c:	d03e      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0xd4>
 8003a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a12:	f200 8087 	bhi.w	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	f000 8086 	beq.w	8003b2a <HAL_TIM_ConfigClockSource+0x172>
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a22:	d87f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b70      	cmp	r3, #112	@ 0x70
 8003a26:	d01a      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xa6>
 8003a28:	2b70      	cmp	r3, #112	@ 0x70
 8003a2a:	d87b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b60      	cmp	r3, #96	@ 0x60
 8003a2e:	d050      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a30:	2b60      	cmp	r3, #96	@ 0x60
 8003a32:	d877      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b50      	cmp	r3, #80	@ 0x50
 8003a36:	d03c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a38:	2b50      	cmp	r3, #80	@ 0x50
 8003a3a:	d873      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	d058      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a40:	2b40      	cmp	r3, #64	@ 0x40
 8003a42:	d86f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b30      	cmp	r3, #48	@ 0x30
 8003a46:	d064      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b30      	cmp	r3, #48	@ 0x30
 8003a4a:	d86b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d060      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d867      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05c      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d05a      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a5c:	e062      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a6e:	f000 facc 	bl	800400a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	609a      	str	r2, [r3, #8]
      break;
 8003a8a:	e04f      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a9c:	f000 fab5 	bl	800400a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aae:	609a      	str	r2, [r3, #8]
      break;
 8003ab0:	e03c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 fa2c 	bl	8003f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2150      	movs	r1, #80	@ 0x50
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fa83 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e02c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f000 fa4a 	bl	8003f78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2160      	movs	r1, #96	@ 0x60
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa73 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003af0:	e01c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fa0c 	bl	8003f1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2140      	movs	r1, #64	@ 0x40
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fa63 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003b10:	e00c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f000 fa5a 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003b22:	e003      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a29      	ldr	r2, [pc, #164]	@ (8003c00 <TIM_Base_SetConfig+0xb8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b66:	d007      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a26      	ldr	r2, [pc, #152]	@ (8003c04 <TIM_Base_SetConfig+0xbc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a25      	ldr	r2, [pc, #148]	@ (8003c08 <TIM_Base_SetConfig+0xc0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c00 <TIM_Base_SetConfig+0xb8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a19      	ldr	r2, [pc, #100]	@ (8003c04 <TIM_Base_SetConfig+0xbc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a18      	ldr	r2, [pc, #96]	@ (8003c08 <TIM_Base_SetConfig+0xc0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a07      	ldr	r2, [pc, #28]	@ (8003c00 <TIM_Base_SetConfig+0xb8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d103      	bne.n	8003bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	615a      	str	r2, [r3, #20]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800

08003c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f023 0201 	bic.w	r2, r3, #1
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 0302 	bic.w	r3, r3, #2
 8003c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd4 <TIM_OC1_SetConfig+0xc8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d10c      	bne.n	8003c82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0308 	bic.w	r3, r3, #8
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f023 0304 	bic.w	r3, r3, #4
 8003c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <TIM_OC1_SetConfig+0xc8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d111      	bne.n	8003cae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40012c00 	.word	0x40012c00

08003cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f023 0210 	bic.w	r2, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0320 	bic.w	r3, r3, #32
 8003d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1d      	ldr	r2, [pc, #116]	@ (8003da8 <TIM_OC2_SetConfig+0xd0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d10d      	bne.n	8003d54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a14      	ldr	r2, [pc, #80]	@ (8003da8 <TIM_OC2_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d113      	bne.n	8003d84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40012c00 	.word	0x40012c00

08003dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a1d      	ldr	r2, [pc, #116]	@ (8003e7c <TIM_OC3_SetConfig+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10d      	bne.n	8003e26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a14      	ldr	r2, [pc, #80]	@ (8003e7c <TIM_OC3_SetConfig+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d113      	bne.n	8003e56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	621a      	str	r2, [r3, #32]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40012c00 	.word	0x40012c00

08003e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	031b      	lsls	r3, r3, #12
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a0f      	ldr	r2, [pc, #60]	@ (8003f18 <TIM_OC4_SetConfig+0x98>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d109      	bne.n	8003ef4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	019b      	lsls	r3, r3, #6
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00

08003f1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 030a 	bic.w	r3, r3, #10
 8003f58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f023 0210 	bic.w	r2, r3, #16
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	031b      	lsls	r3, r3, #12
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	621a      	str	r2, [r3, #32]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f043 0307 	orr.w	r3, r3, #7
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004024:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	021a      	lsls	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	431a      	orrs	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	609a      	str	r2, [r3, #8]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2201      	movs	r2, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	43db      	mvns	r3, r3
 800406a:	401a      	ands	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1a      	ldr	r2, [r3, #32]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e046      	b.n	8004136 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a16      	ldr	r2, [pc, #88]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d009      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a10      	ldr	r2, [pc, #64]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10c      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	4313      	orrs	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800

0800414c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004164:	2302      	movs	r3, #2
 8004166:	e03d      	b.n	80041e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr

080041ee <__cvt>:
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	461d      	mov	r5, r3
 80041f6:	bfbb      	ittet	lt
 80041f8:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80041fc:	461d      	movlt	r5, r3
 80041fe:	2300      	movge	r3, #0
 8004200:	232d      	movlt	r3, #45	@ 0x2d
 8004202:	b088      	sub	sp, #32
 8004204:	4614      	mov	r4, r2
 8004206:	bfb8      	it	lt
 8004208:	4614      	movlt	r4, r2
 800420a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800420c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800420e:	7013      	strb	r3, [r2, #0]
 8004210:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004212:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004216:	f023 0820 	bic.w	r8, r3, #32
 800421a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800421e:	d005      	beq.n	800422c <__cvt+0x3e>
 8004220:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004224:	d100      	bne.n	8004228 <__cvt+0x3a>
 8004226:	3601      	adds	r6, #1
 8004228:	2302      	movs	r3, #2
 800422a:	e000      	b.n	800422e <__cvt+0x40>
 800422c:	2303      	movs	r3, #3
 800422e:	aa07      	add	r2, sp, #28
 8004230:	9204      	str	r2, [sp, #16]
 8004232:	aa06      	add	r2, sp, #24
 8004234:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004238:	e9cd 3600 	strd	r3, r6, [sp]
 800423c:	4622      	mov	r2, r4
 800423e:	462b      	mov	r3, r5
 8004240:	f000 fe6e 	bl	8004f20 <_dtoa_r>
 8004244:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004248:	4607      	mov	r7, r0
 800424a:	d119      	bne.n	8004280 <__cvt+0x92>
 800424c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800424e:	07db      	lsls	r3, r3, #31
 8004250:	d50e      	bpl.n	8004270 <__cvt+0x82>
 8004252:	eb00 0906 	add.w	r9, r0, r6
 8004256:	2200      	movs	r2, #0
 8004258:	2300      	movs	r3, #0
 800425a:	4620      	mov	r0, r4
 800425c:	4629      	mov	r1, r5
 800425e:	f7fc fba3 	bl	80009a8 <__aeabi_dcmpeq>
 8004262:	b108      	cbz	r0, 8004268 <__cvt+0x7a>
 8004264:	f8cd 901c 	str.w	r9, [sp, #28]
 8004268:	2230      	movs	r2, #48	@ 0x30
 800426a:	9b07      	ldr	r3, [sp, #28]
 800426c:	454b      	cmp	r3, r9
 800426e:	d31e      	bcc.n	80042ae <__cvt+0xc0>
 8004270:	4638      	mov	r0, r7
 8004272:	9b07      	ldr	r3, [sp, #28]
 8004274:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004276:	1bdb      	subs	r3, r3, r7
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	b008      	add	sp, #32
 800427c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004280:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004284:	eb00 0906 	add.w	r9, r0, r6
 8004288:	d1e5      	bne.n	8004256 <__cvt+0x68>
 800428a:	7803      	ldrb	r3, [r0, #0]
 800428c:	2b30      	cmp	r3, #48	@ 0x30
 800428e:	d10a      	bne.n	80042a6 <__cvt+0xb8>
 8004290:	2200      	movs	r2, #0
 8004292:	2300      	movs	r3, #0
 8004294:	4620      	mov	r0, r4
 8004296:	4629      	mov	r1, r5
 8004298:	f7fc fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800429c:	b918      	cbnz	r0, 80042a6 <__cvt+0xb8>
 800429e:	f1c6 0601 	rsb	r6, r6, #1
 80042a2:	f8ca 6000 	str.w	r6, [sl]
 80042a6:	f8da 3000 	ldr.w	r3, [sl]
 80042aa:	4499      	add	r9, r3
 80042ac:	e7d3      	b.n	8004256 <__cvt+0x68>
 80042ae:	1c59      	adds	r1, r3, #1
 80042b0:	9107      	str	r1, [sp, #28]
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e7d9      	b.n	800426a <__cvt+0x7c>

080042b6 <__exponent>:
 80042b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b8:	2900      	cmp	r1, #0
 80042ba:	bfb6      	itet	lt
 80042bc:	232d      	movlt	r3, #45	@ 0x2d
 80042be:	232b      	movge	r3, #43	@ 0x2b
 80042c0:	4249      	neglt	r1, r1
 80042c2:	2909      	cmp	r1, #9
 80042c4:	7002      	strb	r2, [r0, #0]
 80042c6:	7043      	strb	r3, [r0, #1]
 80042c8:	dd29      	ble.n	800431e <__exponent+0x68>
 80042ca:	f10d 0307 	add.w	r3, sp, #7
 80042ce:	461d      	mov	r5, r3
 80042d0:	270a      	movs	r7, #10
 80042d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80042d6:	461a      	mov	r2, r3
 80042d8:	fb07 1416 	mls	r4, r7, r6, r1
 80042dc:	3430      	adds	r4, #48	@ 0x30
 80042de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80042e2:	460c      	mov	r4, r1
 80042e4:	2c63      	cmp	r4, #99	@ 0x63
 80042e6:	4631      	mov	r1, r6
 80042e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80042ec:	dcf1      	bgt.n	80042d2 <__exponent+0x1c>
 80042ee:	3130      	adds	r1, #48	@ 0x30
 80042f0:	1e94      	subs	r4, r2, #2
 80042f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80042f6:	4623      	mov	r3, r4
 80042f8:	1c41      	adds	r1, r0, #1
 80042fa:	42ab      	cmp	r3, r5
 80042fc:	d30a      	bcc.n	8004314 <__exponent+0x5e>
 80042fe:	f10d 0309 	add.w	r3, sp, #9
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	42ac      	cmp	r4, r5
 8004306:	bf88      	it	hi
 8004308:	2300      	movhi	r3, #0
 800430a:	3302      	adds	r3, #2
 800430c:	4403      	add	r3, r0
 800430e:	1a18      	subs	r0, r3, r0
 8004310:	b003      	add	sp, #12
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004314:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004318:	f801 6f01 	strb.w	r6, [r1, #1]!
 800431c:	e7ed      	b.n	80042fa <__exponent+0x44>
 800431e:	2330      	movs	r3, #48	@ 0x30
 8004320:	3130      	adds	r1, #48	@ 0x30
 8004322:	7083      	strb	r3, [r0, #2]
 8004324:	70c1      	strb	r1, [r0, #3]
 8004326:	1d03      	adds	r3, r0, #4
 8004328:	e7f1      	b.n	800430e <__exponent+0x58>
	...

0800432c <_printf_float>:
 800432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004330:	b091      	sub	sp, #68	@ 0x44
 8004332:	460c      	mov	r4, r1
 8004334:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004338:	4616      	mov	r6, r2
 800433a:	461f      	mov	r7, r3
 800433c:	4605      	mov	r5, r0
 800433e:	f000 fce1 	bl	8004d04 <_localeconv_r>
 8004342:	6803      	ldr	r3, [r0, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	9308      	str	r3, [sp, #32]
 8004348:	f7fb ff02 	bl	8000150 <strlen>
 800434c:	2300      	movs	r3, #0
 800434e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004350:	f8d8 3000 	ldr.w	r3, [r8]
 8004354:	9009      	str	r0, [sp, #36]	@ 0x24
 8004356:	3307      	adds	r3, #7
 8004358:	f023 0307 	bic.w	r3, r3, #7
 800435c:	f103 0208 	add.w	r2, r3, #8
 8004360:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004364:	f8d4 b000 	ldr.w	fp, [r4]
 8004368:	f8c8 2000 	str.w	r2, [r8]
 800436c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004370:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004374:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004376:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800437a:	f04f 32ff 	mov.w	r2, #4294967295
 800437e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004382:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004386:	4b9c      	ldr	r3, [pc, #624]	@ (80045f8 <_printf_float+0x2cc>)
 8004388:	f7fc fb40 	bl	8000a0c <__aeabi_dcmpun>
 800438c:	bb70      	cbnz	r0, 80043ec <_printf_float+0xc0>
 800438e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004392:	f04f 32ff 	mov.w	r2, #4294967295
 8004396:	4b98      	ldr	r3, [pc, #608]	@ (80045f8 <_printf_float+0x2cc>)
 8004398:	f7fc fb1a 	bl	80009d0 <__aeabi_dcmple>
 800439c:	bb30      	cbnz	r0, 80043ec <_printf_float+0xc0>
 800439e:	2200      	movs	r2, #0
 80043a0:	2300      	movs	r3, #0
 80043a2:	4640      	mov	r0, r8
 80043a4:	4649      	mov	r1, r9
 80043a6:	f7fc fb09 	bl	80009bc <__aeabi_dcmplt>
 80043aa:	b110      	cbz	r0, 80043b2 <_printf_float+0x86>
 80043ac:	232d      	movs	r3, #45	@ 0x2d
 80043ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b2:	4a92      	ldr	r2, [pc, #584]	@ (80045fc <_printf_float+0x2d0>)
 80043b4:	4b92      	ldr	r3, [pc, #584]	@ (8004600 <_printf_float+0x2d4>)
 80043b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80043ba:	bf94      	ite	ls
 80043bc:	4690      	movls	r8, r2
 80043be:	4698      	movhi	r8, r3
 80043c0:	2303      	movs	r3, #3
 80043c2:	f04f 0900 	mov.w	r9, #0
 80043c6:	6123      	str	r3, [r4, #16]
 80043c8:	f02b 0304 	bic.w	r3, fp, #4
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	4633      	mov	r3, r6
 80043d0:	4621      	mov	r1, r4
 80043d2:	4628      	mov	r0, r5
 80043d4:	9700      	str	r7, [sp, #0]
 80043d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80043d8:	f000 f9d4 	bl	8004784 <_printf_common>
 80043dc:	3001      	adds	r0, #1
 80043de:	f040 8090 	bne.w	8004502 <_printf_float+0x1d6>
 80043e2:	f04f 30ff 	mov.w	r0, #4294967295
 80043e6:	b011      	add	sp, #68	@ 0x44
 80043e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ec:	4642      	mov	r2, r8
 80043ee:	464b      	mov	r3, r9
 80043f0:	4640      	mov	r0, r8
 80043f2:	4649      	mov	r1, r9
 80043f4:	f7fc fb0a 	bl	8000a0c <__aeabi_dcmpun>
 80043f8:	b148      	cbz	r0, 800440e <_printf_float+0xe2>
 80043fa:	464b      	mov	r3, r9
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfb8      	it	lt
 8004400:	232d      	movlt	r3, #45	@ 0x2d
 8004402:	4a80      	ldr	r2, [pc, #512]	@ (8004604 <_printf_float+0x2d8>)
 8004404:	bfb8      	it	lt
 8004406:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800440a:	4b7f      	ldr	r3, [pc, #508]	@ (8004608 <_printf_float+0x2dc>)
 800440c:	e7d3      	b.n	80043b6 <_printf_float+0x8a>
 800440e:	6863      	ldr	r3, [r4, #4]
 8004410:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	d13f      	bne.n	8004498 <_printf_float+0x16c>
 8004418:	2306      	movs	r3, #6
 800441a:	6063      	str	r3, [r4, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	9206      	str	r2, [sp, #24]
 8004426:	aa0e      	add	r2, sp, #56	@ 0x38
 8004428:	e9cd a204 	strd	sl, r2, [sp, #16]
 800442c:	aa0d      	add	r2, sp, #52	@ 0x34
 800442e:	9203      	str	r2, [sp, #12]
 8004430:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004434:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	4642      	mov	r2, r8
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4628      	mov	r0, r5
 8004440:	464b      	mov	r3, r9
 8004442:	910a      	str	r1, [sp, #40]	@ 0x28
 8004444:	f7ff fed3 	bl	80041ee <__cvt>
 8004448:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800444a:	4680      	mov	r8, r0
 800444c:	2947      	cmp	r1, #71	@ 0x47
 800444e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004450:	d128      	bne.n	80044a4 <_printf_float+0x178>
 8004452:	1cc8      	adds	r0, r1, #3
 8004454:	db02      	blt.n	800445c <_printf_float+0x130>
 8004456:	6863      	ldr	r3, [r4, #4]
 8004458:	4299      	cmp	r1, r3
 800445a:	dd40      	ble.n	80044de <_printf_float+0x1b2>
 800445c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004460:	fa5f fa8a 	uxtb.w	sl, sl
 8004464:	4652      	mov	r2, sl
 8004466:	3901      	subs	r1, #1
 8004468:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800446c:	910d      	str	r1, [sp, #52]	@ 0x34
 800446e:	f7ff ff22 	bl	80042b6 <__exponent>
 8004472:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004474:	4681      	mov	r9, r0
 8004476:	1813      	adds	r3, r2, r0
 8004478:	2a01      	cmp	r2, #1
 800447a:	6123      	str	r3, [r4, #16]
 800447c:	dc02      	bgt.n	8004484 <_printf_float+0x158>
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	07d2      	lsls	r2, r2, #31
 8004482:	d501      	bpl.n	8004488 <_printf_float+0x15c>
 8004484:	3301      	adds	r3, #1
 8004486:	6123      	str	r3, [r4, #16]
 8004488:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800448c:	2b00      	cmp	r3, #0
 800448e:	d09e      	beq.n	80043ce <_printf_float+0xa2>
 8004490:	232d      	movs	r3, #45	@ 0x2d
 8004492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004496:	e79a      	b.n	80043ce <_printf_float+0xa2>
 8004498:	2947      	cmp	r1, #71	@ 0x47
 800449a:	d1bf      	bne.n	800441c <_printf_float+0xf0>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1bd      	bne.n	800441c <_printf_float+0xf0>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e7ba      	b.n	800441a <_printf_float+0xee>
 80044a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80044a8:	d9dc      	bls.n	8004464 <_printf_float+0x138>
 80044aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80044ae:	d118      	bne.n	80044e2 <_printf_float+0x1b6>
 80044b0:	2900      	cmp	r1, #0
 80044b2:	6863      	ldr	r3, [r4, #4]
 80044b4:	dd0b      	ble.n	80044ce <_printf_float+0x1a2>
 80044b6:	6121      	str	r1, [r4, #16]
 80044b8:	b913      	cbnz	r3, 80044c0 <_printf_float+0x194>
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	07d0      	lsls	r0, r2, #31
 80044be:	d502      	bpl.n	80044c6 <_printf_float+0x19a>
 80044c0:	3301      	adds	r3, #1
 80044c2:	440b      	add	r3, r1
 80044c4:	6123      	str	r3, [r4, #16]
 80044c6:	f04f 0900 	mov.w	r9, #0
 80044ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80044cc:	e7dc      	b.n	8004488 <_printf_float+0x15c>
 80044ce:	b913      	cbnz	r3, 80044d6 <_printf_float+0x1aa>
 80044d0:	6822      	ldr	r2, [r4, #0]
 80044d2:	07d2      	lsls	r2, r2, #31
 80044d4:	d501      	bpl.n	80044da <_printf_float+0x1ae>
 80044d6:	3302      	adds	r3, #2
 80044d8:	e7f4      	b.n	80044c4 <_printf_float+0x198>
 80044da:	2301      	movs	r3, #1
 80044dc:	e7f2      	b.n	80044c4 <_printf_float+0x198>
 80044de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80044e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044e4:	4299      	cmp	r1, r3
 80044e6:	db05      	blt.n	80044f4 <_printf_float+0x1c8>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	6121      	str	r1, [r4, #16]
 80044ec:	07d8      	lsls	r0, r3, #31
 80044ee:	d5ea      	bpl.n	80044c6 <_printf_float+0x19a>
 80044f0:	1c4b      	adds	r3, r1, #1
 80044f2:	e7e7      	b.n	80044c4 <_printf_float+0x198>
 80044f4:	2900      	cmp	r1, #0
 80044f6:	bfcc      	ite	gt
 80044f8:	2201      	movgt	r2, #1
 80044fa:	f1c1 0202 	rsble	r2, r1, #2
 80044fe:	4413      	add	r3, r2
 8004500:	e7e0      	b.n	80044c4 <_printf_float+0x198>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	055a      	lsls	r2, r3, #21
 8004506:	d407      	bmi.n	8004518 <_printf_float+0x1ec>
 8004508:	6923      	ldr	r3, [r4, #16]
 800450a:	4642      	mov	r2, r8
 800450c:	4631      	mov	r1, r6
 800450e:	4628      	mov	r0, r5
 8004510:	47b8      	blx	r7
 8004512:	3001      	adds	r0, #1
 8004514:	d12b      	bne.n	800456e <_printf_float+0x242>
 8004516:	e764      	b.n	80043e2 <_printf_float+0xb6>
 8004518:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800451c:	f240 80dc 	bls.w	80046d8 <_printf_float+0x3ac>
 8004520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004524:	2200      	movs	r2, #0
 8004526:	2300      	movs	r3, #0
 8004528:	f7fc fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800452c:	2800      	cmp	r0, #0
 800452e:	d033      	beq.n	8004598 <_printf_float+0x26c>
 8004530:	2301      	movs	r3, #1
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	4a35      	ldr	r2, [pc, #212]	@ (800460c <_printf_float+0x2e0>)
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	f43f af51 	beq.w	80043e2 <_printf_float+0xb6>
 8004540:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004544:	4543      	cmp	r3, r8
 8004546:	db02      	blt.n	800454e <_printf_float+0x222>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	07d8      	lsls	r0, r3, #31
 800454c:	d50f      	bpl.n	800456e <_printf_float+0x242>
 800454e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004552:	4631      	mov	r1, r6
 8004554:	4628      	mov	r0, r5
 8004556:	47b8      	blx	r7
 8004558:	3001      	adds	r0, #1
 800455a:	f43f af42 	beq.w	80043e2 <_printf_float+0xb6>
 800455e:	f04f 0900 	mov.w	r9, #0
 8004562:	f108 38ff 	add.w	r8, r8, #4294967295
 8004566:	f104 0a1a 	add.w	sl, r4, #26
 800456a:	45c8      	cmp	r8, r9
 800456c:	dc09      	bgt.n	8004582 <_printf_float+0x256>
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	079b      	lsls	r3, r3, #30
 8004572:	f100 8102 	bmi.w	800477a <_printf_float+0x44e>
 8004576:	68e0      	ldr	r0, [r4, #12]
 8004578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800457a:	4298      	cmp	r0, r3
 800457c:	bfb8      	it	lt
 800457e:	4618      	movlt	r0, r3
 8004580:	e731      	b.n	80043e6 <_printf_float+0xba>
 8004582:	2301      	movs	r3, #1
 8004584:	4652      	mov	r2, sl
 8004586:	4631      	mov	r1, r6
 8004588:	4628      	mov	r0, r5
 800458a:	47b8      	blx	r7
 800458c:	3001      	adds	r0, #1
 800458e:	f43f af28 	beq.w	80043e2 <_printf_float+0xb6>
 8004592:	f109 0901 	add.w	r9, r9, #1
 8004596:	e7e8      	b.n	800456a <_printf_float+0x23e>
 8004598:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800459a:	2b00      	cmp	r3, #0
 800459c:	dc38      	bgt.n	8004610 <_printf_float+0x2e4>
 800459e:	2301      	movs	r3, #1
 80045a0:	4631      	mov	r1, r6
 80045a2:	4628      	mov	r0, r5
 80045a4:	4a19      	ldr	r2, [pc, #100]	@ (800460c <_printf_float+0x2e0>)
 80045a6:	47b8      	blx	r7
 80045a8:	3001      	adds	r0, #1
 80045aa:	f43f af1a 	beq.w	80043e2 <_printf_float+0xb6>
 80045ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80045b2:	ea59 0303 	orrs.w	r3, r9, r3
 80045b6:	d102      	bne.n	80045be <_printf_float+0x292>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	d5d7      	bpl.n	800456e <_printf_float+0x242>
 80045be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b8      	blx	r7
 80045c8:	3001      	adds	r0, #1
 80045ca:	f43f af0a 	beq.w	80043e2 <_printf_float+0xb6>
 80045ce:	f04f 0a00 	mov.w	sl, #0
 80045d2:	f104 0b1a 	add.w	fp, r4, #26
 80045d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045d8:	425b      	negs	r3, r3
 80045da:	4553      	cmp	r3, sl
 80045dc:	dc01      	bgt.n	80045e2 <_printf_float+0x2b6>
 80045de:	464b      	mov	r3, r9
 80045e0:	e793      	b.n	800450a <_printf_float+0x1de>
 80045e2:	2301      	movs	r3, #1
 80045e4:	465a      	mov	r2, fp
 80045e6:	4631      	mov	r1, r6
 80045e8:	4628      	mov	r0, r5
 80045ea:	47b8      	blx	r7
 80045ec:	3001      	adds	r0, #1
 80045ee:	f43f aef8 	beq.w	80043e2 <_printf_float+0xb6>
 80045f2:	f10a 0a01 	add.w	sl, sl, #1
 80045f6:	e7ee      	b.n	80045d6 <_printf_float+0x2aa>
 80045f8:	7fefffff 	.word	0x7fefffff
 80045fc:	08006f2a 	.word	0x08006f2a
 8004600:	08006f2e 	.word	0x08006f2e
 8004604:	08006f32 	.word	0x08006f32
 8004608:	08006f36 	.word	0x08006f36
 800460c:	08006f3a 	.word	0x08006f3a
 8004610:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004612:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004616:	4553      	cmp	r3, sl
 8004618:	bfa8      	it	ge
 800461a:	4653      	movge	r3, sl
 800461c:	2b00      	cmp	r3, #0
 800461e:	4699      	mov	r9, r3
 8004620:	dc36      	bgt.n	8004690 <_printf_float+0x364>
 8004622:	f04f 0b00 	mov.w	fp, #0
 8004626:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800462a:	f104 021a 	add.w	r2, r4, #26
 800462e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004630:	930a      	str	r3, [sp, #40]	@ 0x28
 8004632:	eba3 0309 	sub.w	r3, r3, r9
 8004636:	455b      	cmp	r3, fp
 8004638:	dc31      	bgt.n	800469e <_printf_float+0x372>
 800463a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800463c:	459a      	cmp	sl, r3
 800463e:	dc3a      	bgt.n	80046b6 <_printf_float+0x38a>
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	07da      	lsls	r2, r3, #31
 8004644:	d437      	bmi.n	80046b6 <_printf_float+0x38a>
 8004646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004648:	ebaa 0903 	sub.w	r9, sl, r3
 800464c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800464e:	ebaa 0303 	sub.w	r3, sl, r3
 8004652:	4599      	cmp	r9, r3
 8004654:	bfa8      	it	ge
 8004656:	4699      	movge	r9, r3
 8004658:	f1b9 0f00 	cmp.w	r9, #0
 800465c:	dc33      	bgt.n	80046c6 <_printf_float+0x39a>
 800465e:	f04f 0800 	mov.w	r8, #0
 8004662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004666:	f104 0b1a 	add.w	fp, r4, #26
 800466a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800466c:	ebaa 0303 	sub.w	r3, sl, r3
 8004670:	eba3 0309 	sub.w	r3, r3, r9
 8004674:	4543      	cmp	r3, r8
 8004676:	f77f af7a 	ble.w	800456e <_printf_float+0x242>
 800467a:	2301      	movs	r3, #1
 800467c:	465a      	mov	r2, fp
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	47b8      	blx	r7
 8004684:	3001      	adds	r0, #1
 8004686:	f43f aeac 	beq.w	80043e2 <_printf_float+0xb6>
 800468a:	f108 0801 	add.w	r8, r8, #1
 800468e:	e7ec      	b.n	800466a <_printf_float+0x33e>
 8004690:	4642      	mov	r2, r8
 8004692:	4631      	mov	r1, r6
 8004694:	4628      	mov	r0, r5
 8004696:	47b8      	blx	r7
 8004698:	3001      	adds	r0, #1
 800469a:	d1c2      	bne.n	8004622 <_printf_float+0x2f6>
 800469c:	e6a1      	b.n	80043e2 <_printf_float+0xb6>
 800469e:	2301      	movs	r3, #1
 80046a0:	4631      	mov	r1, r6
 80046a2:	4628      	mov	r0, r5
 80046a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80046a6:	47b8      	blx	r7
 80046a8:	3001      	adds	r0, #1
 80046aa:	f43f ae9a 	beq.w	80043e2 <_printf_float+0xb6>
 80046ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80046b0:	f10b 0b01 	add.w	fp, fp, #1
 80046b4:	e7bb      	b.n	800462e <_printf_float+0x302>
 80046b6:	4631      	mov	r1, r6
 80046b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046bc:	4628      	mov	r0, r5
 80046be:	47b8      	blx	r7
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1c0      	bne.n	8004646 <_printf_float+0x31a>
 80046c4:	e68d      	b.n	80043e2 <_printf_float+0xb6>
 80046c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80046c8:	464b      	mov	r3, r9
 80046ca:	4631      	mov	r1, r6
 80046cc:	4628      	mov	r0, r5
 80046ce:	4442      	add	r2, r8
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	d1c3      	bne.n	800465e <_printf_float+0x332>
 80046d6:	e684      	b.n	80043e2 <_printf_float+0xb6>
 80046d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80046dc:	f1ba 0f01 	cmp.w	sl, #1
 80046e0:	dc01      	bgt.n	80046e6 <_printf_float+0x3ba>
 80046e2:	07db      	lsls	r3, r3, #31
 80046e4:	d536      	bpl.n	8004754 <_printf_float+0x428>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4642      	mov	r2, r8
 80046ea:	4631      	mov	r1, r6
 80046ec:	4628      	mov	r0, r5
 80046ee:	47b8      	blx	r7
 80046f0:	3001      	adds	r0, #1
 80046f2:	f43f ae76 	beq.w	80043e2 <_printf_float+0xb6>
 80046f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046fa:	4631      	mov	r1, r6
 80046fc:	4628      	mov	r0, r5
 80046fe:	47b8      	blx	r7
 8004700:	3001      	adds	r0, #1
 8004702:	f43f ae6e 	beq.w	80043e2 <_printf_float+0xb6>
 8004706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800470a:	2200      	movs	r2, #0
 800470c:	2300      	movs	r3, #0
 800470e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004712:	f7fc f949 	bl	80009a8 <__aeabi_dcmpeq>
 8004716:	b9c0      	cbnz	r0, 800474a <_printf_float+0x41e>
 8004718:	4653      	mov	r3, sl
 800471a:	f108 0201 	add.w	r2, r8, #1
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	d10c      	bne.n	8004742 <_printf_float+0x416>
 8004728:	e65b      	b.n	80043e2 <_printf_float+0xb6>
 800472a:	2301      	movs	r3, #1
 800472c:	465a      	mov	r2, fp
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	f43f ae54 	beq.w	80043e2 <_printf_float+0xb6>
 800473a:	f108 0801 	add.w	r8, r8, #1
 800473e:	45d0      	cmp	r8, sl
 8004740:	dbf3      	blt.n	800472a <_printf_float+0x3fe>
 8004742:	464b      	mov	r3, r9
 8004744:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004748:	e6e0      	b.n	800450c <_printf_float+0x1e0>
 800474a:	f04f 0800 	mov.w	r8, #0
 800474e:	f104 0b1a 	add.w	fp, r4, #26
 8004752:	e7f4      	b.n	800473e <_printf_float+0x412>
 8004754:	2301      	movs	r3, #1
 8004756:	4642      	mov	r2, r8
 8004758:	e7e1      	b.n	800471e <_printf_float+0x3f2>
 800475a:	2301      	movs	r3, #1
 800475c:	464a      	mov	r2, r9
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	f43f ae3c 	beq.w	80043e2 <_printf_float+0xb6>
 800476a:	f108 0801 	add.w	r8, r8, #1
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004772:	1a5b      	subs	r3, r3, r1
 8004774:	4543      	cmp	r3, r8
 8004776:	dcf0      	bgt.n	800475a <_printf_float+0x42e>
 8004778:	e6fd      	b.n	8004576 <_printf_float+0x24a>
 800477a:	f04f 0800 	mov.w	r8, #0
 800477e:	f104 0919 	add.w	r9, r4, #25
 8004782:	e7f4      	b.n	800476e <_printf_float+0x442>

08004784 <_printf_common>:
 8004784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004788:	4616      	mov	r6, r2
 800478a:	4698      	mov	r8, r3
 800478c:	688a      	ldr	r2, [r1, #8]
 800478e:	690b      	ldr	r3, [r1, #16]
 8004790:	4607      	mov	r7, r0
 8004792:	4293      	cmp	r3, r2
 8004794:	bfb8      	it	lt
 8004796:	4613      	movlt	r3, r2
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800479e:	460c      	mov	r4, r1
 80047a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047a4:	b10a      	cbz	r2, 80047aa <_printf_common+0x26>
 80047a6:	3301      	adds	r3, #1
 80047a8:	6033      	str	r3, [r6, #0]
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	0699      	lsls	r1, r3, #26
 80047ae:	bf42      	ittt	mi
 80047b0:	6833      	ldrmi	r3, [r6, #0]
 80047b2:	3302      	addmi	r3, #2
 80047b4:	6033      	strmi	r3, [r6, #0]
 80047b6:	6825      	ldr	r5, [r4, #0]
 80047b8:	f015 0506 	ands.w	r5, r5, #6
 80047bc:	d106      	bne.n	80047cc <_printf_common+0x48>
 80047be:	f104 0a19 	add.w	sl, r4, #25
 80047c2:	68e3      	ldr	r3, [r4, #12]
 80047c4:	6832      	ldr	r2, [r6, #0]
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	42ab      	cmp	r3, r5
 80047ca:	dc2b      	bgt.n	8004824 <_printf_common+0xa0>
 80047cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047d0:	6822      	ldr	r2, [r4, #0]
 80047d2:	3b00      	subs	r3, #0
 80047d4:	bf18      	it	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	0692      	lsls	r2, r2, #26
 80047da:	d430      	bmi.n	800483e <_printf_common+0xba>
 80047dc:	4641      	mov	r1, r8
 80047de:	4638      	mov	r0, r7
 80047e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047e4:	47c8      	blx	r9
 80047e6:	3001      	adds	r0, #1
 80047e8:	d023      	beq.n	8004832 <_printf_common+0xae>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	6922      	ldr	r2, [r4, #16]
 80047ee:	f003 0306 	and.w	r3, r3, #6
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	bf14      	ite	ne
 80047f6:	2500      	movne	r5, #0
 80047f8:	6833      	ldreq	r3, [r6, #0]
 80047fa:	f04f 0600 	mov.w	r6, #0
 80047fe:	bf08      	it	eq
 8004800:	68e5      	ldreq	r5, [r4, #12]
 8004802:	f104 041a 	add.w	r4, r4, #26
 8004806:	bf08      	it	eq
 8004808:	1aed      	subeq	r5, r5, r3
 800480a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800480e:	bf08      	it	eq
 8004810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004814:	4293      	cmp	r3, r2
 8004816:	bfc4      	itt	gt
 8004818:	1a9b      	subgt	r3, r3, r2
 800481a:	18ed      	addgt	r5, r5, r3
 800481c:	42b5      	cmp	r5, r6
 800481e:	d11a      	bne.n	8004856 <_printf_common+0xd2>
 8004820:	2000      	movs	r0, #0
 8004822:	e008      	b.n	8004836 <_printf_common+0xb2>
 8004824:	2301      	movs	r3, #1
 8004826:	4652      	mov	r2, sl
 8004828:	4641      	mov	r1, r8
 800482a:	4638      	mov	r0, r7
 800482c:	47c8      	blx	r9
 800482e:	3001      	adds	r0, #1
 8004830:	d103      	bne.n	800483a <_printf_common+0xb6>
 8004832:	f04f 30ff 	mov.w	r0, #4294967295
 8004836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483a:	3501      	adds	r5, #1
 800483c:	e7c1      	b.n	80047c2 <_printf_common+0x3e>
 800483e:	2030      	movs	r0, #48	@ 0x30
 8004840:	18e1      	adds	r1, r4, r3
 8004842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800484c:	4422      	add	r2, r4
 800484e:	3302      	adds	r3, #2
 8004850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004854:	e7c2      	b.n	80047dc <_printf_common+0x58>
 8004856:	2301      	movs	r3, #1
 8004858:	4622      	mov	r2, r4
 800485a:	4641      	mov	r1, r8
 800485c:	4638      	mov	r0, r7
 800485e:	47c8      	blx	r9
 8004860:	3001      	adds	r0, #1
 8004862:	d0e6      	beq.n	8004832 <_printf_common+0xae>
 8004864:	3601      	adds	r6, #1
 8004866:	e7d9      	b.n	800481c <_printf_common+0x98>

08004868 <_printf_i>:
 8004868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800486c:	7e0f      	ldrb	r7, [r1, #24]
 800486e:	4691      	mov	r9, r2
 8004870:	2f78      	cmp	r7, #120	@ 0x78
 8004872:	4680      	mov	r8, r0
 8004874:	460c      	mov	r4, r1
 8004876:	469a      	mov	sl, r3
 8004878:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800487a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800487e:	d807      	bhi.n	8004890 <_printf_i+0x28>
 8004880:	2f62      	cmp	r7, #98	@ 0x62
 8004882:	d80a      	bhi.n	800489a <_printf_i+0x32>
 8004884:	2f00      	cmp	r7, #0
 8004886:	f000 80d3 	beq.w	8004a30 <_printf_i+0x1c8>
 800488a:	2f58      	cmp	r7, #88	@ 0x58
 800488c:	f000 80ba 	beq.w	8004a04 <_printf_i+0x19c>
 8004890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004898:	e03a      	b.n	8004910 <_printf_i+0xa8>
 800489a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800489e:	2b15      	cmp	r3, #21
 80048a0:	d8f6      	bhi.n	8004890 <_printf_i+0x28>
 80048a2:	a101      	add	r1, pc, #4	@ (adr r1, 80048a8 <_printf_i+0x40>)
 80048a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048a8:	08004901 	.word	0x08004901
 80048ac:	08004915 	.word	0x08004915
 80048b0:	08004891 	.word	0x08004891
 80048b4:	08004891 	.word	0x08004891
 80048b8:	08004891 	.word	0x08004891
 80048bc:	08004891 	.word	0x08004891
 80048c0:	08004915 	.word	0x08004915
 80048c4:	08004891 	.word	0x08004891
 80048c8:	08004891 	.word	0x08004891
 80048cc:	08004891 	.word	0x08004891
 80048d0:	08004891 	.word	0x08004891
 80048d4:	08004a17 	.word	0x08004a17
 80048d8:	0800493f 	.word	0x0800493f
 80048dc:	080049d1 	.word	0x080049d1
 80048e0:	08004891 	.word	0x08004891
 80048e4:	08004891 	.word	0x08004891
 80048e8:	08004a39 	.word	0x08004a39
 80048ec:	08004891 	.word	0x08004891
 80048f0:	0800493f 	.word	0x0800493f
 80048f4:	08004891 	.word	0x08004891
 80048f8:	08004891 	.word	0x08004891
 80048fc:	080049d9 	.word	0x080049d9
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	1d1a      	adds	r2, r3, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6032      	str	r2, [r6, #0]
 8004908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800490c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004910:	2301      	movs	r3, #1
 8004912:	e09e      	b.n	8004a52 <_printf_i+0x1ea>
 8004914:	6833      	ldr	r3, [r6, #0]
 8004916:	6820      	ldr	r0, [r4, #0]
 8004918:	1d19      	adds	r1, r3, #4
 800491a:	6031      	str	r1, [r6, #0]
 800491c:	0606      	lsls	r6, r0, #24
 800491e:	d501      	bpl.n	8004924 <_printf_i+0xbc>
 8004920:	681d      	ldr	r5, [r3, #0]
 8004922:	e003      	b.n	800492c <_printf_i+0xc4>
 8004924:	0645      	lsls	r5, r0, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0xb8>
 8004928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800492c:	2d00      	cmp	r5, #0
 800492e:	da03      	bge.n	8004938 <_printf_i+0xd0>
 8004930:	232d      	movs	r3, #45	@ 0x2d
 8004932:	426d      	negs	r5, r5
 8004934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004938:	230a      	movs	r3, #10
 800493a:	4859      	ldr	r0, [pc, #356]	@ (8004aa0 <_printf_i+0x238>)
 800493c:	e011      	b.n	8004962 <_printf_i+0xfa>
 800493e:	6821      	ldr	r1, [r4, #0]
 8004940:	6833      	ldr	r3, [r6, #0]
 8004942:	0608      	lsls	r0, r1, #24
 8004944:	f853 5b04 	ldr.w	r5, [r3], #4
 8004948:	d402      	bmi.n	8004950 <_printf_i+0xe8>
 800494a:	0649      	lsls	r1, r1, #25
 800494c:	bf48      	it	mi
 800494e:	b2ad      	uxthmi	r5, r5
 8004950:	2f6f      	cmp	r7, #111	@ 0x6f
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	bf14      	ite	ne
 8004956:	230a      	movne	r3, #10
 8004958:	2308      	moveq	r3, #8
 800495a:	4851      	ldr	r0, [pc, #324]	@ (8004aa0 <_printf_i+0x238>)
 800495c:	2100      	movs	r1, #0
 800495e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004962:	6866      	ldr	r6, [r4, #4]
 8004964:	2e00      	cmp	r6, #0
 8004966:	bfa8      	it	ge
 8004968:	6821      	ldrge	r1, [r4, #0]
 800496a:	60a6      	str	r6, [r4, #8]
 800496c:	bfa4      	itt	ge
 800496e:	f021 0104 	bicge.w	r1, r1, #4
 8004972:	6021      	strge	r1, [r4, #0]
 8004974:	b90d      	cbnz	r5, 800497a <_printf_i+0x112>
 8004976:	2e00      	cmp	r6, #0
 8004978:	d04b      	beq.n	8004a12 <_printf_i+0x1aa>
 800497a:	4616      	mov	r6, r2
 800497c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004980:	fb03 5711 	mls	r7, r3, r1, r5
 8004984:	5dc7      	ldrb	r7, [r0, r7]
 8004986:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800498a:	462f      	mov	r7, r5
 800498c:	42bb      	cmp	r3, r7
 800498e:	460d      	mov	r5, r1
 8004990:	d9f4      	bls.n	800497c <_printf_i+0x114>
 8004992:	2b08      	cmp	r3, #8
 8004994:	d10b      	bne.n	80049ae <_printf_i+0x146>
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	07df      	lsls	r7, r3, #31
 800499a:	d508      	bpl.n	80049ae <_printf_i+0x146>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	6861      	ldr	r1, [r4, #4]
 80049a0:	4299      	cmp	r1, r3
 80049a2:	bfde      	ittt	le
 80049a4:	2330      	movle	r3, #48	@ 0x30
 80049a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049ae:	1b92      	subs	r2, r2, r6
 80049b0:	6122      	str	r2, [r4, #16]
 80049b2:	464b      	mov	r3, r9
 80049b4:	4621      	mov	r1, r4
 80049b6:	4640      	mov	r0, r8
 80049b8:	f8cd a000 	str.w	sl, [sp]
 80049bc:	aa03      	add	r2, sp, #12
 80049be:	f7ff fee1 	bl	8004784 <_printf_common>
 80049c2:	3001      	adds	r0, #1
 80049c4:	d14a      	bne.n	8004a5c <_printf_i+0x1f4>
 80049c6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ca:	b004      	add	sp, #16
 80049cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	f043 0320 	orr.w	r3, r3, #32
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	2778      	movs	r7, #120	@ 0x78
 80049da:	4832      	ldr	r0, [pc, #200]	@ (8004aa4 <_printf_i+0x23c>)
 80049dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	6831      	ldr	r1, [r6, #0]
 80049e4:	061f      	lsls	r7, r3, #24
 80049e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80049ea:	d402      	bmi.n	80049f2 <_printf_i+0x18a>
 80049ec:	065f      	lsls	r7, r3, #25
 80049ee:	bf48      	it	mi
 80049f0:	b2ad      	uxthmi	r5, r5
 80049f2:	6031      	str	r1, [r6, #0]
 80049f4:	07d9      	lsls	r1, r3, #31
 80049f6:	bf44      	itt	mi
 80049f8:	f043 0320 	orrmi.w	r3, r3, #32
 80049fc:	6023      	strmi	r3, [r4, #0]
 80049fe:	b11d      	cbz	r5, 8004a08 <_printf_i+0x1a0>
 8004a00:	2310      	movs	r3, #16
 8004a02:	e7ab      	b.n	800495c <_printf_i+0xf4>
 8004a04:	4826      	ldr	r0, [pc, #152]	@ (8004aa0 <_printf_i+0x238>)
 8004a06:	e7e9      	b.n	80049dc <_printf_i+0x174>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	f023 0320 	bic.w	r3, r3, #32
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	e7f6      	b.n	8004a00 <_printf_i+0x198>
 8004a12:	4616      	mov	r6, r2
 8004a14:	e7bd      	b.n	8004992 <_printf_i+0x12a>
 8004a16:	6833      	ldr	r3, [r6, #0]
 8004a18:	6825      	ldr	r5, [r4, #0]
 8004a1a:	1d18      	adds	r0, r3, #4
 8004a1c:	6961      	ldr	r1, [r4, #20]
 8004a1e:	6030      	str	r0, [r6, #0]
 8004a20:	062e      	lsls	r6, r5, #24
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	d501      	bpl.n	8004a2a <_printf_i+0x1c2>
 8004a26:	6019      	str	r1, [r3, #0]
 8004a28:	e002      	b.n	8004a30 <_printf_i+0x1c8>
 8004a2a:	0668      	lsls	r0, r5, #25
 8004a2c:	d5fb      	bpl.n	8004a26 <_printf_i+0x1be>
 8004a2e:	8019      	strh	r1, [r3, #0]
 8004a30:	2300      	movs	r3, #0
 8004a32:	4616      	mov	r6, r2
 8004a34:	6123      	str	r3, [r4, #16]
 8004a36:	e7bc      	b.n	80049b2 <_printf_i+0x14a>
 8004a38:	6833      	ldr	r3, [r6, #0]
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	1d1a      	adds	r2, r3, #4
 8004a3e:	6032      	str	r2, [r6, #0]
 8004a40:	681e      	ldr	r6, [r3, #0]
 8004a42:	6862      	ldr	r2, [r4, #4]
 8004a44:	4630      	mov	r0, r6
 8004a46:	f000 f9d4 	bl	8004df2 <memchr>
 8004a4a:	b108      	cbz	r0, 8004a50 <_printf_i+0x1e8>
 8004a4c:	1b80      	subs	r0, r0, r6
 8004a4e:	6060      	str	r0, [r4, #4]
 8004a50:	6863      	ldr	r3, [r4, #4]
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	2300      	movs	r3, #0
 8004a56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a5a:	e7aa      	b.n	80049b2 <_printf_i+0x14a>
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4640      	mov	r0, r8
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	47d0      	blx	sl
 8004a66:	3001      	adds	r0, #1
 8004a68:	d0ad      	beq.n	80049c6 <_printf_i+0x15e>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	079b      	lsls	r3, r3, #30
 8004a6e:	d413      	bmi.n	8004a98 <_printf_i+0x230>
 8004a70:	68e0      	ldr	r0, [r4, #12]
 8004a72:	9b03      	ldr	r3, [sp, #12]
 8004a74:	4298      	cmp	r0, r3
 8004a76:	bfb8      	it	lt
 8004a78:	4618      	movlt	r0, r3
 8004a7a:	e7a6      	b.n	80049ca <_printf_i+0x162>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	4632      	mov	r2, r6
 8004a80:	4649      	mov	r1, r9
 8004a82:	4640      	mov	r0, r8
 8004a84:	47d0      	blx	sl
 8004a86:	3001      	adds	r0, #1
 8004a88:	d09d      	beq.n	80049c6 <_printf_i+0x15e>
 8004a8a:	3501      	adds	r5, #1
 8004a8c:	68e3      	ldr	r3, [r4, #12]
 8004a8e:	9903      	ldr	r1, [sp, #12]
 8004a90:	1a5b      	subs	r3, r3, r1
 8004a92:	42ab      	cmp	r3, r5
 8004a94:	dcf2      	bgt.n	8004a7c <_printf_i+0x214>
 8004a96:	e7eb      	b.n	8004a70 <_printf_i+0x208>
 8004a98:	2500      	movs	r5, #0
 8004a9a:	f104 0619 	add.w	r6, r4, #25
 8004a9e:	e7f5      	b.n	8004a8c <_printf_i+0x224>
 8004aa0:	08006f3c 	.word	0x08006f3c
 8004aa4:	08006f4d 	.word	0x08006f4d

08004aa8 <std>:
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	4604      	mov	r4, r0
 8004aae:	e9c0 3300 	strd	r3, r3, [r0]
 8004ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ab6:	6083      	str	r3, [r0, #8]
 8004ab8:	8181      	strh	r1, [r0, #12]
 8004aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8004abc:	81c2      	strh	r2, [r0, #14]
 8004abe:	6183      	str	r3, [r0, #24]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	305c      	adds	r0, #92	@ 0x5c
 8004ac6:	f000 f914 	bl	8004cf2 <memset>
 8004aca:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <std+0x58>)
 8004acc:	6224      	str	r4, [r4, #32]
 8004ace:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <std+0x5c>)
 8004ad2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <std+0x60>)
 8004ad6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <std+0x64>)
 8004ada:	6323      	str	r3, [r4, #48]	@ 0x30
 8004adc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <std+0x68>)
 8004ade:	429c      	cmp	r4, r3
 8004ae0:	d006      	beq.n	8004af0 <std+0x48>
 8004ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ae6:	4294      	cmp	r4, r2
 8004ae8:	d002      	beq.n	8004af0 <std+0x48>
 8004aea:	33d0      	adds	r3, #208	@ 0xd0
 8004aec:	429c      	cmp	r4, r3
 8004aee:	d105      	bne.n	8004afc <std+0x54>
 8004af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af8:	f000 b978 	b.w	8004dec <__retarget_lock_init_recursive>
 8004afc:	bd10      	pop	{r4, pc}
 8004afe:	bf00      	nop
 8004b00:	08004c6d 	.word	0x08004c6d
 8004b04:	08004c8f 	.word	0x08004c8f
 8004b08:	08004cc7 	.word	0x08004cc7
 8004b0c:	08004ceb 	.word	0x08004ceb
 8004b10:	20000290 	.word	0x20000290

08004b14 <stdio_exit_handler>:
 8004b14:	4a02      	ldr	r2, [pc, #8]	@ (8004b20 <stdio_exit_handler+0xc>)
 8004b16:	4903      	ldr	r1, [pc, #12]	@ (8004b24 <stdio_exit_handler+0x10>)
 8004b18:	4803      	ldr	r0, [pc, #12]	@ (8004b28 <stdio_exit_handler+0x14>)
 8004b1a:	f000 b869 	b.w	8004bf0 <_fwalk_sglue>
 8004b1e:	bf00      	nop
 8004b20:	2000002c 	.word	0x2000002c
 8004b24:	0800675d 	.word	0x0800675d
 8004b28:	2000003c 	.word	0x2000003c

08004b2c <cleanup_stdio>:
 8004b2c:	6841      	ldr	r1, [r0, #4]
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <cleanup_stdio+0x34>)
 8004b30:	b510      	push	{r4, lr}
 8004b32:	4299      	cmp	r1, r3
 8004b34:	4604      	mov	r4, r0
 8004b36:	d001      	beq.n	8004b3c <cleanup_stdio+0x10>
 8004b38:	f001 fe10 	bl	800675c <_fflush_r>
 8004b3c:	68a1      	ldr	r1, [r4, #8]
 8004b3e:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <cleanup_stdio+0x38>)
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d002      	beq.n	8004b4a <cleanup_stdio+0x1e>
 8004b44:	4620      	mov	r0, r4
 8004b46:	f001 fe09 	bl	800675c <_fflush_r>
 8004b4a:	68e1      	ldr	r1, [r4, #12]
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <cleanup_stdio+0x3c>)
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	d004      	beq.n	8004b5c <cleanup_stdio+0x30>
 8004b52:	4620      	mov	r0, r4
 8004b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b58:	f001 be00 	b.w	800675c <_fflush_r>
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000290 	.word	0x20000290
 8004b64:	200002f8 	.word	0x200002f8
 8004b68:	20000360 	.word	0x20000360

08004b6c <global_stdio_init.part.0>:
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <global_stdio_init.part.0+0x30>)
 8004b70:	4c0b      	ldr	r4, [pc, #44]	@ (8004ba0 <global_stdio_init.part.0+0x34>)
 8004b72:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba4 <global_stdio_init.part.0+0x38>)
 8004b74:	4620      	mov	r0, r4
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	2104      	movs	r1, #4
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f7ff ff94 	bl	8004aa8 <std>
 8004b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b84:	2201      	movs	r2, #1
 8004b86:	2109      	movs	r1, #9
 8004b88:	f7ff ff8e 	bl	8004aa8 <std>
 8004b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b90:	2202      	movs	r2, #2
 8004b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b96:	2112      	movs	r1, #18
 8004b98:	f7ff bf86 	b.w	8004aa8 <std>
 8004b9c:	200003c8 	.word	0x200003c8
 8004ba0:	20000290 	.word	0x20000290
 8004ba4:	08004b15 	.word	0x08004b15

08004ba8 <__sfp_lock_acquire>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	@ (8004bb0 <__sfp_lock_acquire+0x8>)
 8004baa:	f000 b920 	b.w	8004dee <__retarget_lock_acquire_recursive>
 8004bae:	bf00      	nop
 8004bb0:	200003d1 	.word	0x200003d1

08004bb4 <__sfp_lock_release>:
 8004bb4:	4801      	ldr	r0, [pc, #4]	@ (8004bbc <__sfp_lock_release+0x8>)
 8004bb6:	f000 b91b 	b.w	8004df0 <__retarget_lock_release_recursive>
 8004bba:	bf00      	nop
 8004bbc:	200003d1 	.word	0x200003d1

08004bc0 <__sinit>:
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	f7ff fff0 	bl	8004ba8 <__sfp_lock_acquire>
 8004bc8:	6a23      	ldr	r3, [r4, #32]
 8004bca:	b11b      	cbz	r3, 8004bd4 <__sinit+0x14>
 8004bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd0:	f7ff bff0 	b.w	8004bb4 <__sfp_lock_release>
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <__sinit+0x28>)
 8004bd6:	6223      	str	r3, [r4, #32]
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__sinit+0x2c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f5      	bne.n	8004bcc <__sinit+0xc>
 8004be0:	f7ff ffc4 	bl	8004b6c <global_stdio_init.part.0>
 8004be4:	e7f2      	b.n	8004bcc <__sinit+0xc>
 8004be6:	bf00      	nop
 8004be8:	08004b2d 	.word	0x08004b2d
 8004bec:	200003c8 	.word	0x200003c8

08004bf0 <_fwalk_sglue>:
 8004bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	4688      	mov	r8, r1
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c00:	f1b9 0901 	subs.w	r9, r9, #1
 8004c04:	d505      	bpl.n	8004c12 <_fwalk_sglue+0x22>
 8004c06:	6824      	ldr	r4, [r4, #0]
 8004c08:	2c00      	cmp	r4, #0
 8004c0a:	d1f7      	bne.n	8004bfc <_fwalk_sglue+0xc>
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d907      	bls.n	8004c28 <_fwalk_sglue+0x38>
 8004c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	d003      	beq.n	8004c28 <_fwalk_sglue+0x38>
 8004c20:	4629      	mov	r1, r5
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c0      	blx	r8
 8004c26:	4306      	orrs	r6, r0
 8004c28:	3568      	adds	r5, #104	@ 0x68
 8004c2a:	e7e9      	b.n	8004c00 <_fwalk_sglue+0x10>

08004c2c <siprintf>:
 8004c2c:	b40e      	push	{r1, r2, r3}
 8004c2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c32:	b500      	push	{lr}
 8004c34:	b09c      	sub	sp, #112	@ 0x70
 8004c36:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c38:	9002      	str	r0, [sp, #8]
 8004c3a:	9006      	str	r0, [sp, #24]
 8004c3c:	9107      	str	r1, [sp, #28]
 8004c3e:	9104      	str	r1, [sp, #16]
 8004c40:	4808      	ldr	r0, [pc, #32]	@ (8004c64 <siprintf+0x38>)
 8004c42:	4909      	ldr	r1, [pc, #36]	@ (8004c68 <siprintf+0x3c>)
 8004c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c48:	9105      	str	r1, [sp, #20]
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	a902      	add	r1, sp, #8
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	f001 fc08 	bl	8006464 <_svfiprintf_r>
 8004c54:	2200      	movs	r2, #0
 8004c56:	9b02      	ldr	r3, [sp, #8]
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	b01c      	add	sp, #112	@ 0x70
 8004c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c60:	b003      	add	sp, #12
 8004c62:	4770      	bx	lr
 8004c64:	20000038 	.word	0x20000038
 8004c68:	ffff0208 	.word	0xffff0208

08004c6c <__sread>:
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	460c      	mov	r4, r1
 8004c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c74:	f000 f86c 	bl	8004d50 <_read_r>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	bfab      	itete	ge
 8004c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c80:	181b      	addge	r3, r3, r0
 8004c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c86:	bfac      	ite	ge
 8004c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c8a:	81a3      	strhlt	r3, [r4, #12]
 8004c8c:	bd10      	pop	{r4, pc}

08004c8e <__swrite>:
 8004c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c92:	461f      	mov	r7, r3
 8004c94:	898b      	ldrh	r3, [r1, #12]
 8004c96:	4605      	mov	r5, r0
 8004c98:	05db      	lsls	r3, r3, #23
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	d505      	bpl.n	8004cac <__swrite+0x1e>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca8:	f000 f840 	bl	8004d2c <_lseek_r>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	4632      	mov	r2, r6
 8004cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	463b      	mov	r3, r7
 8004cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc2:	f000 b857 	b.w	8004d74 <_write_r>

08004cc6 <__sseek>:
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	460c      	mov	r4, r1
 8004cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cce:	f000 f82d 	bl	8004d2c <_lseek_r>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	bf15      	itete	ne
 8004cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ce2:	81a3      	strheq	r3, [r4, #12]
 8004ce4:	bf18      	it	ne
 8004ce6:	81a3      	strhne	r3, [r4, #12]
 8004ce8:	bd10      	pop	{r4, pc}

08004cea <__sclose>:
 8004cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cee:	f000 b80d 	b.w	8004d0c <_close_r>

08004cf2 <memset>:
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4402      	add	r2, r0
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d100      	bne.n	8004cfc <memset+0xa>
 8004cfa:	4770      	bx	lr
 8004cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8004d00:	e7f9      	b.n	8004cf6 <memset+0x4>
	...

08004d04 <_localeconv_r>:
 8004d04:	4800      	ldr	r0, [pc, #0]	@ (8004d08 <_localeconv_r+0x4>)
 8004d06:	4770      	bx	lr
 8004d08:	20000178 	.word	0x20000178

08004d0c <_close_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4d05      	ldr	r5, [pc, #20]	@ (8004d28 <_close_r+0x1c>)
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fc fc73 	bl	8001602 <_close>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_close_r+0x1a>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_close_r+0x1a>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	200003cc 	.word	0x200003cc

08004d2c <_lseek_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	2200      	movs	r2, #0
 8004d36:	4d05      	ldr	r5, [pc, #20]	@ (8004d4c <_lseek_r+0x20>)
 8004d38:	602a      	str	r2, [r5, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f7fc fc85 	bl	800164a <_lseek>
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	d102      	bne.n	8004d4a <_lseek_r+0x1e>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	b103      	cbz	r3, 8004d4a <_lseek_r+0x1e>
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	bd38      	pop	{r3, r4, r5, pc}
 8004d4c:	200003cc 	.word	0x200003cc

08004d50 <_read_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4d05      	ldr	r5, [pc, #20]	@ (8004d70 <_read_r+0x20>)
 8004d5c:	602a      	str	r2, [r5, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f7fc fc16 	bl	8001590 <_read>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_read_r+0x1e>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_read_r+0x1e>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	200003cc 	.word	0x200003cc

08004d74 <_write_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4604      	mov	r4, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4d05      	ldr	r5, [pc, #20]	@ (8004d94 <_write_r+0x20>)
 8004d80:	602a      	str	r2, [r5, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f7fc fc21 	bl	80015ca <_write>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_write_r+0x1e>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_write_r+0x1e>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	200003cc 	.word	0x200003cc

08004d98 <__errno>:
 8004d98:	4b01      	ldr	r3, [pc, #4]	@ (8004da0 <__errno+0x8>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000038 	.word	0x20000038

08004da4 <__libc_init_array>:
 8004da4:	b570      	push	{r4, r5, r6, lr}
 8004da6:	2600      	movs	r6, #0
 8004da8:	4d0c      	ldr	r5, [pc, #48]	@ (8004ddc <__libc_init_array+0x38>)
 8004daa:	4c0d      	ldr	r4, [pc, #52]	@ (8004de0 <__libc_init_array+0x3c>)
 8004dac:	1b64      	subs	r4, r4, r5
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	42a6      	cmp	r6, r4
 8004db2:	d109      	bne.n	8004dc8 <__libc_init_array+0x24>
 8004db4:	f002 f86e 	bl	8006e94 <_init>
 8004db8:	2600      	movs	r6, #0
 8004dba:	4d0a      	ldr	r5, [pc, #40]	@ (8004de4 <__libc_init_array+0x40>)
 8004dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8004de8 <__libc_init_array+0x44>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	42a6      	cmp	r6, r4
 8004dc4:	d105      	bne.n	8004dd2 <__libc_init_array+0x2e>
 8004dc6:	bd70      	pop	{r4, r5, r6, pc}
 8004dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dcc:	4798      	blx	r3
 8004dce:	3601      	adds	r6, #1
 8004dd0:	e7ee      	b.n	8004db0 <__libc_init_array+0xc>
 8004dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd6:	4798      	blx	r3
 8004dd8:	3601      	adds	r6, #1
 8004dda:	e7f2      	b.n	8004dc2 <__libc_init_array+0x1e>
 8004ddc:	080072a0 	.word	0x080072a0
 8004de0:	080072a0 	.word	0x080072a0
 8004de4:	080072a0 	.word	0x080072a0
 8004de8:	080072a4 	.word	0x080072a4

08004dec <__retarget_lock_init_recursive>:
 8004dec:	4770      	bx	lr

08004dee <__retarget_lock_acquire_recursive>:
 8004dee:	4770      	bx	lr

08004df0 <__retarget_lock_release_recursive>:
 8004df0:	4770      	bx	lr

08004df2 <memchr>:
 8004df2:	4603      	mov	r3, r0
 8004df4:	b510      	push	{r4, lr}
 8004df6:	b2c9      	uxtb	r1, r1
 8004df8:	4402      	add	r2, r0
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	d101      	bne.n	8004e04 <memchr+0x12>
 8004e00:	2000      	movs	r0, #0
 8004e02:	e003      	b.n	8004e0c <memchr+0x1a>
 8004e04:	7804      	ldrb	r4, [r0, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	428c      	cmp	r4, r1
 8004e0a:	d1f6      	bne.n	8004dfa <memchr+0x8>
 8004e0c:	bd10      	pop	{r4, pc}

08004e0e <quorem>:
 8004e0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e12:	6903      	ldr	r3, [r0, #16]
 8004e14:	690c      	ldr	r4, [r1, #16]
 8004e16:	4607      	mov	r7, r0
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	db7e      	blt.n	8004f1a <quorem+0x10c>
 8004e1c:	3c01      	subs	r4, #1
 8004e1e:	00a3      	lsls	r3, r4, #2
 8004e20:	f100 0514 	add.w	r5, r0, #20
 8004e24:	f101 0814 	add.w	r8, r1, #20
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e44:	d32e      	bcc.n	8004ea4 <quorem+0x96>
 8004e46:	f04f 0a00 	mov.w	sl, #0
 8004e4a:	46c4      	mov	ip, r8
 8004e4c:	46ae      	mov	lr, r5
 8004e4e:	46d3      	mov	fp, sl
 8004e50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e54:	b298      	uxth	r0, r3
 8004e56:	fb06 a000 	mla	r0, r6, r0, sl
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	0c02      	lsrs	r2, r0, #16
 8004e5e:	fb06 2303 	mla	r3, r6, r3, r2
 8004e62:	f8de 2000 	ldr.w	r2, [lr]
 8004e66:	b280      	uxth	r0, r0
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	1a12      	subs	r2, r2, r0
 8004e6c:	445a      	add	r2, fp
 8004e6e:	f8de 0000 	ldr.w	r0, [lr]
 8004e72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004e7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004e80:	b292      	uxth	r2, r2
 8004e82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004e86:	45e1      	cmp	r9, ip
 8004e88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004e8c:	f84e 2b04 	str.w	r2, [lr], #4
 8004e90:	d2de      	bcs.n	8004e50 <quorem+0x42>
 8004e92:	9b00      	ldr	r3, [sp, #0]
 8004e94:	58eb      	ldr	r3, [r5, r3]
 8004e96:	b92b      	cbnz	r3, 8004ea4 <quorem+0x96>
 8004e98:	9b01      	ldr	r3, [sp, #4]
 8004e9a:	3b04      	subs	r3, #4
 8004e9c:	429d      	cmp	r5, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	d32f      	bcc.n	8004f02 <quorem+0xf4>
 8004ea2:	613c      	str	r4, [r7, #16]
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	f001 f979 	bl	800619c <__mcmp>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	db25      	blt.n	8004efa <quorem+0xec>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8004eb6:	f8d1 c000 	ldr.w	ip, [r1]
 8004eba:	fa1f fe82 	uxth.w	lr, r2
 8004ebe:	fa1f f38c 	uxth.w	r3, ip
 8004ec2:	eba3 030e 	sub.w	r3, r3, lr
 8004ec6:	4403      	add	r3, r0
 8004ec8:	0c12      	lsrs	r2, r2, #16
 8004eca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004ece:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed8:	45c1      	cmp	r9, r8
 8004eda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ede:	f841 3b04 	str.w	r3, [r1], #4
 8004ee2:	d2e6      	bcs.n	8004eb2 <quorem+0xa4>
 8004ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eec:	b922      	cbnz	r2, 8004ef8 <quorem+0xea>
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	429d      	cmp	r5, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	d30b      	bcc.n	8004f0e <quorem+0x100>
 8004ef6:	613c      	str	r4, [r7, #16]
 8004ef8:	3601      	adds	r6, #1
 8004efa:	4630      	mov	r0, r6
 8004efc:	b003      	add	sp, #12
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d1cb      	bne.n	8004ea2 <quorem+0x94>
 8004f0a:	3c01      	subs	r4, #1
 8004f0c:	e7c6      	b.n	8004e9c <quorem+0x8e>
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d1ef      	bne.n	8004ef6 <quorem+0xe8>
 8004f16:	3c01      	subs	r4, #1
 8004f18:	e7ea      	b.n	8004ef0 <quorem+0xe2>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e7ee      	b.n	8004efc <quorem+0xee>
	...

08004f20 <_dtoa_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	69c7      	ldr	r7, [r0, #28]
 8004f2a:	b097      	sub	sp, #92	@ 0x5c
 8004f2c:	4683      	mov	fp, r0
 8004f2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004f32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004f34:	b97f      	cbnz	r7, 8004f56 <_dtoa_r+0x36>
 8004f36:	2010      	movs	r0, #16
 8004f38:	f000 fe02 	bl	8005b40 <malloc>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004f42:	b920      	cbnz	r0, 8004f4e <_dtoa_r+0x2e>
 8004f44:	21ef      	movs	r1, #239	@ 0xef
 8004f46:	4ba8      	ldr	r3, [pc, #672]	@ (80051e8 <_dtoa_r+0x2c8>)
 8004f48:	48a8      	ldr	r0, [pc, #672]	@ (80051ec <_dtoa_r+0x2cc>)
 8004f4a:	f001 fc67 	bl	800681c <__assert_func>
 8004f4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f52:	6007      	str	r7, [r0, #0]
 8004f54:	60c7      	str	r7, [r0, #12]
 8004f56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	b159      	cbz	r1, 8004f76 <_dtoa_r+0x56>
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	2301      	movs	r3, #1
 8004f62:	4093      	lsls	r3, r2
 8004f64:	604a      	str	r2, [r1, #4]
 8004f66:	608b      	str	r3, [r1, #8]
 8004f68:	4658      	mov	r0, fp
 8004f6a:	f000 fedf 	bl	8005d2c <_Bfree>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	1e2b      	subs	r3, r5, #0
 8004f78:	bfaf      	iteee	ge
 8004f7a:	2300      	movge	r3, #0
 8004f7c:	2201      	movlt	r2, #1
 8004f7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004f82:	9303      	strlt	r3, [sp, #12]
 8004f84:	bfa8      	it	ge
 8004f86:	6033      	strge	r3, [r6, #0]
 8004f88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f8c:	4b98      	ldr	r3, [pc, #608]	@ (80051f0 <_dtoa_r+0x2d0>)
 8004f8e:	bfb8      	it	lt
 8004f90:	6032      	strlt	r2, [r6, #0]
 8004f92:	ea33 0308 	bics.w	r3, r3, r8
 8004f96:	d112      	bne.n	8004fbe <_dtoa_r+0x9e>
 8004f98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004f9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004fa4:	4323      	orrs	r3, r4
 8004fa6:	f000 8550 	beq.w	8005a4a <_dtoa_r+0xb2a>
 8004faa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80051f4 <_dtoa_r+0x2d4>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8552 	beq.w	8005a5a <_dtoa_r+0xb3a>
 8004fb6:	f10a 0303 	add.w	r3, sl, #3
 8004fba:	f000 bd4c 	b.w	8005a56 <_dtoa_r+0xb36>
 8004fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f7fb fceb 	bl	80009a8 <__aeabi_dcmpeq>
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	b158      	cbz	r0, 8004fee <_dtoa_r+0xce>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fde:	b113      	cbz	r3, 8004fe6 <_dtoa_r+0xc6>
 8004fe0:	4b85      	ldr	r3, [pc, #532]	@ (80051f8 <_dtoa_r+0x2d8>)
 8004fe2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80051fc <_dtoa_r+0x2dc>
 8004fea:	f000 bd36 	b.w	8005a5a <_dtoa_r+0xb3a>
 8004fee:	ab14      	add	r3, sp, #80	@ 0x50
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	ab15      	add	r3, sp, #84	@ 0x54
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4658      	mov	r0, fp
 8004ff8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004ffc:	f001 f97e 	bl	80062fc <__d2b>
 8005000:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005004:	4681      	mov	r9, r0
 8005006:	2e00      	cmp	r6, #0
 8005008:	d077      	beq.n	80050fa <_dtoa_r+0x1da>
 800500a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800500e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005010:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005018:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800501c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005020:	9712      	str	r7, [sp, #72]	@ 0x48
 8005022:	4619      	mov	r1, r3
 8005024:	2200      	movs	r2, #0
 8005026:	4b76      	ldr	r3, [pc, #472]	@ (8005200 <_dtoa_r+0x2e0>)
 8005028:	f7fb f89e 	bl	8000168 <__aeabi_dsub>
 800502c:	a368      	add	r3, pc, #416	@ (adr r3, 80051d0 <_dtoa_r+0x2b0>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb fa51 	bl	80004d8 <__aeabi_dmul>
 8005036:	a368      	add	r3, pc, #416	@ (adr r3, 80051d8 <_dtoa_r+0x2b8>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb f896 	bl	800016c <__adddf3>
 8005040:	4604      	mov	r4, r0
 8005042:	4630      	mov	r0, r6
 8005044:	460d      	mov	r5, r1
 8005046:	f7fb f9dd 	bl	8000404 <__aeabi_i2d>
 800504a:	a365      	add	r3, pc, #404	@ (adr r3, 80051e0 <_dtoa_r+0x2c0>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb fa42 	bl	80004d8 <__aeabi_dmul>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4620      	mov	r0, r4
 800505a:	4629      	mov	r1, r5
 800505c:	f7fb f886 	bl	800016c <__adddf3>
 8005060:	4604      	mov	r4, r0
 8005062:	460d      	mov	r5, r1
 8005064:	f7fb fce8 	bl	8000a38 <__aeabi_d2iz>
 8005068:	2200      	movs	r2, #0
 800506a:	4607      	mov	r7, r0
 800506c:	2300      	movs	r3, #0
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7fb fca3 	bl	80009bc <__aeabi_dcmplt>
 8005076:	b140      	cbz	r0, 800508a <_dtoa_r+0x16a>
 8005078:	4638      	mov	r0, r7
 800507a:	f7fb f9c3 	bl	8000404 <__aeabi_i2d>
 800507e:	4622      	mov	r2, r4
 8005080:	462b      	mov	r3, r5
 8005082:	f7fb fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8005086:	b900      	cbnz	r0, 800508a <_dtoa_r+0x16a>
 8005088:	3f01      	subs	r7, #1
 800508a:	2f16      	cmp	r7, #22
 800508c:	d853      	bhi.n	8005136 <_dtoa_r+0x216>
 800508e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005092:	4b5c      	ldr	r3, [pc, #368]	@ (8005204 <_dtoa_r+0x2e4>)
 8005094:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb fc8e 	bl	80009bc <__aeabi_dcmplt>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d04a      	beq.n	800513a <_dtoa_r+0x21a>
 80050a4:	2300      	movs	r3, #0
 80050a6:	3f01      	subs	r7, #1
 80050a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80050ac:	1b9b      	subs	r3, r3, r6
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	bf46      	itte	mi
 80050b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80050b6:	2300      	movmi	r3, #0
 80050b8:	f04f 0800 	movpl.w	r8, #0
 80050bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80050be:	bf48      	it	mi
 80050c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80050c2:	2f00      	cmp	r7, #0
 80050c4:	db3b      	blt.n	800513e <_dtoa_r+0x21e>
 80050c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80050ca:	443b      	add	r3, r7
 80050cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ce:	2300      	movs	r3, #0
 80050d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80050d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050d4:	2b09      	cmp	r3, #9
 80050d6:	d866      	bhi.n	80051a6 <_dtoa_r+0x286>
 80050d8:	2b05      	cmp	r3, #5
 80050da:	bfc4      	itt	gt
 80050dc:	3b04      	subgt	r3, #4
 80050de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80050e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050e2:	bfc8      	it	gt
 80050e4:	2400      	movgt	r4, #0
 80050e6:	f1a3 0302 	sub.w	r3, r3, #2
 80050ea:	bfd8      	it	le
 80050ec:	2401      	movle	r4, #1
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d864      	bhi.n	80051bc <_dtoa_r+0x29c>
 80050f2:	e8df f003 	tbb	[pc, r3]
 80050f6:	382b      	.short	0x382b
 80050f8:	5636      	.short	0x5636
 80050fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80050fe:	441e      	add	r6, r3
 8005100:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005104:	2b20      	cmp	r3, #32
 8005106:	bfc1      	itttt	gt
 8005108:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800510c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005110:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005114:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005118:	bfd6      	itet	le
 800511a:	f1c3 0320 	rsble	r3, r3, #32
 800511e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005122:	fa04 f003 	lslle.w	r0, r4, r3
 8005126:	f7fb f95d 	bl	80003e4 <__aeabi_ui2d>
 800512a:	2201      	movs	r2, #1
 800512c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005130:	3e01      	subs	r6, #1
 8005132:	9212      	str	r2, [sp, #72]	@ 0x48
 8005134:	e775      	b.n	8005022 <_dtoa_r+0x102>
 8005136:	2301      	movs	r3, #1
 8005138:	e7b6      	b.n	80050a8 <_dtoa_r+0x188>
 800513a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800513c:	e7b5      	b.n	80050aa <_dtoa_r+0x18a>
 800513e:	427b      	negs	r3, r7
 8005140:	930a      	str	r3, [sp, #40]	@ 0x28
 8005142:	2300      	movs	r3, #0
 8005144:	eba8 0807 	sub.w	r8, r8, r7
 8005148:	930e      	str	r3, [sp, #56]	@ 0x38
 800514a:	e7c2      	b.n	80050d2 <_dtoa_r+0x1b2>
 800514c:	2300      	movs	r3, #0
 800514e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005150:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005152:	2b00      	cmp	r3, #0
 8005154:	dc35      	bgt.n	80051c2 <_dtoa_r+0x2a2>
 8005156:	2301      	movs	r3, #1
 8005158:	461a      	mov	r2, r3
 800515a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800515e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005160:	e00b      	b.n	800517a <_dtoa_r+0x25a>
 8005162:	2301      	movs	r3, #1
 8005164:	e7f3      	b.n	800514e <_dtoa_r+0x22e>
 8005166:	2300      	movs	r3, #0
 8005168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800516a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	9308      	str	r3, [sp, #32]
 8005170:	3301      	adds	r3, #1
 8005172:	2b01      	cmp	r3, #1
 8005174:	9307      	str	r3, [sp, #28]
 8005176:	bfb8      	it	lt
 8005178:	2301      	movlt	r3, #1
 800517a:	2100      	movs	r1, #0
 800517c:	2204      	movs	r2, #4
 800517e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005182:	f102 0514 	add.w	r5, r2, #20
 8005186:	429d      	cmp	r5, r3
 8005188:	d91f      	bls.n	80051ca <_dtoa_r+0x2aa>
 800518a:	6041      	str	r1, [r0, #4]
 800518c:	4658      	mov	r0, fp
 800518e:	f000 fd8d 	bl	8005cac <_Balloc>
 8005192:	4682      	mov	sl, r0
 8005194:	2800      	cmp	r0, #0
 8005196:	d139      	bne.n	800520c <_dtoa_r+0x2ec>
 8005198:	4602      	mov	r2, r0
 800519a:	f240 11af 	movw	r1, #431	@ 0x1af
 800519e:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <_dtoa_r+0x2e8>)
 80051a0:	e6d2      	b.n	8004f48 <_dtoa_r+0x28>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e7e0      	b.n	8005168 <_dtoa_r+0x248>
 80051a6:	2401      	movs	r4, #1
 80051a8:	2300      	movs	r3, #0
 80051aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80051ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	2200      	movs	r2, #0
 80051b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80051b8:	2312      	movs	r3, #18
 80051ba:	e7d0      	b.n	800515e <_dtoa_r+0x23e>
 80051bc:	2301      	movs	r3, #1
 80051be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051c0:	e7f5      	b.n	80051ae <_dtoa_r+0x28e>
 80051c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80051c8:	e7d7      	b.n	800517a <_dtoa_r+0x25a>
 80051ca:	3101      	adds	r1, #1
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	e7d8      	b.n	8005182 <_dtoa_r+0x262>
 80051d0:	636f4361 	.word	0x636f4361
 80051d4:	3fd287a7 	.word	0x3fd287a7
 80051d8:	8b60c8b3 	.word	0x8b60c8b3
 80051dc:	3fc68a28 	.word	0x3fc68a28
 80051e0:	509f79fb 	.word	0x509f79fb
 80051e4:	3fd34413 	.word	0x3fd34413
 80051e8:	08006f6b 	.word	0x08006f6b
 80051ec:	08006f82 	.word	0x08006f82
 80051f0:	7ff00000 	.word	0x7ff00000
 80051f4:	08006f67 	.word	0x08006f67
 80051f8:	08006f3b 	.word	0x08006f3b
 80051fc:	08006f3a 	.word	0x08006f3a
 8005200:	3ff80000 	.word	0x3ff80000
 8005204:	08007078 	.word	0x08007078
 8005208:	08006fda 	.word	0x08006fda
 800520c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005210:	6018      	str	r0, [r3, #0]
 8005212:	9b07      	ldr	r3, [sp, #28]
 8005214:	2b0e      	cmp	r3, #14
 8005216:	f200 80a4 	bhi.w	8005362 <_dtoa_r+0x442>
 800521a:	2c00      	cmp	r4, #0
 800521c:	f000 80a1 	beq.w	8005362 <_dtoa_r+0x442>
 8005220:	2f00      	cmp	r7, #0
 8005222:	dd33      	ble.n	800528c <_dtoa_r+0x36c>
 8005224:	4b86      	ldr	r3, [pc, #536]	@ (8005440 <_dtoa_r+0x520>)
 8005226:	f007 020f 	and.w	r2, r7, #15
 800522a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800522e:	05f8      	lsls	r0, r7, #23
 8005230:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005234:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005238:	ea4f 1427 	mov.w	r4, r7, asr #4
 800523c:	d516      	bpl.n	800526c <_dtoa_r+0x34c>
 800523e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005242:	4b80      	ldr	r3, [pc, #512]	@ (8005444 <_dtoa_r+0x524>)
 8005244:	2603      	movs	r6, #3
 8005246:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800524a:	f7fb fa6f 	bl	800072c <__aeabi_ddiv>
 800524e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005252:	f004 040f 	and.w	r4, r4, #15
 8005256:	4d7b      	ldr	r5, [pc, #492]	@ (8005444 <_dtoa_r+0x524>)
 8005258:	b954      	cbnz	r4, 8005270 <_dtoa_r+0x350>
 800525a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800525e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005262:	f7fb fa63 	bl	800072c <__aeabi_ddiv>
 8005266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800526a:	e028      	b.n	80052be <_dtoa_r+0x39e>
 800526c:	2602      	movs	r6, #2
 800526e:	e7f2      	b.n	8005256 <_dtoa_r+0x336>
 8005270:	07e1      	lsls	r1, r4, #31
 8005272:	d508      	bpl.n	8005286 <_dtoa_r+0x366>
 8005274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005278:	e9d5 2300 	ldrd	r2, r3, [r5]
 800527c:	f7fb f92c 	bl	80004d8 <__aeabi_dmul>
 8005280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005284:	3601      	adds	r6, #1
 8005286:	1064      	asrs	r4, r4, #1
 8005288:	3508      	adds	r5, #8
 800528a:	e7e5      	b.n	8005258 <_dtoa_r+0x338>
 800528c:	f000 80d2 	beq.w	8005434 <_dtoa_r+0x514>
 8005290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005294:	427c      	negs	r4, r7
 8005296:	4b6a      	ldr	r3, [pc, #424]	@ (8005440 <_dtoa_r+0x520>)
 8005298:	f004 020f 	and.w	r2, r4, #15
 800529c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fb f918 	bl	80004d8 <__aeabi_dmul>
 80052a8:	2602      	movs	r6, #2
 80052aa:	2300      	movs	r3, #0
 80052ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b0:	4d64      	ldr	r5, [pc, #400]	@ (8005444 <_dtoa_r+0x524>)
 80052b2:	1124      	asrs	r4, r4, #4
 80052b4:	2c00      	cmp	r4, #0
 80052b6:	f040 80b2 	bne.w	800541e <_dtoa_r+0x4fe>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1d3      	bne.n	8005266 <_dtoa_r+0x346>
 80052be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80052c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80b7 	beq.w	8005438 <_dtoa_r+0x518>
 80052ca:	2200      	movs	r2, #0
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	4b5d      	ldr	r3, [pc, #372]	@ (8005448 <_dtoa_r+0x528>)
 80052d2:	f7fb fb73 	bl	80009bc <__aeabi_dcmplt>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f000 80ae 	beq.w	8005438 <_dtoa_r+0x518>
 80052dc:	9b07      	ldr	r3, [sp, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80aa 	beq.w	8005438 <_dtoa_r+0x518>
 80052e4:	9b08      	ldr	r3, [sp, #32]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	dd37      	ble.n	800535a <_dtoa_r+0x43a>
 80052ea:	1e7b      	subs	r3, r7, #1
 80052ec:	4620      	mov	r0, r4
 80052ee:	9304      	str	r3, [sp, #16]
 80052f0:	2200      	movs	r2, #0
 80052f2:	4629      	mov	r1, r5
 80052f4:	4b55      	ldr	r3, [pc, #340]	@ (800544c <_dtoa_r+0x52c>)
 80052f6:	f7fb f8ef 	bl	80004d8 <__aeabi_dmul>
 80052fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052fe:	9c08      	ldr	r4, [sp, #32]
 8005300:	3601      	adds	r6, #1
 8005302:	4630      	mov	r0, r6
 8005304:	f7fb f87e 	bl	8000404 <__aeabi_i2d>
 8005308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800530c:	f7fb f8e4 	bl	80004d8 <__aeabi_dmul>
 8005310:	2200      	movs	r2, #0
 8005312:	4b4f      	ldr	r3, [pc, #316]	@ (8005450 <_dtoa_r+0x530>)
 8005314:	f7fa ff2a 	bl	800016c <__adddf3>
 8005318:	4605      	mov	r5, r0
 800531a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800531e:	2c00      	cmp	r4, #0
 8005320:	f040 809a 	bne.w	8005458 <_dtoa_r+0x538>
 8005324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005328:	2200      	movs	r2, #0
 800532a:	4b4a      	ldr	r3, [pc, #296]	@ (8005454 <_dtoa_r+0x534>)
 800532c:	f7fa ff1c 	bl	8000168 <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005338:	462a      	mov	r2, r5
 800533a:	4633      	mov	r3, r6
 800533c:	f7fb fb5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005340:	2800      	cmp	r0, #0
 8005342:	f040 828e 	bne.w	8005862 <_dtoa_r+0x942>
 8005346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800534a:	462a      	mov	r2, r5
 800534c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005350:	f7fb fb34 	bl	80009bc <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	f040 8127 	bne.w	80055a8 <_dtoa_r+0x688>
 800535a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800535e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005362:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005364:	2b00      	cmp	r3, #0
 8005366:	f2c0 8163 	blt.w	8005630 <_dtoa_r+0x710>
 800536a:	2f0e      	cmp	r7, #14
 800536c:	f300 8160 	bgt.w	8005630 <_dtoa_r+0x710>
 8005370:	4b33      	ldr	r3, [pc, #204]	@ (8005440 <_dtoa_r+0x520>)
 8005372:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800537a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800537e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005380:	2b00      	cmp	r3, #0
 8005382:	da03      	bge.n	800538c <_dtoa_r+0x46c>
 8005384:	9b07      	ldr	r3, [sp, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f340 8100 	ble.w	800558c <_dtoa_r+0x66c>
 800538c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005390:	4656      	mov	r6, sl
 8005392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005396:	4620      	mov	r0, r4
 8005398:	4629      	mov	r1, r5
 800539a:	f7fb f9c7 	bl	800072c <__aeabi_ddiv>
 800539e:	f7fb fb4b 	bl	8000a38 <__aeabi_d2iz>
 80053a2:	4680      	mov	r8, r0
 80053a4:	f7fb f82e 	bl	8000404 <__aeabi_i2d>
 80053a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ac:	f7fb f894 	bl	80004d8 <__aeabi_dmul>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4620      	mov	r0, r4
 80053b6:	4629      	mov	r1, r5
 80053b8:	f7fa fed6 	bl	8000168 <__aeabi_dsub>
 80053bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80053c0:	9d07      	ldr	r5, [sp, #28]
 80053c2:	f806 4b01 	strb.w	r4, [r6], #1
 80053c6:	eba6 040a 	sub.w	r4, r6, sl
 80053ca:	42a5      	cmp	r5, r4
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	f040 8116 	bne.w	8005600 <_dtoa_r+0x6e0>
 80053d4:	f7fa feca 	bl	800016c <__adddf3>
 80053d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053dc:	4604      	mov	r4, r0
 80053de:	460d      	mov	r5, r1
 80053e0:	f7fb fb0a 	bl	80009f8 <__aeabi_dcmpgt>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	f040 80f8 	bne.w	80055da <_dtoa_r+0x6ba>
 80053ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ee:	4620      	mov	r0, r4
 80053f0:	4629      	mov	r1, r5
 80053f2:	f7fb fad9 	bl	80009a8 <__aeabi_dcmpeq>
 80053f6:	b118      	cbz	r0, 8005400 <_dtoa_r+0x4e0>
 80053f8:	f018 0f01 	tst.w	r8, #1
 80053fc:	f040 80ed 	bne.w	80055da <_dtoa_r+0x6ba>
 8005400:	4649      	mov	r1, r9
 8005402:	4658      	mov	r0, fp
 8005404:	f000 fc92 	bl	8005d2c <_Bfree>
 8005408:	2300      	movs	r3, #0
 800540a:	7033      	strb	r3, [r6, #0]
 800540c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800540e:	3701      	adds	r7, #1
 8005410:	601f      	str	r7, [r3, #0]
 8005412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8320 	beq.w	8005a5a <_dtoa_r+0xb3a>
 800541a:	601e      	str	r6, [r3, #0]
 800541c:	e31d      	b.n	8005a5a <_dtoa_r+0xb3a>
 800541e:	07e2      	lsls	r2, r4, #31
 8005420:	d505      	bpl.n	800542e <_dtoa_r+0x50e>
 8005422:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005426:	f7fb f857 	bl	80004d8 <__aeabi_dmul>
 800542a:	2301      	movs	r3, #1
 800542c:	3601      	adds	r6, #1
 800542e:	1064      	asrs	r4, r4, #1
 8005430:	3508      	adds	r5, #8
 8005432:	e73f      	b.n	80052b4 <_dtoa_r+0x394>
 8005434:	2602      	movs	r6, #2
 8005436:	e742      	b.n	80052be <_dtoa_r+0x39e>
 8005438:	9c07      	ldr	r4, [sp, #28]
 800543a:	9704      	str	r7, [sp, #16]
 800543c:	e761      	b.n	8005302 <_dtoa_r+0x3e2>
 800543e:	bf00      	nop
 8005440:	08007078 	.word	0x08007078
 8005444:	08007050 	.word	0x08007050
 8005448:	3ff00000 	.word	0x3ff00000
 800544c:	40240000 	.word	0x40240000
 8005450:	401c0000 	.word	0x401c0000
 8005454:	40140000 	.word	0x40140000
 8005458:	4b70      	ldr	r3, [pc, #448]	@ (800561c <_dtoa_r+0x6fc>)
 800545a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800545c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005460:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005464:	4454      	add	r4, sl
 8005466:	2900      	cmp	r1, #0
 8005468:	d045      	beq.n	80054f6 <_dtoa_r+0x5d6>
 800546a:	2000      	movs	r0, #0
 800546c:	496c      	ldr	r1, [pc, #432]	@ (8005620 <_dtoa_r+0x700>)
 800546e:	f7fb f95d 	bl	800072c <__aeabi_ddiv>
 8005472:	4633      	mov	r3, r6
 8005474:	462a      	mov	r2, r5
 8005476:	f7fa fe77 	bl	8000168 <__aeabi_dsub>
 800547a:	4656      	mov	r6, sl
 800547c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005484:	f7fb fad8 	bl	8000a38 <__aeabi_d2iz>
 8005488:	4605      	mov	r5, r0
 800548a:	f7fa ffbb 	bl	8000404 <__aeabi_i2d>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005496:	f7fa fe67 	bl	8000168 <__aeabi_dsub>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	3530      	adds	r5, #48	@ 0x30
 80054a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054a8:	f806 5b01 	strb.w	r5, [r6], #1
 80054ac:	f7fb fa86 	bl	80009bc <__aeabi_dcmplt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d163      	bne.n	800557c <_dtoa_r+0x65c>
 80054b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054b8:	2000      	movs	r0, #0
 80054ba:	495a      	ldr	r1, [pc, #360]	@ (8005624 <_dtoa_r+0x704>)
 80054bc:	f7fa fe54 	bl	8000168 <__aeabi_dsub>
 80054c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054c4:	f7fb fa7a 	bl	80009bc <__aeabi_dcmplt>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f040 8087 	bne.w	80055dc <_dtoa_r+0x6bc>
 80054ce:	42a6      	cmp	r6, r4
 80054d0:	f43f af43 	beq.w	800535a <_dtoa_r+0x43a>
 80054d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054d8:	2200      	movs	r2, #0
 80054da:	4b53      	ldr	r3, [pc, #332]	@ (8005628 <_dtoa_r+0x708>)
 80054dc:	f7fa fffc 	bl	80004d8 <__aeabi_dmul>
 80054e0:	2200      	movs	r2, #0
 80054e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005628 <_dtoa_r+0x708>)
 80054ec:	f7fa fff4 	bl	80004d8 <__aeabi_dmul>
 80054f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f4:	e7c4      	b.n	8005480 <_dtoa_r+0x560>
 80054f6:	4631      	mov	r1, r6
 80054f8:	4628      	mov	r0, r5
 80054fa:	f7fa ffed 	bl	80004d8 <__aeabi_dmul>
 80054fe:	4656      	mov	r6, sl
 8005500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005504:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800550a:	f7fb fa95 	bl	8000a38 <__aeabi_d2iz>
 800550e:	4605      	mov	r5, r0
 8005510:	f7fa ff78 	bl	8000404 <__aeabi_i2d>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800551c:	f7fa fe24 	bl	8000168 <__aeabi_dsub>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	3530      	adds	r5, #48	@ 0x30
 8005526:	f806 5b01 	strb.w	r5, [r6], #1
 800552a:	42a6      	cmp	r6, r4
 800552c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	d124      	bne.n	8005580 <_dtoa_r+0x660>
 8005536:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800553a:	4b39      	ldr	r3, [pc, #228]	@ (8005620 <_dtoa_r+0x700>)
 800553c:	f7fa fe16 	bl	800016c <__adddf3>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005548:	f7fb fa56 	bl	80009f8 <__aeabi_dcmpgt>
 800554c:	2800      	cmp	r0, #0
 800554e:	d145      	bne.n	80055dc <_dtoa_r+0x6bc>
 8005550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005554:	2000      	movs	r0, #0
 8005556:	4932      	ldr	r1, [pc, #200]	@ (8005620 <_dtoa_r+0x700>)
 8005558:	f7fa fe06 	bl	8000168 <__aeabi_dsub>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005564:	f7fb fa2a 	bl	80009bc <__aeabi_dcmplt>
 8005568:	2800      	cmp	r0, #0
 800556a:	f43f aef6 	beq.w	800535a <_dtoa_r+0x43a>
 800556e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005570:	1e73      	subs	r3, r6, #1
 8005572:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005578:	2b30      	cmp	r3, #48	@ 0x30
 800557a:	d0f8      	beq.n	800556e <_dtoa_r+0x64e>
 800557c:	9f04      	ldr	r7, [sp, #16]
 800557e:	e73f      	b.n	8005400 <_dtoa_r+0x4e0>
 8005580:	4b29      	ldr	r3, [pc, #164]	@ (8005628 <_dtoa_r+0x708>)
 8005582:	f7fa ffa9 	bl	80004d8 <__aeabi_dmul>
 8005586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800558a:	e7bc      	b.n	8005506 <_dtoa_r+0x5e6>
 800558c:	d10c      	bne.n	80055a8 <_dtoa_r+0x688>
 800558e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005592:	2200      	movs	r2, #0
 8005594:	4b25      	ldr	r3, [pc, #148]	@ (800562c <_dtoa_r+0x70c>)
 8005596:	f7fa ff9f 	bl	80004d8 <__aeabi_dmul>
 800559a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800559e:	f7fb fa21 	bl	80009e4 <__aeabi_dcmpge>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	f000 815b 	beq.w	800585e <_dtoa_r+0x93e>
 80055a8:	2400      	movs	r4, #0
 80055aa:	4625      	mov	r5, r4
 80055ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055ae:	4656      	mov	r6, sl
 80055b0:	43db      	mvns	r3, r3
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	2700      	movs	r7, #0
 80055b6:	4621      	mov	r1, r4
 80055b8:	4658      	mov	r0, fp
 80055ba:	f000 fbb7 	bl	8005d2c <_Bfree>
 80055be:	2d00      	cmp	r5, #0
 80055c0:	d0dc      	beq.n	800557c <_dtoa_r+0x65c>
 80055c2:	b12f      	cbz	r7, 80055d0 <_dtoa_r+0x6b0>
 80055c4:	42af      	cmp	r7, r5
 80055c6:	d003      	beq.n	80055d0 <_dtoa_r+0x6b0>
 80055c8:	4639      	mov	r1, r7
 80055ca:	4658      	mov	r0, fp
 80055cc:	f000 fbae 	bl	8005d2c <_Bfree>
 80055d0:	4629      	mov	r1, r5
 80055d2:	4658      	mov	r0, fp
 80055d4:	f000 fbaa 	bl	8005d2c <_Bfree>
 80055d8:	e7d0      	b.n	800557c <_dtoa_r+0x65c>
 80055da:	9704      	str	r7, [sp, #16]
 80055dc:	4633      	mov	r3, r6
 80055de:	461e      	mov	r6, r3
 80055e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055e4:	2a39      	cmp	r2, #57	@ 0x39
 80055e6:	d107      	bne.n	80055f8 <_dtoa_r+0x6d8>
 80055e8:	459a      	cmp	sl, r3
 80055ea:	d1f8      	bne.n	80055de <_dtoa_r+0x6be>
 80055ec:	9a04      	ldr	r2, [sp, #16]
 80055ee:	3201      	adds	r2, #1
 80055f0:	9204      	str	r2, [sp, #16]
 80055f2:	2230      	movs	r2, #48	@ 0x30
 80055f4:	f88a 2000 	strb.w	r2, [sl]
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	3201      	adds	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e7bd      	b.n	800557c <_dtoa_r+0x65c>
 8005600:	2200      	movs	r2, #0
 8005602:	4b09      	ldr	r3, [pc, #36]	@ (8005628 <_dtoa_r+0x708>)
 8005604:	f7fa ff68 	bl	80004d8 <__aeabi_dmul>
 8005608:	2200      	movs	r2, #0
 800560a:	2300      	movs	r3, #0
 800560c:	4604      	mov	r4, r0
 800560e:	460d      	mov	r5, r1
 8005610:	f7fb f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8005614:	2800      	cmp	r0, #0
 8005616:	f43f aebc 	beq.w	8005392 <_dtoa_r+0x472>
 800561a:	e6f1      	b.n	8005400 <_dtoa_r+0x4e0>
 800561c:	08007078 	.word	0x08007078
 8005620:	3fe00000 	.word	0x3fe00000
 8005624:	3ff00000 	.word	0x3ff00000
 8005628:	40240000 	.word	0x40240000
 800562c:	40140000 	.word	0x40140000
 8005630:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005632:	2a00      	cmp	r2, #0
 8005634:	f000 80db 	beq.w	80057ee <_dtoa_r+0x8ce>
 8005638:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800563a:	2a01      	cmp	r2, #1
 800563c:	f300 80bf 	bgt.w	80057be <_dtoa_r+0x89e>
 8005640:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005642:	2a00      	cmp	r2, #0
 8005644:	f000 80b7 	beq.w	80057b6 <_dtoa_r+0x896>
 8005648:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800564c:	4646      	mov	r6, r8
 800564e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005650:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005652:	2101      	movs	r1, #1
 8005654:	441a      	add	r2, r3
 8005656:	4658      	mov	r0, fp
 8005658:	4498      	add	r8, r3
 800565a:	9209      	str	r2, [sp, #36]	@ 0x24
 800565c:	f000 fc1a 	bl	8005e94 <__i2b>
 8005660:	4605      	mov	r5, r0
 8005662:	b15e      	cbz	r6, 800567c <_dtoa_r+0x75c>
 8005664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	dd08      	ble.n	800567c <_dtoa_r+0x75c>
 800566a:	42b3      	cmp	r3, r6
 800566c:	bfa8      	it	ge
 800566e:	4633      	movge	r3, r6
 8005670:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005672:	eba8 0803 	sub.w	r8, r8, r3
 8005676:	1af6      	subs	r6, r6, r3
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	9309      	str	r3, [sp, #36]	@ 0x24
 800567c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800567e:	b1f3      	cbz	r3, 80056be <_dtoa_r+0x79e>
 8005680:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80b7 	beq.w	80057f6 <_dtoa_r+0x8d6>
 8005688:	b18c      	cbz	r4, 80056ae <_dtoa_r+0x78e>
 800568a:	4629      	mov	r1, r5
 800568c:	4622      	mov	r2, r4
 800568e:	4658      	mov	r0, fp
 8005690:	f000 fcbe 	bl	8006010 <__pow5mult>
 8005694:	464a      	mov	r2, r9
 8005696:	4601      	mov	r1, r0
 8005698:	4605      	mov	r5, r0
 800569a:	4658      	mov	r0, fp
 800569c:	f000 fc10 	bl	8005ec0 <__multiply>
 80056a0:	4649      	mov	r1, r9
 80056a2:	9004      	str	r0, [sp, #16]
 80056a4:	4658      	mov	r0, fp
 80056a6:	f000 fb41 	bl	8005d2c <_Bfree>
 80056aa:	9b04      	ldr	r3, [sp, #16]
 80056ac:	4699      	mov	r9, r3
 80056ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056b0:	1b1a      	subs	r2, r3, r4
 80056b2:	d004      	beq.n	80056be <_dtoa_r+0x79e>
 80056b4:	4649      	mov	r1, r9
 80056b6:	4658      	mov	r0, fp
 80056b8:	f000 fcaa 	bl	8006010 <__pow5mult>
 80056bc:	4681      	mov	r9, r0
 80056be:	2101      	movs	r1, #1
 80056c0:	4658      	mov	r0, fp
 80056c2:	f000 fbe7 	bl	8005e94 <__i2b>
 80056c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056c8:	4604      	mov	r4, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 81c9 	beq.w	8005a62 <_dtoa_r+0xb42>
 80056d0:	461a      	mov	r2, r3
 80056d2:	4601      	mov	r1, r0
 80056d4:	4658      	mov	r0, fp
 80056d6:	f000 fc9b 	bl	8006010 <__pow5mult>
 80056da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056dc:	4604      	mov	r4, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	f300 808f 	bgt.w	8005802 <_dtoa_r+0x8e2>
 80056e4:	9b02      	ldr	r3, [sp, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 8087 	bne.w	80057fa <_dtoa_r+0x8da>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 8083 	bne.w	80057fe <_dtoa_r+0x8de>
 80056f8:	9b03      	ldr	r3, [sp, #12]
 80056fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056fe:	0d1b      	lsrs	r3, r3, #20
 8005700:	051b      	lsls	r3, r3, #20
 8005702:	b12b      	cbz	r3, 8005710 <_dtoa_r+0x7f0>
 8005704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005706:	f108 0801 	add.w	r8, r8, #1
 800570a:	3301      	adds	r3, #1
 800570c:	9309      	str	r3, [sp, #36]	@ 0x24
 800570e:	2301      	movs	r3, #1
 8005710:	930a      	str	r3, [sp, #40]	@ 0x28
 8005712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 81aa 	beq.w	8005a6e <_dtoa_r+0xb4e>
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005720:	6918      	ldr	r0, [r3, #16]
 8005722:	f000 fb6b 	bl	8005dfc <__hi0bits>
 8005726:	f1c0 0020 	rsb	r0, r0, #32
 800572a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572c:	4418      	add	r0, r3
 800572e:	f010 001f 	ands.w	r0, r0, #31
 8005732:	d071      	beq.n	8005818 <_dtoa_r+0x8f8>
 8005734:	f1c0 0320 	rsb	r3, r0, #32
 8005738:	2b04      	cmp	r3, #4
 800573a:	dd65      	ble.n	8005808 <_dtoa_r+0x8e8>
 800573c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800573e:	f1c0 001c 	rsb	r0, r0, #28
 8005742:	4403      	add	r3, r0
 8005744:	4480      	add	r8, r0
 8005746:	4406      	add	r6, r0
 8005748:	9309      	str	r3, [sp, #36]	@ 0x24
 800574a:	f1b8 0f00 	cmp.w	r8, #0
 800574e:	dd05      	ble.n	800575c <_dtoa_r+0x83c>
 8005750:	4649      	mov	r1, r9
 8005752:	4642      	mov	r2, r8
 8005754:	4658      	mov	r0, fp
 8005756:	f000 fcb5 	bl	80060c4 <__lshift>
 800575a:	4681      	mov	r9, r0
 800575c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	dd05      	ble.n	800576e <_dtoa_r+0x84e>
 8005762:	4621      	mov	r1, r4
 8005764:	461a      	mov	r2, r3
 8005766:	4658      	mov	r0, fp
 8005768:	f000 fcac 	bl	80060c4 <__lshift>
 800576c:	4604      	mov	r4, r0
 800576e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d053      	beq.n	800581c <_dtoa_r+0x8fc>
 8005774:	4621      	mov	r1, r4
 8005776:	4648      	mov	r0, r9
 8005778:	f000 fd10 	bl	800619c <__mcmp>
 800577c:	2800      	cmp	r0, #0
 800577e:	da4d      	bge.n	800581c <_dtoa_r+0x8fc>
 8005780:	1e7b      	subs	r3, r7, #1
 8005782:	4649      	mov	r1, r9
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	220a      	movs	r2, #10
 8005788:	2300      	movs	r3, #0
 800578a:	4658      	mov	r0, fp
 800578c:	f000 faf0 	bl	8005d70 <__multadd>
 8005790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005792:	4681      	mov	r9, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 816c 	beq.w	8005a72 <_dtoa_r+0xb52>
 800579a:	2300      	movs	r3, #0
 800579c:	4629      	mov	r1, r5
 800579e:	220a      	movs	r2, #10
 80057a0:	4658      	mov	r0, fp
 80057a2:	f000 fae5 	bl	8005d70 <__multadd>
 80057a6:	9b08      	ldr	r3, [sp, #32]
 80057a8:	4605      	mov	r5, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dc61      	bgt.n	8005872 <_dtoa_r+0x952>
 80057ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	dc3b      	bgt.n	800582c <_dtoa_r+0x90c>
 80057b4:	e05d      	b.n	8005872 <_dtoa_r+0x952>
 80057b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80057bc:	e746      	b.n	800564c <_dtoa_r+0x72c>
 80057be:	9b07      	ldr	r3, [sp, #28]
 80057c0:	1e5c      	subs	r4, r3, #1
 80057c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	bfbf      	itttt	lt
 80057c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80057ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80057cc:	1ae3      	sublt	r3, r4, r3
 80057ce:	18d2      	addlt	r2, r2, r3
 80057d0:	bfa8      	it	ge
 80057d2:	1b1c      	subge	r4, r3, r4
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	bfbe      	ittt	lt
 80057d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80057da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80057dc:	2400      	movlt	r4, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bfb5      	itete	lt
 80057e2:	eba8 0603 	sublt.w	r6, r8, r3
 80057e6:	4646      	movge	r6, r8
 80057e8:	2300      	movlt	r3, #0
 80057ea:	9b07      	ldrge	r3, [sp, #28]
 80057ec:	e730      	b.n	8005650 <_dtoa_r+0x730>
 80057ee:	4646      	mov	r6, r8
 80057f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80057f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80057f4:	e735      	b.n	8005662 <_dtoa_r+0x742>
 80057f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057f8:	e75c      	b.n	80056b4 <_dtoa_r+0x794>
 80057fa:	2300      	movs	r3, #0
 80057fc:	e788      	b.n	8005710 <_dtoa_r+0x7f0>
 80057fe:	9b02      	ldr	r3, [sp, #8]
 8005800:	e786      	b.n	8005710 <_dtoa_r+0x7f0>
 8005802:	2300      	movs	r3, #0
 8005804:	930a      	str	r3, [sp, #40]	@ 0x28
 8005806:	e788      	b.n	800571a <_dtoa_r+0x7fa>
 8005808:	d09f      	beq.n	800574a <_dtoa_r+0x82a>
 800580a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800580c:	331c      	adds	r3, #28
 800580e:	441a      	add	r2, r3
 8005810:	4498      	add	r8, r3
 8005812:	441e      	add	r6, r3
 8005814:	9209      	str	r2, [sp, #36]	@ 0x24
 8005816:	e798      	b.n	800574a <_dtoa_r+0x82a>
 8005818:	4603      	mov	r3, r0
 800581a:	e7f6      	b.n	800580a <_dtoa_r+0x8ea>
 800581c:	9b07      	ldr	r3, [sp, #28]
 800581e:	9704      	str	r7, [sp, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc20      	bgt.n	8005866 <_dtoa_r+0x946>
 8005824:	9308      	str	r3, [sp, #32]
 8005826:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005828:	2b02      	cmp	r3, #2
 800582a:	dd1e      	ble.n	800586a <_dtoa_r+0x94a>
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f47f aebc 	bne.w	80055ac <_dtoa_r+0x68c>
 8005834:	4621      	mov	r1, r4
 8005836:	2205      	movs	r2, #5
 8005838:	4658      	mov	r0, fp
 800583a:	f000 fa99 	bl	8005d70 <__multadd>
 800583e:	4601      	mov	r1, r0
 8005840:	4604      	mov	r4, r0
 8005842:	4648      	mov	r0, r9
 8005844:	f000 fcaa 	bl	800619c <__mcmp>
 8005848:	2800      	cmp	r0, #0
 800584a:	f77f aeaf 	ble.w	80055ac <_dtoa_r+0x68c>
 800584e:	2331      	movs	r3, #49	@ 0x31
 8005850:	4656      	mov	r6, sl
 8005852:	f806 3b01 	strb.w	r3, [r6], #1
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	e6aa      	b.n	80055b4 <_dtoa_r+0x694>
 800585e:	9c07      	ldr	r4, [sp, #28]
 8005860:	9704      	str	r7, [sp, #16]
 8005862:	4625      	mov	r5, r4
 8005864:	e7f3      	b.n	800584e <_dtoa_r+0x92e>
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	9308      	str	r3, [sp, #32]
 800586a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8104 	beq.w	8005a7a <_dtoa_r+0xb5a>
 8005872:	2e00      	cmp	r6, #0
 8005874:	dd05      	ble.n	8005882 <_dtoa_r+0x962>
 8005876:	4629      	mov	r1, r5
 8005878:	4632      	mov	r2, r6
 800587a:	4658      	mov	r0, fp
 800587c:	f000 fc22 	bl	80060c4 <__lshift>
 8005880:	4605      	mov	r5, r0
 8005882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05a      	beq.n	800593e <_dtoa_r+0xa1e>
 8005888:	4658      	mov	r0, fp
 800588a:	6869      	ldr	r1, [r5, #4]
 800588c:	f000 fa0e 	bl	8005cac <_Balloc>
 8005890:	4606      	mov	r6, r0
 8005892:	b928      	cbnz	r0, 80058a0 <_dtoa_r+0x980>
 8005894:	4602      	mov	r2, r0
 8005896:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800589a:	4b83      	ldr	r3, [pc, #524]	@ (8005aa8 <_dtoa_r+0xb88>)
 800589c:	f7ff bb54 	b.w	8004f48 <_dtoa_r+0x28>
 80058a0:	692a      	ldr	r2, [r5, #16]
 80058a2:	f105 010c 	add.w	r1, r5, #12
 80058a6:	3202      	adds	r2, #2
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	300c      	adds	r0, #12
 80058ac:	f000 ffa8 	bl	8006800 <memcpy>
 80058b0:	2201      	movs	r2, #1
 80058b2:	4631      	mov	r1, r6
 80058b4:	4658      	mov	r0, fp
 80058b6:	f000 fc05 	bl	80060c4 <__lshift>
 80058ba:	462f      	mov	r7, r5
 80058bc:	4605      	mov	r5, r0
 80058be:	f10a 0301 	add.w	r3, sl, #1
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	4453      	add	r3, sl
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	9b02      	ldr	r3, [sp, #8]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058d2:	9b07      	ldr	r3, [sp, #28]
 80058d4:	4621      	mov	r1, r4
 80058d6:	3b01      	subs	r3, #1
 80058d8:	4648      	mov	r0, r9
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	f7ff fa97 	bl	8004e0e <quorem>
 80058e0:	4639      	mov	r1, r7
 80058e2:	9008      	str	r0, [sp, #32]
 80058e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80058e8:	4648      	mov	r0, r9
 80058ea:	f000 fc57 	bl	800619c <__mcmp>
 80058ee:	462a      	mov	r2, r5
 80058f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80058f2:	4621      	mov	r1, r4
 80058f4:	4658      	mov	r0, fp
 80058f6:	f000 fc6d 	bl	80061d4 <__mdiff>
 80058fa:	68c2      	ldr	r2, [r0, #12]
 80058fc:	4606      	mov	r6, r0
 80058fe:	bb02      	cbnz	r2, 8005942 <_dtoa_r+0xa22>
 8005900:	4601      	mov	r1, r0
 8005902:	4648      	mov	r0, r9
 8005904:	f000 fc4a 	bl	800619c <__mcmp>
 8005908:	4602      	mov	r2, r0
 800590a:	4631      	mov	r1, r6
 800590c:	4658      	mov	r0, fp
 800590e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005910:	f000 fa0c 	bl	8005d2c <_Bfree>
 8005914:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005916:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005918:	9e07      	ldr	r6, [sp, #28]
 800591a:	ea43 0102 	orr.w	r1, r3, r2
 800591e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005920:	4319      	orrs	r1, r3
 8005922:	d110      	bne.n	8005946 <_dtoa_r+0xa26>
 8005924:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005928:	d029      	beq.n	800597e <_dtoa_r+0xa5e>
 800592a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	dd02      	ble.n	8005936 <_dtoa_r+0xa16>
 8005930:	9b08      	ldr	r3, [sp, #32]
 8005932:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005936:	9b02      	ldr	r3, [sp, #8]
 8005938:	f883 8000 	strb.w	r8, [r3]
 800593c:	e63b      	b.n	80055b6 <_dtoa_r+0x696>
 800593e:	4628      	mov	r0, r5
 8005940:	e7bb      	b.n	80058ba <_dtoa_r+0x99a>
 8005942:	2201      	movs	r2, #1
 8005944:	e7e1      	b.n	800590a <_dtoa_r+0x9ea>
 8005946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	db04      	blt.n	8005956 <_dtoa_r+0xa36>
 800594c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800594e:	430b      	orrs	r3, r1
 8005950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005952:	430b      	orrs	r3, r1
 8005954:	d120      	bne.n	8005998 <_dtoa_r+0xa78>
 8005956:	2a00      	cmp	r2, #0
 8005958:	dded      	ble.n	8005936 <_dtoa_r+0xa16>
 800595a:	4649      	mov	r1, r9
 800595c:	2201      	movs	r2, #1
 800595e:	4658      	mov	r0, fp
 8005960:	f000 fbb0 	bl	80060c4 <__lshift>
 8005964:	4621      	mov	r1, r4
 8005966:	4681      	mov	r9, r0
 8005968:	f000 fc18 	bl	800619c <__mcmp>
 800596c:	2800      	cmp	r0, #0
 800596e:	dc03      	bgt.n	8005978 <_dtoa_r+0xa58>
 8005970:	d1e1      	bne.n	8005936 <_dtoa_r+0xa16>
 8005972:	f018 0f01 	tst.w	r8, #1
 8005976:	d0de      	beq.n	8005936 <_dtoa_r+0xa16>
 8005978:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800597c:	d1d8      	bne.n	8005930 <_dtoa_r+0xa10>
 800597e:	2339      	movs	r3, #57	@ 0x39
 8005980:	9a02      	ldr	r2, [sp, #8]
 8005982:	7013      	strb	r3, [r2, #0]
 8005984:	4633      	mov	r3, r6
 8005986:	461e      	mov	r6, r3
 8005988:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800598c:	3b01      	subs	r3, #1
 800598e:	2a39      	cmp	r2, #57	@ 0x39
 8005990:	d052      	beq.n	8005a38 <_dtoa_r+0xb18>
 8005992:	3201      	adds	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e60e      	b.n	80055b6 <_dtoa_r+0x696>
 8005998:	2a00      	cmp	r2, #0
 800599a:	dd07      	ble.n	80059ac <_dtoa_r+0xa8c>
 800599c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059a0:	d0ed      	beq.n	800597e <_dtoa_r+0xa5e>
 80059a2:	9a02      	ldr	r2, [sp, #8]
 80059a4:	f108 0301 	add.w	r3, r8, #1
 80059a8:	7013      	strb	r3, [r2, #0]
 80059aa:	e604      	b.n	80055b6 <_dtoa_r+0x696>
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	9a07      	ldr	r2, [sp, #28]
 80059b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80059b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d028      	beq.n	8005a0c <_dtoa_r+0xaec>
 80059ba:	4649      	mov	r1, r9
 80059bc:	2300      	movs	r3, #0
 80059be:	220a      	movs	r2, #10
 80059c0:	4658      	mov	r0, fp
 80059c2:	f000 f9d5 	bl	8005d70 <__multadd>
 80059c6:	42af      	cmp	r7, r5
 80059c8:	4681      	mov	r9, r0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	f04f 020a 	mov.w	r2, #10
 80059d2:	4639      	mov	r1, r7
 80059d4:	4658      	mov	r0, fp
 80059d6:	d107      	bne.n	80059e8 <_dtoa_r+0xac8>
 80059d8:	f000 f9ca 	bl	8005d70 <__multadd>
 80059dc:	4607      	mov	r7, r0
 80059de:	4605      	mov	r5, r0
 80059e0:	9b07      	ldr	r3, [sp, #28]
 80059e2:	3301      	adds	r3, #1
 80059e4:	9307      	str	r3, [sp, #28]
 80059e6:	e774      	b.n	80058d2 <_dtoa_r+0x9b2>
 80059e8:	f000 f9c2 	bl	8005d70 <__multadd>
 80059ec:	4629      	mov	r1, r5
 80059ee:	4607      	mov	r7, r0
 80059f0:	2300      	movs	r3, #0
 80059f2:	220a      	movs	r2, #10
 80059f4:	4658      	mov	r0, fp
 80059f6:	f000 f9bb 	bl	8005d70 <__multadd>
 80059fa:	4605      	mov	r5, r0
 80059fc:	e7f0      	b.n	80059e0 <_dtoa_r+0xac0>
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	2700      	movs	r7, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	bfcc      	ite	gt
 8005a06:	461e      	movgt	r6, r3
 8005a08:	2601      	movle	r6, #1
 8005a0a:	4456      	add	r6, sl
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4658      	mov	r0, fp
 8005a12:	f000 fb57 	bl	80060c4 <__lshift>
 8005a16:	4621      	mov	r1, r4
 8005a18:	4681      	mov	r9, r0
 8005a1a:	f000 fbbf 	bl	800619c <__mcmp>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	dcb0      	bgt.n	8005984 <_dtoa_r+0xa64>
 8005a22:	d102      	bne.n	8005a2a <_dtoa_r+0xb0a>
 8005a24:	f018 0f01 	tst.w	r8, #1
 8005a28:	d1ac      	bne.n	8005984 <_dtoa_r+0xa64>
 8005a2a:	4633      	mov	r3, r6
 8005a2c:	461e      	mov	r6, r3
 8005a2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a32:	2a30      	cmp	r2, #48	@ 0x30
 8005a34:	d0fa      	beq.n	8005a2c <_dtoa_r+0xb0c>
 8005a36:	e5be      	b.n	80055b6 <_dtoa_r+0x696>
 8005a38:	459a      	cmp	sl, r3
 8005a3a:	d1a4      	bne.n	8005986 <_dtoa_r+0xa66>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	9304      	str	r3, [sp, #16]
 8005a42:	2331      	movs	r3, #49	@ 0x31
 8005a44:	f88a 3000 	strb.w	r3, [sl]
 8005a48:	e5b5      	b.n	80055b6 <_dtoa_r+0x696>
 8005a4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005aac <_dtoa_r+0xb8c>
 8005a50:	b11b      	cbz	r3, 8005a5a <_dtoa_r+0xb3a>
 8005a52:	f10a 0308 	add.w	r3, sl, #8
 8005a56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	b017      	add	sp, #92	@ 0x5c
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	f77f ae3d 	ble.w	80056e4 <_dtoa_r+0x7c4>
 8005a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e65b      	b.n	800572a <_dtoa_r+0x80a>
 8005a72:	9b08      	ldr	r3, [sp, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f77f aed6 	ble.w	8005826 <_dtoa_r+0x906>
 8005a7a:	4656      	mov	r6, sl
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4648      	mov	r0, r9
 8005a80:	f7ff f9c5 	bl	8004e0e <quorem>
 8005a84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005a88:	9b08      	ldr	r3, [sp, #32]
 8005a8a:	f806 8b01 	strb.w	r8, [r6], #1
 8005a8e:	eba6 020a 	sub.w	r2, r6, sl
 8005a92:	4293      	cmp	r3, r2
 8005a94:	ddb3      	ble.n	80059fe <_dtoa_r+0xade>
 8005a96:	4649      	mov	r1, r9
 8005a98:	2300      	movs	r3, #0
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f000 f967 	bl	8005d70 <__multadd>
 8005aa2:	4681      	mov	r9, r0
 8005aa4:	e7ea      	b.n	8005a7c <_dtoa_r+0xb5c>
 8005aa6:	bf00      	nop
 8005aa8:	08006fda 	.word	0x08006fda
 8005aac:	08006f5e 	.word	0x08006f5e

08005ab0 <_free_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d040      	beq.n	8005b3a <_free_r+0x8a>
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f0c      	subs	r4, r1, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	18e4      	addlt	r4, r4, r3
 8005ac4:	f000 f8e6 	bl	8005c94 <__malloc_lock>
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <_free_r+0x8c>)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	b933      	cbnz	r3, 8005adc <_free_r+0x2c>
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad8:	f000 b8e2 	b.w	8005ca0 <__malloc_unlock>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d908      	bls.n	8005af2 <_free_r+0x42>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf01      	itttt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	1809      	addeq	r1, r1, r0
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	e7ed      	b.n	8005ace <_free_r+0x1e>
 8005af2:	461a      	mov	r2, r3
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b10b      	cbz	r3, 8005afc <_free_r+0x4c>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d9fa      	bls.n	8005af2 <_free_r+0x42>
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	1850      	adds	r0, r2, r1
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d10b      	bne.n	8005b1c <_free_r+0x6c>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	4401      	add	r1, r0
 8005b08:	1850      	adds	r0, r2, r1
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	d1e0      	bne.n	8005ad2 <_free_r+0x22>
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4408      	add	r0, r1
 8005b16:	6010      	str	r0, [r2, #0]
 8005b18:	6053      	str	r3, [r2, #4]
 8005b1a:	e7da      	b.n	8005ad2 <_free_r+0x22>
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x74>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	e7d6      	b.n	8005ad2 <_free_r+0x22>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	1821      	adds	r1, r4, r0
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	bf01      	itttt	eq
 8005b2c:	6819      	ldreq	r1, [r3, #0]
 8005b2e:	685b      	ldreq	r3, [r3, #4]
 8005b30:	1809      	addeq	r1, r1, r0
 8005b32:	6021      	streq	r1, [r4, #0]
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	6054      	str	r4, [r2, #4]
 8005b38:	e7cb      	b.n	8005ad2 <_free_r+0x22>
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200003d8 	.word	0x200003d8

08005b40 <malloc>:
 8005b40:	4b02      	ldr	r3, [pc, #8]	@ (8005b4c <malloc+0xc>)
 8005b42:	4601      	mov	r1, r0
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	f000 b825 	b.w	8005b94 <_malloc_r>
 8005b4a:	bf00      	nop
 8005b4c:	20000038 	.word	0x20000038

08005b50 <sbrk_aligned>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0f      	ldr	r6, [pc, #60]	@ (8005b90 <sbrk_aligned+0x40>)
 8005b54:	460c      	mov	r4, r1
 8005b56:	6831      	ldr	r1, [r6, #0]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	b911      	cbnz	r1, 8005b62 <sbrk_aligned+0x12>
 8005b5c:	f000 fe40 	bl	80067e0 <_sbrk_r>
 8005b60:	6030      	str	r0, [r6, #0]
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 fe3b 	bl	80067e0 <_sbrk_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d103      	bne.n	8005b76 <sbrk_aligned+0x26>
 8005b6e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b72:	4620      	mov	r0, r4
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
 8005b76:	1cc4      	adds	r4, r0, #3
 8005b78:	f024 0403 	bic.w	r4, r4, #3
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d0f8      	beq.n	8005b72 <sbrk_aligned+0x22>
 8005b80:	1a21      	subs	r1, r4, r0
 8005b82:	4628      	mov	r0, r5
 8005b84:	f000 fe2c 	bl	80067e0 <_sbrk_r>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d1f2      	bne.n	8005b72 <sbrk_aligned+0x22>
 8005b8c:	e7ef      	b.n	8005b6e <sbrk_aligned+0x1e>
 8005b8e:	bf00      	nop
 8005b90:	200003d4 	.word	0x200003d4

08005b94 <_malloc_r>:
 8005b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b98:	1ccd      	adds	r5, r1, #3
 8005b9a:	f025 0503 	bic.w	r5, r5, #3
 8005b9e:	3508      	adds	r5, #8
 8005ba0:	2d0c      	cmp	r5, #12
 8005ba2:	bf38      	it	cc
 8005ba4:	250c      	movcc	r5, #12
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	4606      	mov	r6, r0
 8005baa:	db01      	blt.n	8005bb0 <_malloc_r+0x1c>
 8005bac:	42a9      	cmp	r1, r5
 8005bae:	d904      	bls.n	8005bba <_malloc_r+0x26>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c90 <_malloc_r+0xfc>
 8005bbe:	f000 f869 	bl	8005c94 <__malloc_lock>
 8005bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc6:	461c      	mov	r4, r3
 8005bc8:	bb44      	cbnz	r4, 8005c1c <_malloc_r+0x88>
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff ffbf 	bl	8005b50 <sbrk_aligned>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	d158      	bne.n	8005c8a <_malloc_r+0xf6>
 8005bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bdc:	4627      	mov	r7, r4
 8005bde:	2f00      	cmp	r7, #0
 8005be0:	d143      	bne.n	8005c6a <_malloc_r+0xd6>
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	d04b      	beq.n	8005c7e <_malloc_r+0xea>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	4639      	mov	r1, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	eb04 0903 	add.w	r9, r4, r3
 8005bf0:	f000 fdf6 	bl	80067e0 <_sbrk_r>
 8005bf4:	4581      	cmp	r9, r0
 8005bf6:	d142      	bne.n	8005c7e <_malloc_r+0xea>
 8005bf8:	6821      	ldr	r1, [r4, #0]
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	1a6d      	subs	r5, r5, r1
 8005bfe:	4629      	mov	r1, r5
 8005c00:	f7ff ffa6 	bl	8005b50 <sbrk_aligned>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d03a      	beq.n	8005c7e <_malloc_r+0xea>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	442b      	add	r3, r5
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	bb62      	cbnz	r2, 8005c70 <_malloc_r+0xdc>
 8005c16:	f8c8 7000 	str.w	r7, [r8]
 8005c1a:	e00f      	b.n	8005c3c <_malloc_r+0xa8>
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	1b52      	subs	r2, r2, r5
 8005c20:	d420      	bmi.n	8005c64 <_malloc_r+0xd0>
 8005c22:	2a0b      	cmp	r2, #11
 8005c24:	d917      	bls.n	8005c56 <_malloc_r+0xc2>
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	6025      	str	r5, [r4, #0]
 8005c2c:	bf18      	it	ne
 8005c2e:	6059      	strne	r1, [r3, #4]
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	bf08      	it	eq
 8005c34:	f8c8 1000 	streq.w	r1, [r8]
 8005c38:	5162      	str	r2, [r4, r5]
 8005c3a:	604b      	str	r3, [r1, #4]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f82f 	bl	8005ca0 <__malloc_unlock>
 8005c42:	f104 000b 	add.w	r0, r4, #11
 8005c46:	1d23      	adds	r3, r4, #4
 8005c48:	f020 0007 	bic.w	r0, r0, #7
 8005c4c:	1ac2      	subs	r2, r0, r3
 8005c4e:	bf1c      	itt	ne
 8005c50:	1a1b      	subne	r3, r3, r0
 8005c52:	50a3      	strne	r3, [r4, r2]
 8005c54:	e7af      	b.n	8005bb6 <_malloc_r+0x22>
 8005c56:	6862      	ldr	r2, [r4, #4]
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	bf0c      	ite	eq
 8005c5c:	f8c8 2000 	streq.w	r2, [r8]
 8005c60:	605a      	strne	r2, [r3, #4]
 8005c62:	e7eb      	b.n	8005c3c <_malloc_r+0xa8>
 8005c64:	4623      	mov	r3, r4
 8005c66:	6864      	ldr	r4, [r4, #4]
 8005c68:	e7ae      	b.n	8005bc8 <_malloc_r+0x34>
 8005c6a:	463c      	mov	r4, r7
 8005c6c:	687f      	ldr	r7, [r7, #4]
 8005c6e:	e7b6      	b.n	8005bde <_malloc_r+0x4a>
 8005c70:	461a      	mov	r2, r3
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	d1fb      	bne.n	8005c70 <_malloc_r+0xdc>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6053      	str	r3, [r2, #4]
 8005c7c:	e7de      	b.n	8005c3c <_malloc_r+0xa8>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	4630      	mov	r0, r6
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	f000 f80c 	bl	8005ca0 <__malloc_unlock>
 8005c88:	e794      	b.n	8005bb4 <_malloc_r+0x20>
 8005c8a:	6005      	str	r5, [r0, #0]
 8005c8c:	e7d6      	b.n	8005c3c <_malloc_r+0xa8>
 8005c8e:	bf00      	nop
 8005c90:	200003d8 	.word	0x200003d8

08005c94 <__malloc_lock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__malloc_lock+0x8>)
 8005c96:	f7ff b8aa 	b.w	8004dee <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	200003d0 	.word	0x200003d0

08005ca0 <__malloc_unlock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__malloc_unlock+0x8>)
 8005ca2:	f7ff b8a5 	b.w	8004df0 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200003d0 	.word	0x200003d0

08005cac <_Balloc>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	69c6      	ldr	r6, [r0, #28]
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	b976      	cbnz	r6, 8005cd4 <_Balloc+0x28>
 8005cb6:	2010      	movs	r0, #16
 8005cb8:	f7ff ff42 	bl	8005b40 <malloc>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	61e0      	str	r0, [r4, #28]
 8005cc0:	b920      	cbnz	r0, 8005ccc <_Balloc+0x20>
 8005cc2:	216b      	movs	r1, #107	@ 0x6b
 8005cc4:	4b17      	ldr	r3, [pc, #92]	@ (8005d24 <_Balloc+0x78>)
 8005cc6:	4818      	ldr	r0, [pc, #96]	@ (8005d28 <_Balloc+0x7c>)
 8005cc8:	f000 fda8 	bl	800681c <__assert_func>
 8005ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd0:	6006      	str	r6, [r0, #0]
 8005cd2:	60c6      	str	r6, [r0, #12]
 8005cd4:	69e6      	ldr	r6, [r4, #28]
 8005cd6:	68f3      	ldr	r3, [r6, #12]
 8005cd8:	b183      	cbz	r3, 8005cfc <_Balloc+0x50>
 8005cda:	69e3      	ldr	r3, [r4, #28]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ce2:	b9b8      	cbnz	r0, 8005d14 <_Balloc+0x68>
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8005cea:	1d72      	adds	r2, r6, #5
 8005cec:	4620      	mov	r0, r4
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	f000 fdb2 	bl	8006858 <_calloc_r>
 8005cf4:	b160      	cbz	r0, 8005d10 <_Balloc+0x64>
 8005cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cfa:	e00e      	b.n	8005d1a <_Balloc+0x6e>
 8005cfc:	2221      	movs	r2, #33	@ 0x21
 8005cfe:	2104      	movs	r1, #4
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fda9 	bl	8006858 <_calloc_r>
 8005d06:	69e3      	ldr	r3, [r4, #28]
 8005d08:	60f0      	str	r0, [r6, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e4      	bne.n	8005cda <_Balloc+0x2e>
 8005d10:	2000      	movs	r0, #0
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d20:	e7f7      	b.n	8005d12 <_Balloc+0x66>
 8005d22:	bf00      	nop
 8005d24:	08006f6b 	.word	0x08006f6b
 8005d28:	08006feb 	.word	0x08006feb

08005d2c <_Bfree>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	69c6      	ldr	r6, [r0, #28]
 8005d30:	4605      	mov	r5, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	b976      	cbnz	r6, 8005d54 <_Bfree+0x28>
 8005d36:	2010      	movs	r0, #16
 8005d38:	f7ff ff02 	bl	8005b40 <malloc>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	61e8      	str	r0, [r5, #28]
 8005d40:	b920      	cbnz	r0, 8005d4c <_Bfree+0x20>
 8005d42:	218f      	movs	r1, #143	@ 0x8f
 8005d44:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <_Bfree+0x3c>)
 8005d46:	4809      	ldr	r0, [pc, #36]	@ (8005d6c <_Bfree+0x40>)
 8005d48:	f000 fd68 	bl	800681c <__assert_func>
 8005d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d50:	6006      	str	r6, [r0, #0]
 8005d52:	60c6      	str	r6, [r0, #12]
 8005d54:	b13c      	cbz	r4, 8005d66 <_Bfree+0x3a>
 8005d56:	69eb      	ldr	r3, [r5, #28]
 8005d58:	6862      	ldr	r2, [r4, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d60:	6021      	str	r1, [r4, #0]
 8005d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	08006f6b 	.word	0x08006f6b
 8005d6c:	08006feb 	.word	0x08006feb

08005d70 <__multadd>:
 8005d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d74:	4607      	mov	r7, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461e      	mov	r6, r3
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	690d      	ldr	r5, [r1, #16]
 8005d7e:	f101 0c14 	add.w	ip, r1, #20
 8005d82:	f8dc 3000 	ldr.w	r3, [ip]
 8005d86:	3001      	adds	r0, #1
 8005d88:	b299      	uxth	r1, r3
 8005d8a:	fb02 6101 	mla	r1, r2, r1, r6
 8005d8e:	0c1e      	lsrs	r6, r3, #16
 8005d90:	0c0b      	lsrs	r3, r1, #16
 8005d92:	fb02 3306 	mla	r3, r2, r6, r3
 8005d96:	b289      	uxth	r1, r1
 8005d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d9c:	4285      	cmp	r5, r0
 8005d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005da2:	f84c 1b04 	str.w	r1, [ip], #4
 8005da6:	dcec      	bgt.n	8005d82 <__multadd+0x12>
 8005da8:	b30e      	cbz	r6, 8005dee <__multadd+0x7e>
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc19      	bgt.n	8005de4 <__multadd+0x74>
 8005db0:	6861      	ldr	r1, [r4, #4]
 8005db2:	4638      	mov	r0, r7
 8005db4:	3101      	adds	r1, #1
 8005db6:	f7ff ff79 	bl	8005cac <_Balloc>
 8005dba:	4680      	mov	r8, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__multadd+0x5a>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	21ba      	movs	r1, #186	@ 0xba
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <__multadd+0x84>)
 8005dc4:	480c      	ldr	r0, [pc, #48]	@ (8005df8 <__multadd+0x88>)
 8005dc6:	f000 fd29 	bl	800681c <__assert_func>
 8005dca:	6922      	ldr	r2, [r4, #16]
 8005dcc:	f104 010c 	add.w	r1, r4, #12
 8005dd0:	3202      	adds	r2, #2
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	300c      	adds	r0, #12
 8005dd6:	f000 fd13 	bl	8006800 <memcpy>
 8005dda:	4621      	mov	r1, r4
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff ffa5 	bl	8005d2c <_Bfree>
 8005de2:	4644      	mov	r4, r8
 8005de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005de8:	3501      	adds	r5, #1
 8005dea:	615e      	str	r6, [r3, #20]
 8005dec:	6125      	str	r5, [r4, #16]
 8005dee:	4620      	mov	r0, r4
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	08006fda 	.word	0x08006fda
 8005df8:	08006feb 	.word	0x08006feb

08005dfc <__hi0bits>:
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005e02:	bf3a      	itte	cc
 8005e04:	0403      	lslcc	r3, r0, #16
 8005e06:	2010      	movcc	r0, #16
 8005e08:	2000      	movcs	r0, #0
 8005e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e0e:	bf3c      	itt	cc
 8005e10:	021b      	lslcc	r3, r3, #8
 8005e12:	3008      	addcc	r0, #8
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e18:	bf3c      	itt	cc
 8005e1a:	011b      	lslcc	r3, r3, #4
 8005e1c:	3004      	addcc	r0, #4
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e22:	bf3c      	itt	cc
 8005e24:	009b      	lslcc	r3, r3, #2
 8005e26:	3002      	addcc	r0, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db05      	blt.n	8005e38 <__hi0bits+0x3c>
 8005e2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005e30:	f100 0001 	add.w	r0, r0, #1
 8005e34:	bf08      	it	eq
 8005e36:	2020      	moveq	r0, #32
 8005e38:	4770      	bx	lr

08005e3a <__lo0bits>:
 8005e3a:	6803      	ldr	r3, [r0, #0]
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f013 0007 	ands.w	r0, r3, #7
 8005e42:	d00b      	beq.n	8005e5c <__lo0bits+0x22>
 8005e44:	07d9      	lsls	r1, r3, #31
 8005e46:	d421      	bmi.n	8005e8c <__lo0bits+0x52>
 8005e48:	0798      	lsls	r0, r3, #30
 8005e4a:	bf49      	itett	mi
 8005e4c:	085b      	lsrmi	r3, r3, #1
 8005e4e:	089b      	lsrpl	r3, r3, #2
 8005e50:	2001      	movmi	r0, #1
 8005e52:	6013      	strmi	r3, [r2, #0]
 8005e54:	bf5c      	itt	pl
 8005e56:	2002      	movpl	r0, #2
 8005e58:	6013      	strpl	r3, [r2, #0]
 8005e5a:	4770      	bx	lr
 8005e5c:	b299      	uxth	r1, r3
 8005e5e:	b909      	cbnz	r1, 8005e64 <__lo0bits+0x2a>
 8005e60:	2010      	movs	r0, #16
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	b2d9      	uxtb	r1, r3
 8005e66:	b909      	cbnz	r1, 8005e6c <__lo0bits+0x32>
 8005e68:	3008      	adds	r0, #8
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	0719      	lsls	r1, r3, #28
 8005e6e:	bf04      	itt	eq
 8005e70:	091b      	lsreq	r3, r3, #4
 8005e72:	3004      	addeq	r0, #4
 8005e74:	0799      	lsls	r1, r3, #30
 8005e76:	bf04      	itt	eq
 8005e78:	089b      	lsreq	r3, r3, #2
 8005e7a:	3002      	addeq	r0, #2
 8005e7c:	07d9      	lsls	r1, r3, #31
 8005e7e:	d403      	bmi.n	8005e88 <__lo0bits+0x4e>
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	f100 0001 	add.w	r0, r0, #1
 8005e86:	d003      	beq.n	8005e90 <__lo0bits+0x56>
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4770      	bx	lr
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	4770      	bx	lr
 8005e90:	2020      	movs	r0, #32
 8005e92:	4770      	bx	lr

08005e94 <__i2b>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	460c      	mov	r4, r1
 8005e98:	2101      	movs	r1, #1
 8005e9a:	f7ff ff07 	bl	8005cac <_Balloc>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	b928      	cbnz	r0, 8005eae <__i2b+0x1a>
 8005ea2:	f240 1145 	movw	r1, #325	@ 0x145
 8005ea6:	4b04      	ldr	r3, [pc, #16]	@ (8005eb8 <__i2b+0x24>)
 8005ea8:	4804      	ldr	r0, [pc, #16]	@ (8005ebc <__i2b+0x28>)
 8005eaa:	f000 fcb7 	bl	800681c <__assert_func>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	6144      	str	r4, [r0, #20]
 8005eb2:	6103      	str	r3, [r0, #16]
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	08006fda 	.word	0x08006fda
 8005ebc:	08006feb 	.word	0x08006feb

08005ec0 <__multiply>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	690a      	ldr	r2, [r1, #16]
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	460f      	mov	r7, r1
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	bfa2      	ittt	ge
 8005ed0:	4623      	movge	r3, r4
 8005ed2:	460c      	movge	r4, r1
 8005ed4:	461f      	movge	r7, r3
 8005ed6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005eda:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005ede:	68a3      	ldr	r3, [r4, #8]
 8005ee0:	6861      	ldr	r1, [r4, #4]
 8005ee2:	eb0a 0609 	add.w	r6, sl, r9
 8005ee6:	42b3      	cmp	r3, r6
 8005ee8:	b085      	sub	sp, #20
 8005eea:	bfb8      	it	lt
 8005eec:	3101      	addlt	r1, #1
 8005eee:	f7ff fedd 	bl	8005cac <_Balloc>
 8005ef2:	b930      	cbnz	r0, 8005f02 <__multiply+0x42>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005efa:	4b43      	ldr	r3, [pc, #268]	@ (8006008 <__multiply+0x148>)
 8005efc:	4843      	ldr	r0, [pc, #268]	@ (800600c <__multiply+0x14c>)
 8005efe:	f000 fc8d 	bl	800681c <__assert_func>
 8005f02:	f100 0514 	add.w	r5, r0, #20
 8005f06:	462b      	mov	r3, r5
 8005f08:	2200      	movs	r2, #0
 8005f0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f0e:	4543      	cmp	r3, r8
 8005f10:	d321      	bcc.n	8005f56 <__multiply+0x96>
 8005f12:	f107 0114 	add.w	r1, r7, #20
 8005f16:	f104 0214 	add.w	r2, r4, #20
 8005f1a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005f1e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005f22:	9302      	str	r3, [sp, #8]
 8005f24:	1b13      	subs	r3, r2, r4
 8005f26:	3b15      	subs	r3, #21
 8005f28:	f023 0303 	bic.w	r3, r3, #3
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	f104 0715 	add.w	r7, r4, #21
 8005f32:	42ba      	cmp	r2, r7
 8005f34:	bf38      	it	cc
 8005f36:	2304      	movcc	r3, #4
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	9b02      	ldr	r3, [sp, #8]
 8005f3c:	9103      	str	r1, [sp, #12]
 8005f3e:	428b      	cmp	r3, r1
 8005f40:	d80c      	bhi.n	8005f5c <__multiply+0x9c>
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	dd03      	ble.n	8005f4e <__multiply+0x8e>
 8005f46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d05a      	beq.n	8006004 <__multiply+0x144>
 8005f4e:	6106      	str	r6, [r0, #16]
 8005f50:	b005      	add	sp, #20
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	f843 2b04 	str.w	r2, [r3], #4
 8005f5a:	e7d8      	b.n	8005f0e <__multiply+0x4e>
 8005f5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f60:	f1ba 0f00 	cmp.w	sl, #0
 8005f64:	d023      	beq.n	8005fae <__multiply+0xee>
 8005f66:	46a9      	mov	r9, r5
 8005f68:	f04f 0c00 	mov.w	ip, #0
 8005f6c:	f104 0e14 	add.w	lr, r4, #20
 8005f70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f74:	f8d9 3000 	ldr.w	r3, [r9]
 8005f78:	fa1f fb87 	uxth.w	fp, r7
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f82:	4463      	add	r3, ip
 8005f84:	f8d9 c000 	ldr.w	ip, [r9]
 8005f88:	0c3f      	lsrs	r7, r7, #16
 8005f8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f8e:	fb0a c707 	mla	r7, sl, r7, ip
 8005f92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f9c:	4572      	cmp	r2, lr
 8005f9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005fa2:	f849 3b04 	str.w	r3, [r9], #4
 8005fa6:	d8e3      	bhi.n	8005f70 <__multiply+0xb0>
 8005fa8:	9b01      	ldr	r3, [sp, #4]
 8005faa:	f845 c003 	str.w	ip, [r5, r3]
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	3104      	adds	r1, #4
 8005fb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005fb6:	f1b9 0f00 	cmp.w	r9, #0
 8005fba:	d021      	beq.n	8006000 <__multiply+0x140>
 8005fbc:	46ae      	mov	lr, r5
 8005fbe:	f04f 0a00 	mov.w	sl, #0
 8005fc2:	682b      	ldr	r3, [r5, #0]
 8005fc4:	f104 0c14 	add.w	ip, r4, #20
 8005fc8:	f8bc b000 	ldrh.w	fp, [ip]
 8005fcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	fb09 770b 	mla	r7, r9, fp, r7
 8005fd6:	4457      	add	r7, sl
 8005fd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005fdc:	f84e 3b04 	str.w	r3, [lr], #4
 8005fe0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fe8:	f8be 3000 	ldrh.w	r3, [lr]
 8005fec:	4562      	cmp	r2, ip
 8005fee:	fb09 330a 	mla	r3, r9, sl, r3
 8005ff2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ffa:	d8e5      	bhi.n	8005fc8 <__multiply+0x108>
 8005ffc:	9f01      	ldr	r7, [sp, #4]
 8005ffe:	51eb      	str	r3, [r5, r7]
 8006000:	3504      	adds	r5, #4
 8006002:	e79a      	b.n	8005f3a <__multiply+0x7a>
 8006004:	3e01      	subs	r6, #1
 8006006:	e79c      	b.n	8005f42 <__multiply+0x82>
 8006008:	08006fda 	.word	0x08006fda
 800600c:	08006feb 	.word	0x08006feb

08006010 <__pow5mult>:
 8006010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006014:	4615      	mov	r5, r2
 8006016:	f012 0203 	ands.w	r2, r2, #3
 800601a:	4607      	mov	r7, r0
 800601c:	460e      	mov	r6, r1
 800601e:	d007      	beq.n	8006030 <__pow5mult+0x20>
 8006020:	4c25      	ldr	r4, [pc, #148]	@ (80060b8 <__pow5mult+0xa8>)
 8006022:	3a01      	subs	r2, #1
 8006024:	2300      	movs	r3, #0
 8006026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800602a:	f7ff fea1 	bl	8005d70 <__multadd>
 800602e:	4606      	mov	r6, r0
 8006030:	10ad      	asrs	r5, r5, #2
 8006032:	d03d      	beq.n	80060b0 <__pow5mult+0xa0>
 8006034:	69fc      	ldr	r4, [r7, #28]
 8006036:	b97c      	cbnz	r4, 8006058 <__pow5mult+0x48>
 8006038:	2010      	movs	r0, #16
 800603a:	f7ff fd81 	bl	8005b40 <malloc>
 800603e:	4602      	mov	r2, r0
 8006040:	61f8      	str	r0, [r7, #28]
 8006042:	b928      	cbnz	r0, 8006050 <__pow5mult+0x40>
 8006044:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006048:	4b1c      	ldr	r3, [pc, #112]	@ (80060bc <__pow5mult+0xac>)
 800604a:	481d      	ldr	r0, [pc, #116]	@ (80060c0 <__pow5mult+0xb0>)
 800604c:	f000 fbe6 	bl	800681c <__assert_func>
 8006050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006054:	6004      	str	r4, [r0, #0]
 8006056:	60c4      	str	r4, [r0, #12]
 8006058:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800605c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006060:	b94c      	cbnz	r4, 8006076 <__pow5mult+0x66>
 8006062:	f240 2171 	movw	r1, #625	@ 0x271
 8006066:	4638      	mov	r0, r7
 8006068:	f7ff ff14 	bl	8005e94 <__i2b>
 800606c:	2300      	movs	r3, #0
 800606e:	4604      	mov	r4, r0
 8006070:	f8c8 0008 	str.w	r0, [r8, #8]
 8006074:	6003      	str	r3, [r0, #0]
 8006076:	f04f 0900 	mov.w	r9, #0
 800607a:	07eb      	lsls	r3, r5, #31
 800607c:	d50a      	bpl.n	8006094 <__pow5mult+0x84>
 800607e:	4631      	mov	r1, r6
 8006080:	4622      	mov	r2, r4
 8006082:	4638      	mov	r0, r7
 8006084:	f7ff ff1c 	bl	8005ec0 <__multiply>
 8006088:	4680      	mov	r8, r0
 800608a:	4631      	mov	r1, r6
 800608c:	4638      	mov	r0, r7
 800608e:	f7ff fe4d 	bl	8005d2c <_Bfree>
 8006092:	4646      	mov	r6, r8
 8006094:	106d      	asrs	r5, r5, #1
 8006096:	d00b      	beq.n	80060b0 <__pow5mult+0xa0>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	b938      	cbnz	r0, 80060ac <__pow5mult+0x9c>
 800609c:	4622      	mov	r2, r4
 800609e:	4621      	mov	r1, r4
 80060a0:	4638      	mov	r0, r7
 80060a2:	f7ff ff0d 	bl	8005ec0 <__multiply>
 80060a6:	6020      	str	r0, [r4, #0]
 80060a8:	f8c0 9000 	str.w	r9, [r0]
 80060ac:	4604      	mov	r4, r0
 80060ae:	e7e4      	b.n	800607a <__pow5mult+0x6a>
 80060b0:	4630      	mov	r0, r6
 80060b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b6:	bf00      	nop
 80060b8:	08007044 	.word	0x08007044
 80060bc:	08006f6b 	.word	0x08006f6b
 80060c0:	08006feb 	.word	0x08006feb

080060c4 <__lshift>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	4607      	mov	r7, r0
 80060cc:	4691      	mov	r9, r2
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	6849      	ldr	r1, [r1, #4]
 80060d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060d6:	68a3      	ldr	r3, [r4, #8]
 80060d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060dc:	f108 0601 	add.w	r6, r8, #1
 80060e0:	42b3      	cmp	r3, r6
 80060e2:	db0b      	blt.n	80060fc <__lshift+0x38>
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff fde1 	bl	8005cac <_Balloc>
 80060ea:	4605      	mov	r5, r0
 80060ec:	b948      	cbnz	r0, 8006102 <__lshift+0x3e>
 80060ee:	4602      	mov	r2, r0
 80060f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80060f4:	4b27      	ldr	r3, [pc, #156]	@ (8006194 <__lshift+0xd0>)
 80060f6:	4828      	ldr	r0, [pc, #160]	@ (8006198 <__lshift+0xd4>)
 80060f8:	f000 fb90 	bl	800681c <__assert_func>
 80060fc:	3101      	adds	r1, #1
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	e7ee      	b.n	80060e0 <__lshift+0x1c>
 8006102:	2300      	movs	r3, #0
 8006104:	f100 0114 	add.w	r1, r0, #20
 8006108:	f100 0210 	add.w	r2, r0, #16
 800610c:	4618      	mov	r0, r3
 800610e:	4553      	cmp	r3, sl
 8006110:	db33      	blt.n	800617a <__lshift+0xb6>
 8006112:	6920      	ldr	r0, [r4, #16]
 8006114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006118:	f104 0314 	add.w	r3, r4, #20
 800611c:	f019 091f 	ands.w	r9, r9, #31
 8006120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006128:	d02b      	beq.n	8006182 <__lshift+0xbe>
 800612a:	468a      	mov	sl, r1
 800612c:	2200      	movs	r2, #0
 800612e:	f1c9 0e20 	rsb	lr, r9, #32
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	fa00 f009 	lsl.w	r0, r0, r9
 8006138:	4310      	orrs	r0, r2
 800613a:	f84a 0b04 	str.w	r0, [sl], #4
 800613e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006142:	459c      	cmp	ip, r3
 8006144:	fa22 f20e 	lsr.w	r2, r2, lr
 8006148:	d8f3      	bhi.n	8006132 <__lshift+0x6e>
 800614a:	ebac 0304 	sub.w	r3, ip, r4
 800614e:	3b15      	subs	r3, #21
 8006150:	f023 0303 	bic.w	r3, r3, #3
 8006154:	3304      	adds	r3, #4
 8006156:	f104 0015 	add.w	r0, r4, #21
 800615a:	4584      	cmp	ip, r0
 800615c:	bf38      	it	cc
 800615e:	2304      	movcc	r3, #4
 8006160:	50ca      	str	r2, [r1, r3]
 8006162:	b10a      	cbz	r2, 8006168 <__lshift+0xa4>
 8006164:	f108 0602 	add.w	r6, r8, #2
 8006168:	3e01      	subs	r6, #1
 800616a:	4638      	mov	r0, r7
 800616c:	4621      	mov	r1, r4
 800616e:	612e      	str	r6, [r5, #16]
 8006170:	f7ff fddc 	bl	8005d2c <_Bfree>
 8006174:	4628      	mov	r0, r5
 8006176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617a:	f842 0f04 	str.w	r0, [r2, #4]!
 800617e:	3301      	adds	r3, #1
 8006180:	e7c5      	b.n	800610e <__lshift+0x4a>
 8006182:	3904      	subs	r1, #4
 8006184:	f853 2b04 	ldr.w	r2, [r3], #4
 8006188:	459c      	cmp	ip, r3
 800618a:	f841 2f04 	str.w	r2, [r1, #4]!
 800618e:	d8f9      	bhi.n	8006184 <__lshift+0xc0>
 8006190:	e7ea      	b.n	8006168 <__lshift+0xa4>
 8006192:	bf00      	nop
 8006194:	08006fda 	.word	0x08006fda
 8006198:	08006feb 	.word	0x08006feb

0800619c <__mcmp>:
 800619c:	4603      	mov	r3, r0
 800619e:	690a      	ldr	r2, [r1, #16]
 80061a0:	6900      	ldr	r0, [r0, #16]
 80061a2:	b530      	push	{r4, r5, lr}
 80061a4:	1a80      	subs	r0, r0, r2
 80061a6:	d10e      	bne.n	80061c6 <__mcmp+0x2a>
 80061a8:	3314      	adds	r3, #20
 80061aa:	3114      	adds	r1, #20
 80061ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061bc:	4295      	cmp	r5, r2
 80061be:	d003      	beq.n	80061c8 <__mcmp+0x2c>
 80061c0:	d205      	bcs.n	80061ce <__mcmp+0x32>
 80061c2:	f04f 30ff 	mov.w	r0, #4294967295
 80061c6:	bd30      	pop	{r4, r5, pc}
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d3f3      	bcc.n	80061b4 <__mcmp+0x18>
 80061cc:	e7fb      	b.n	80061c6 <__mcmp+0x2a>
 80061ce:	2001      	movs	r0, #1
 80061d0:	e7f9      	b.n	80061c6 <__mcmp+0x2a>
	...

080061d4 <__mdiff>:
 80061d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	4689      	mov	r9, r1
 80061da:	4606      	mov	r6, r0
 80061dc:	4611      	mov	r1, r2
 80061de:	4648      	mov	r0, r9
 80061e0:	4614      	mov	r4, r2
 80061e2:	f7ff ffdb 	bl	800619c <__mcmp>
 80061e6:	1e05      	subs	r5, r0, #0
 80061e8:	d112      	bne.n	8006210 <__mdiff+0x3c>
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff fd5d 	bl	8005cac <_Balloc>
 80061f2:	4602      	mov	r2, r0
 80061f4:	b928      	cbnz	r0, 8006202 <__mdiff+0x2e>
 80061f6:	f240 2137 	movw	r1, #567	@ 0x237
 80061fa:	4b3e      	ldr	r3, [pc, #248]	@ (80062f4 <__mdiff+0x120>)
 80061fc:	483e      	ldr	r0, [pc, #248]	@ (80062f8 <__mdiff+0x124>)
 80061fe:	f000 fb0d 	bl	800681c <__assert_func>
 8006202:	2301      	movs	r3, #1
 8006204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006208:	4610      	mov	r0, r2
 800620a:	b003      	add	sp, #12
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	bfbc      	itt	lt
 8006212:	464b      	movlt	r3, r9
 8006214:	46a1      	movlt	r9, r4
 8006216:	4630      	mov	r0, r6
 8006218:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800621c:	bfba      	itte	lt
 800621e:	461c      	movlt	r4, r3
 8006220:	2501      	movlt	r5, #1
 8006222:	2500      	movge	r5, #0
 8006224:	f7ff fd42 	bl	8005cac <_Balloc>
 8006228:	4602      	mov	r2, r0
 800622a:	b918      	cbnz	r0, 8006234 <__mdiff+0x60>
 800622c:	f240 2145 	movw	r1, #581	@ 0x245
 8006230:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <__mdiff+0x120>)
 8006232:	e7e3      	b.n	80061fc <__mdiff+0x28>
 8006234:	f100 0b14 	add.w	fp, r0, #20
 8006238:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800623c:	f109 0310 	add.w	r3, r9, #16
 8006240:	60c5      	str	r5, [r0, #12]
 8006242:	f04f 0c00 	mov.w	ip, #0
 8006246:	f109 0514 	add.w	r5, r9, #20
 800624a:	46d9      	mov	r9, fp
 800624c:	6926      	ldr	r6, [r4, #16]
 800624e:	f104 0e14 	add.w	lr, r4, #20
 8006252:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006256:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	9b01      	ldr	r3, [sp, #4]
 800625e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006262:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006266:	b281      	uxth	r1, r0
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	fa1f f38a 	uxth.w	r3, sl
 800626e:	1a5b      	subs	r3, r3, r1
 8006270:	0c00      	lsrs	r0, r0, #16
 8006272:	4463      	add	r3, ip
 8006274:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006278:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800627c:	b29b      	uxth	r3, r3
 800627e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006282:	4576      	cmp	r6, lr
 8006284:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006288:	f849 3b04 	str.w	r3, [r9], #4
 800628c:	d8e6      	bhi.n	800625c <__mdiff+0x88>
 800628e:	1b33      	subs	r3, r6, r4
 8006290:	3b15      	subs	r3, #21
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	3415      	adds	r4, #21
 8006298:	3304      	adds	r3, #4
 800629a:	42a6      	cmp	r6, r4
 800629c:	bf38      	it	cc
 800629e:	2304      	movcc	r3, #4
 80062a0:	441d      	add	r5, r3
 80062a2:	445b      	add	r3, fp
 80062a4:	461e      	mov	r6, r3
 80062a6:	462c      	mov	r4, r5
 80062a8:	4544      	cmp	r4, r8
 80062aa:	d30e      	bcc.n	80062ca <__mdiff+0xf6>
 80062ac:	f108 0103 	add.w	r1, r8, #3
 80062b0:	1b49      	subs	r1, r1, r5
 80062b2:	f021 0103 	bic.w	r1, r1, #3
 80062b6:	3d03      	subs	r5, #3
 80062b8:	45a8      	cmp	r8, r5
 80062ba:	bf38      	it	cc
 80062bc:	2100      	movcc	r1, #0
 80062be:	440b      	add	r3, r1
 80062c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062c4:	b199      	cbz	r1, 80062ee <__mdiff+0x11a>
 80062c6:	6117      	str	r7, [r2, #16]
 80062c8:	e79e      	b.n	8006208 <__mdiff+0x34>
 80062ca:	46e6      	mov	lr, ip
 80062cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80062d0:	fa1f fc81 	uxth.w	ip, r1
 80062d4:	44f4      	add	ip, lr
 80062d6:	0c08      	lsrs	r0, r1, #16
 80062d8:	4471      	add	r1, lr
 80062da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80062de:	b289      	uxth	r1, r1
 80062e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80062e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062e8:	f846 1b04 	str.w	r1, [r6], #4
 80062ec:	e7dc      	b.n	80062a8 <__mdiff+0xd4>
 80062ee:	3f01      	subs	r7, #1
 80062f0:	e7e6      	b.n	80062c0 <__mdiff+0xec>
 80062f2:	bf00      	nop
 80062f4:	08006fda 	.word	0x08006fda
 80062f8:	08006feb 	.word	0x08006feb

080062fc <__d2b>:
 80062fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006300:	2101      	movs	r1, #1
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	9e08      	ldr	r6, [sp, #32]
 8006308:	f7ff fcd0 	bl	8005cac <_Balloc>
 800630c:	4604      	mov	r4, r0
 800630e:	b930      	cbnz	r0, 800631e <__d2b+0x22>
 8006310:	4602      	mov	r2, r0
 8006312:	f240 310f 	movw	r1, #783	@ 0x30f
 8006316:	4b23      	ldr	r3, [pc, #140]	@ (80063a4 <__d2b+0xa8>)
 8006318:	4823      	ldr	r0, [pc, #140]	@ (80063a8 <__d2b+0xac>)
 800631a:	f000 fa7f 	bl	800681c <__assert_func>
 800631e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006326:	b10d      	cbz	r5, 800632c <__d2b+0x30>
 8006328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	f1b8 0300 	subs.w	r3, r8, #0
 8006332:	d024      	beq.n	800637e <__d2b+0x82>
 8006334:	4668      	mov	r0, sp
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	f7ff fd7f 	bl	8005e3a <__lo0bits>
 800633c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006340:	b1d8      	cbz	r0, 800637a <__d2b+0x7e>
 8006342:	f1c0 0320 	rsb	r3, r0, #32
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	430b      	orrs	r3, r1
 800634c:	40c2      	lsrs	r2, r0
 800634e:	6163      	str	r3, [r4, #20]
 8006350:	9201      	str	r2, [sp, #4]
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf0c      	ite	eq
 8006358:	2201      	moveq	r2, #1
 800635a:	2202      	movne	r2, #2
 800635c:	61a3      	str	r3, [r4, #24]
 800635e:	6122      	str	r2, [r4, #16]
 8006360:	b1ad      	cbz	r5, 800638e <__d2b+0x92>
 8006362:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006366:	4405      	add	r5, r0
 8006368:	6035      	str	r5, [r6, #0]
 800636a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	6018      	str	r0, [r3, #0]
 8006372:	4620      	mov	r0, r4
 8006374:	b002      	add	sp, #8
 8006376:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800637a:	6161      	str	r1, [r4, #20]
 800637c:	e7e9      	b.n	8006352 <__d2b+0x56>
 800637e:	a801      	add	r0, sp, #4
 8006380:	f7ff fd5b 	bl	8005e3a <__lo0bits>
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	6163      	str	r3, [r4, #20]
 800638a:	3020      	adds	r0, #32
 800638c:	e7e7      	b.n	800635e <__d2b+0x62>
 800638e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006396:	6030      	str	r0, [r6, #0]
 8006398:	6918      	ldr	r0, [r3, #16]
 800639a:	f7ff fd2f 	bl	8005dfc <__hi0bits>
 800639e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063a2:	e7e4      	b.n	800636e <__d2b+0x72>
 80063a4:	08006fda 	.word	0x08006fda
 80063a8:	08006feb 	.word	0x08006feb

080063ac <__ssputs_r>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	461f      	mov	r7, r3
 80063b2:	688e      	ldr	r6, [r1, #8]
 80063b4:	4682      	mov	sl, r0
 80063b6:	42be      	cmp	r6, r7
 80063b8:	460c      	mov	r4, r1
 80063ba:	4690      	mov	r8, r2
 80063bc:	680b      	ldr	r3, [r1, #0]
 80063be:	d82d      	bhi.n	800641c <__ssputs_r+0x70>
 80063c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063c8:	d026      	beq.n	8006418 <__ssputs_r+0x6c>
 80063ca:	6965      	ldr	r5, [r4, #20]
 80063cc:	6909      	ldr	r1, [r1, #16]
 80063ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063d2:	eba3 0901 	sub.w	r9, r3, r1
 80063d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063da:	1c7b      	adds	r3, r7, #1
 80063dc:	444b      	add	r3, r9
 80063de:	106d      	asrs	r5, r5, #1
 80063e0:	429d      	cmp	r5, r3
 80063e2:	bf38      	it	cc
 80063e4:	461d      	movcc	r5, r3
 80063e6:	0553      	lsls	r3, r2, #21
 80063e8:	d527      	bpl.n	800643a <__ssputs_r+0x8e>
 80063ea:	4629      	mov	r1, r5
 80063ec:	f7ff fbd2 	bl	8005b94 <_malloc_r>
 80063f0:	4606      	mov	r6, r0
 80063f2:	b360      	cbz	r0, 800644e <__ssputs_r+0xa2>
 80063f4:	464a      	mov	r2, r9
 80063f6:	6921      	ldr	r1, [r4, #16]
 80063f8:	f000 fa02 	bl	8006800 <memcpy>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	6126      	str	r6, [r4, #16]
 800640a:	444e      	add	r6, r9
 800640c:	6026      	str	r6, [r4, #0]
 800640e:	463e      	mov	r6, r7
 8006410:	6165      	str	r5, [r4, #20]
 8006412:	eba5 0509 	sub.w	r5, r5, r9
 8006416:	60a5      	str	r5, [r4, #8]
 8006418:	42be      	cmp	r6, r7
 800641a:	d900      	bls.n	800641e <__ssputs_r+0x72>
 800641c:	463e      	mov	r6, r7
 800641e:	4632      	mov	r2, r6
 8006420:	4641      	mov	r1, r8
 8006422:	6820      	ldr	r0, [r4, #0]
 8006424:	f000 f9c2 	bl	80067ac <memmove>
 8006428:	2000      	movs	r0, #0
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	1b9b      	subs	r3, r3, r6
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	4433      	add	r3, r6
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643a:	462a      	mov	r2, r5
 800643c:	f000 fa32 	bl	80068a4 <_realloc_r>
 8006440:	4606      	mov	r6, r0
 8006442:	2800      	cmp	r0, #0
 8006444:	d1e0      	bne.n	8006408 <__ssputs_r+0x5c>
 8006446:	4650      	mov	r0, sl
 8006448:	6921      	ldr	r1, [r4, #16]
 800644a:	f7ff fb31 	bl	8005ab0 <_free_r>
 800644e:	230c      	movs	r3, #12
 8006450:	f8ca 3000 	str.w	r3, [sl]
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	f04f 30ff 	mov.w	r0, #4294967295
 800645a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	e7e9      	b.n	8006436 <__ssputs_r+0x8a>
	...

08006464 <_svfiprintf_r>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	4698      	mov	r8, r3
 800646a:	898b      	ldrh	r3, [r1, #12]
 800646c:	4607      	mov	r7, r0
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	460d      	mov	r5, r1
 8006472:	4614      	mov	r4, r2
 8006474:	b09d      	sub	sp, #116	@ 0x74
 8006476:	d510      	bpl.n	800649a <_svfiprintf_r+0x36>
 8006478:	690b      	ldr	r3, [r1, #16]
 800647a:	b973      	cbnz	r3, 800649a <_svfiprintf_r+0x36>
 800647c:	2140      	movs	r1, #64	@ 0x40
 800647e:	f7ff fb89 	bl	8005b94 <_malloc_r>
 8006482:	6028      	str	r0, [r5, #0]
 8006484:	6128      	str	r0, [r5, #16]
 8006486:	b930      	cbnz	r0, 8006496 <_svfiprintf_r+0x32>
 8006488:	230c      	movs	r3, #12
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	f04f 30ff 	mov.w	r0, #4294967295
 8006490:	b01d      	add	sp, #116	@ 0x74
 8006492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006496:	2340      	movs	r3, #64	@ 0x40
 8006498:	616b      	str	r3, [r5, #20]
 800649a:	2300      	movs	r3, #0
 800649c:	9309      	str	r3, [sp, #36]	@ 0x24
 800649e:	2320      	movs	r3, #32
 80064a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064a4:	2330      	movs	r3, #48	@ 0x30
 80064a6:	f04f 0901 	mov.w	r9, #1
 80064aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006648 <_svfiprintf_r+0x1e4>
 80064b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064b6:	4623      	mov	r3, r4
 80064b8:	469a      	mov	sl, r3
 80064ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064be:	b10a      	cbz	r2, 80064c4 <_svfiprintf_r+0x60>
 80064c0:	2a25      	cmp	r2, #37	@ 0x25
 80064c2:	d1f9      	bne.n	80064b8 <_svfiprintf_r+0x54>
 80064c4:	ebba 0b04 	subs.w	fp, sl, r4
 80064c8:	d00b      	beq.n	80064e2 <_svfiprintf_r+0x7e>
 80064ca:	465b      	mov	r3, fp
 80064cc:	4622      	mov	r2, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	4638      	mov	r0, r7
 80064d2:	f7ff ff6b 	bl	80063ac <__ssputs_r>
 80064d6:	3001      	adds	r0, #1
 80064d8:	f000 80a7 	beq.w	800662a <_svfiprintf_r+0x1c6>
 80064dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064de:	445a      	add	r2, fp
 80064e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80064e2:	f89a 3000 	ldrb.w	r3, [sl]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 809f 	beq.w	800662a <_svfiprintf_r+0x1c6>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f04f 32ff 	mov.w	r2, #4294967295
 80064f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f6:	f10a 0a01 	add.w	sl, sl, #1
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	9307      	str	r3, [sp, #28]
 80064fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006502:	931a      	str	r3, [sp, #104]	@ 0x68
 8006504:	4654      	mov	r4, sl
 8006506:	2205      	movs	r2, #5
 8006508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650c:	484e      	ldr	r0, [pc, #312]	@ (8006648 <_svfiprintf_r+0x1e4>)
 800650e:	f7fe fc70 	bl	8004df2 <memchr>
 8006512:	9a04      	ldr	r2, [sp, #16]
 8006514:	b9d8      	cbnz	r0, 800654e <_svfiprintf_r+0xea>
 8006516:	06d0      	lsls	r0, r2, #27
 8006518:	bf44      	itt	mi
 800651a:	2320      	movmi	r3, #32
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006520:	0711      	lsls	r1, r2, #28
 8006522:	bf44      	itt	mi
 8006524:	232b      	movmi	r3, #43	@ 0x2b
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800652a:	f89a 3000 	ldrb.w	r3, [sl]
 800652e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006530:	d015      	beq.n	800655e <_svfiprintf_r+0xfa>
 8006532:	4654      	mov	r4, sl
 8006534:	2000      	movs	r0, #0
 8006536:	f04f 0c0a 	mov.w	ip, #10
 800653a:	9a07      	ldr	r2, [sp, #28]
 800653c:	4621      	mov	r1, r4
 800653e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006542:	3b30      	subs	r3, #48	@ 0x30
 8006544:	2b09      	cmp	r3, #9
 8006546:	d94b      	bls.n	80065e0 <_svfiprintf_r+0x17c>
 8006548:	b1b0      	cbz	r0, 8006578 <_svfiprintf_r+0x114>
 800654a:	9207      	str	r2, [sp, #28]
 800654c:	e014      	b.n	8006578 <_svfiprintf_r+0x114>
 800654e:	eba0 0308 	sub.w	r3, r0, r8
 8006552:	fa09 f303 	lsl.w	r3, r9, r3
 8006556:	4313      	orrs	r3, r2
 8006558:	46a2      	mov	sl, r4
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	e7d2      	b.n	8006504 <_svfiprintf_r+0xa0>
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	1d19      	adds	r1, r3, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	9103      	str	r1, [sp, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfbb      	ittet	lt
 800656a:	425b      	neglt	r3, r3
 800656c:	f042 0202 	orrlt.w	r2, r2, #2
 8006570:	9307      	strge	r3, [sp, #28]
 8006572:	9307      	strlt	r3, [sp, #28]
 8006574:	bfb8      	it	lt
 8006576:	9204      	strlt	r2, [sp, #16]
 8006578:	7823      	ldrb	r3, [r4, #0]
 800657a:	2b2e      	cmp	r3, #46	@ 0x2e
 800657c:	d10a      	bne.n	8006594 <_svfiprintf_r+0x130>
 800657e:	7863      	ldrb	r3, [r4, #1]
 8006580:	2b2a      	cmp	r3, #42	@ 0x2a
 8006582:	d132      	bne.n	80065ea <_svfiprintf_r+0x186>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	3402      	adds	r4, #2
 8006588:	1d1a      	adds	r2, r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	9203      	str	r2, [sp, #12]
 800658e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800664c <_svfiprintf_r+0x1e8>
 8006598:	2203      	movs	r2, #3
 800659a:	4650      	mov	r0, sl
 800659c:	7821      	ldrb	r1, [r4, #0]
 800659e:	f7fe fc28 	bl	8004df2 <memchr>
 80065a2:	b138      	cbz	r0, 80065b4 <_svfiprintf_r+0x150>
 80065a4:	2240      	movs	r2, #64	@ 0x40
 80065a6:	9b04      	ldr	r3, [sp, #16]
 80065a8:	eba0 000a 	sub.w	r0, r0, sl
 80065ac:	4082      	lsls	r2, r0
 80065ae:	4313      	orrs	r3, r2
 80065b0:	3401      	adds	r4, #1
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	2206      	movs	r2, #6
 80065ba:	4825      	ldr	r0, [pc, #148]	@ (8006650 <_svfiprintf_r+0x1ec>)
 80065bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065c0:	f7fe fc17 	bl	8004df2 <memchr>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d036      	beq.n	8006636 <_svfiprintf_r+0x1d2>
 80065c8:	4b22      	ldr	r3, [pc, #136]	@ (8006654 <_svfiprintf_r+0x1f0>)
 80065ca:	bb1b      	cbnz	r3, 8006614 <_svfiprintf_r+0x1b0>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	3307      	adds	r3, #7
 80065d0:	f023 0307 	bic.w	r3, r3, #7
 80065d4:	3308      	adds	r3, #8
 80065d6:	9303      	str	r3, [sp, #12]
 80065d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065da:	4433      	add	r3, r6
 80065dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80065de:	e76a      	b.n	80064b6 <_svfiprintf_r+0x52>
 80065e0:	460c      	mov	r4, r1
 80065e2:	2001      	movs	r0, #1
 80065e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e8:	e7a8      	b.n	800653c <_svfiprintf_r+0xd8>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f04f 0c0a 	mov.w	ip, #10
 80065f0:	4619      	mov	r1, r3
 80065f2:	3401      	adds	r4, #1
 80065f4:	9305      	str	r3, [sp, #20]
 80065f6:	4620      	mov	r0, r4
 80065f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065fc:	3a30      	subs	r2, #48	@ 0x30
 80065fe:	2a09      	cmp	r2, #9
 8006600:	d903      	bls.n	800660a <_svfiprintf_r+0x1a6>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0c6      	beq.n	8006594 <_svfiprintf_r+0x130>
 8006606:	9105      	str	r1, [sp, #20]
 8006608:	e7c4      	b.n	8006594 <_svfiprintf_r+0x130>
 800660a:	4604      	mov	r4, r0
 800660c:	2301      	movs	r3, #1
 800660e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006612:	e7f0      	b.n	80065f6 <_svfiprintf_r+0x192>
 8006614:	ab03      	add	r3, sp, #12
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	462a      	mov	r2, r5
 800661a:	4638      	mov	r0, r7
 800661c:	4b0e      	ldr	r3, [pc, #56]	@ (8006658 <_svfiprintf_r+0x1f4>)
 800661e:	a904      	add	r1, sp, #16
 8006620:	f7fd fe84 	bl	800432c <_printf_float>
 8006624:	1c42      	adds	r2, r0, #1
 8006626:	4606      	mov	r6, r0
 8006628:	d1d6      	bne.n	80065d8 <_svfiprintf_r+0x174>
 800662a:	89ab      	ldrh	r3, [r5, #12]
 800662c:	065b      	lsls	r3, r3, #25
 800662e:	f53f af2d 	bmi.w	800648c <_svfiprintf_r+0x28>
 8006632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006634:	e72c      	b.n	8006490 <_svfiprintf_r+0x2c>
 8006636:	ab03      	add	r3, sp, #12
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	462a      	mov	r2, r5
 800663c:	4638      	mov	r0, r7
 800663e:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <_svfiprintf_r+0x1f4>)
 8006640:	a904      	add	r1, sp, #16
 8006642:	f7fe f911 	bl	8004868 <_printf_i>
 8006646:	e7ed      	b.n	8006624 <_svfiprintf_r+0x1c0>
 8006648:	08007140 	.word	0x08007140
 800664c:	08007146 	.word	0x08007146
 8006650:	0800714a 	.word	0x0800714a
 8006654:	0800432d 	.word	0x0800432d
 8006658:	080063ad 	.word	0x080063ad

0800665c <__sflush_r>:
 800665c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	0716      	lsls	r6, r2, #28
 8006664:	4605      	mov	r5, r0
 8006666:	460c      	mov	r4, r1
 8006668:	d454      	bmi.n	8006714 <__sflush_r+0xb8>
 800666a:	684b      	ldr	r3, [r1, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dc02      	bgt.n	8006676 <__sflush_r+0x1a>
 8006670:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	dd48      	ble.n	8006708 <__sflush_r+0xac>
 8006676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006678:	2e00      	cmp	r6, #0
 800667a:	d045      	beq.n	8006708 <__sflush_r+0xac>
 800667c:	2300      	movs	r3, #0
 800667e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006682:	682f      	ldr	r7, [r5, #0]
 8006684:	6a21      	ldr	r1, [r4, #32]
 8006686:	602b      	str	r3, [r5, #0]
 8006688:	d030      	beq.n	80066ec <__sflush_r+0x90>
 800668a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	0759      	lsls	r1, r3, #29
 8006690:	d505      	bpl.n	800669e <__sflush_r+0x42>
 8006692:	6863      	ldr	r3, [r4, #4]
 8006694:	1ad2      	subs	r2, r2, r3
 8006696:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006698:	b10b      	cbz	r3, 800669e <__sflush_r+0x42>
 800669a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800669c:	1ad2      	subs	r2, r2, r3
 800669e:	2300      	movs	r3, #0
 80066a0:	4628      	mov	r0, r5
 80066a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	47b0      	blx	r6
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	d106      	bne.n	80066bc <__sflush_r+0x60>
 80066ae:	6829      	ldr	r1, [r5, #0]
 80066b0:	291d      	cmp	r1, #29
 80066b2:	d82b      	bhi.n	800670c <__sflush_r+0xb0>
 80066b4:	4a28      	ldr	r2, [pc, #160]	@ (8006758 <__sflush_r+0xfc>)
 80066b6:	410a      	asrs	r2, r1
 80066b8:	07d6      	lsls	r6, r2, #31
 80066ba:	d427      	bmi.n	800670c <__sflush_r+0xb0>
 80066bc:	2200      	movs	r2, #0
 80066be:	6062      	str	r2, [r4, #4]
 80066c0:	6922      	ldr	r2, [r4, #16]
 80066c2:	04d9      	lsls	r1, r3, #19
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	d504      	bpl.n	80066d2 <__sflush_r+0x76>
 80066c8:	1c42      	adds	r2, r0, #1
 80066ca:	d101      	bne.n	80066d0 <__sflush_r+0x74>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b903      	cbnz	r3, 80066d2 <__sflush_r+0x76>
 80066d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80066d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d4:	602f      	str	r7, [r5, #0]
 80066d6:	b1b9      	cbz	r1, 8006708 <__sflush_r+0xac>
 80066d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066dc:	4299      	cmp	r1, r3
 80066de:	d002      	beq.n	80066e6 <__sflush_r+0x8a>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f7ff f9e5 	bl	8005ab0 <_free_r>
 80066e6:	2300      	movs	r3, #0
 80066e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ea:	e00d      	b.n	8006708 <__sflush_r+0xac>
 80066ec:	2301      	movs	r3, #1
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b0      	blx	r6
 80066f2:	4602      	mov	r2, r0
 80066f4:	1c50      	adds	r0, r2, #1
 80066f6:	d1c9      	bne.n	800668c <__sflush_r+0x30>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0c6      	beq.n	800668c <__sflush_r+0x30>
 80066fe:	2b1d      	cmp	r3, #29
 8006700:	d001      	beq.n	8006706 <__sflush_r+0xaa>
 8006702:	2b16      	cmp	r3, #22
 8006704:	d11d      	bne.n	8006742 <__sflush_r+0xe6>
 8006706:	602f      	str	r7, [r5, #0]
 8006708:	2000      	movs	r0, #0
 800670a:	e021      	b.n	8006750 <__sflush_r+0xf4>
 800670c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006710:	b21b      	sxth	r3, r3
 8006712:	e01a      	b.n	800674a <__sflush_r+0xee>
 8006714:	690f      	ldr	r7, [r1, #16]
 8006716:	2f00      	cmp	r7, #0
 8006718:	d0f6      	beq.n	8006708 <__sflush_r+0xac>
 800671a:	0793      	lsls	r3, r2, #30
 800671c:	bf18      	it	ne
 800671e:	2300      	movne	r3, #0
 8006720:	680e      	ldr	r6, [r1, #0]
 8006722:	bf08      	it	eq
 8006724:	694b      	ldreq	r3, [r1, #20]
 8006726:	1bf6      	subs	r6, r6, r7
 8006728:	600f      	str	r7, [r1, #0]
 800672a:	608b      	str	r3, [r1, #8]
 800672c:	2e00      	cmp	r6, #0
 800672e:	ddeb      	ble.n	8006708 <__sflush_r+0xac>
 8006730:	4633      	mov	r3, r6
 8006732:	463a      	mov	r2, r7
 8006734:	4628      	mov	r0, r5
 8006736:	6a21      	ldr	r1, [r4, #32]
 8006738:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800673c:	47e0      	blx	ip
 800673e:	2800      	cmp	r0, #0
 8006740:	dc07      	bgt.n	8006752 <__sflush_r+0xf6>
 8006742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006752:	4407      	add	r7, r0
 8006754:	1a36      	subs	r6, r6, r0
 8006756:	e7e9      	b.n	800672c <__sflush_r+0xd0>
 8006758:	dfbffffe 	.word	0xdfbffffe

0800675c <_fflush_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	690b      	ldr	r3, [r1, #16]
 8006760:	4605      	mov	r5, r0
 8006762:	460c      	mov	r4, r1
 8006764:	b913      	cbnz	r3, 800676c <_fflush_r+0x10>
 8006766:	2500      	movs	r5, #0
 8006768:	4628      	mov	r0, r5
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	b118      	cbz	r0, 8006776 <_fflush_r+0x1a>
 800676e:	6a03      	ldr	r3, [r0, #32]
 8006770:	b90b      	cbnz	r3, 8006776 <_fflush_r+0x1a>
 8006772:	f7fe fa25 	bl	8004bc0 <__sinit>
 8006776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f3      	beq.n	8006766 <_fflush_r+0xa>
 800677e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d404      	bmi.n	800678e <_fflush_r+0x32>
 8006784:	0599      	lsls	r1, r3, #22
 8006786:	d402      	bmi.n	800678e <_fflush_r+0x32>
 8006788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800678a:	f7fe fb30 	bl	8004dee <__retarget_lock_acquire_recursive>
 800678e:	4628      	mov	r0, r5
 8006790:	4621      	mov	r1, r4
 8006792:	f7ff ff63 	bl	800665c <__sflush_r>
 8006796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006798:	4605      	mov	r5, r0
 800679a:	07da      	lsls	r2, r3, #31
 800679c:	d4e4      	bmi.n	8006768 <_fflush_r+0xc>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	059b      	lsls	r3, r3, #22
 80067a2:	d4e1      	bmi.n	8006768 <_fflush_r+0xc>
 80067a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067a6:	f7fe fb23 	bl	8004df0 <__retarget_lock_release_recursive>
 80067aa:	e7dd      	b.n	8006768 <_fflush_r+0xc>

080067ac <memmove>:
 80067ac:	4288      	cmp	r0, r1
 80067ae:	b510      	push	{r4, lr}
 80067b0:	eb01 0402 	add.w	r4, r1, r2
 80067b4:	d902      	bls.n	80067bc <memmove+0x10>
 80067b6:	4284      	cmp	r4, r0
 80067b8:	4623      	mov	r3, r4
 80067ba:	d807      	bhi.n	80067cc <memmove+0x20>
 80067bc:	1e43      	subs	r3, r0, #1
 80067be:	42a1      	cmp	r1, r4
 80067c0:	d008      	beq.n	80067d4 <memmove+0x28>
 80067c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ca:	e7f8      	b.n	80067be <memmove+0x12>
 80067cc:	4601      	mov	r1, r0
 80067ce:	4402      	add	r2, r0
 80067d0:	428a      	cmp	r2, r1
 80067d2:	d100      	bne.n	80067d6 <memmove+0x2a>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067de:	e7f7      	b.n	80067d0 <memmove+0x24>

080067e0 <_sbrk_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	2300      	movs	r3, #0
 80067e4:	4d05      	ldr	r5, [pc, #20]	@ (80067fc <_sbrk_r+0x1c>)
 80067e6:	4604      	mov	r4, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fa ff3a 	bl	8001664 <_sbrk>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_sbrk_r+0x1a>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_sbrk_r+0x1a>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	200003cc 	.word	0x200003cc

08006800 <memcpy>:
 8006800:	440a      	add	r2, r1
 8006802:	4291      	cmp	r1, r2
 8006804:	f100 33ff 	add.w	r3, r0, #4294967295
 8006808:	d100      	bne.n	800680c <memcpy+0xc>
 800680a:	4770      	bx	lr
 800680c:	b510      	push	{r4, lr}
 800680e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006812:	4291      	cmp	r1, r2
 8006814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006818:	d1f9      	bne.n	800680e <memcpy+0xe>
 800681a:	bd10      	pop	{r4, pc}

0800681c <__assert_func>:
 800681c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800681e:	4614      	mov	r4, r2
 8006820:	461a      	mov	r2, r3
 8006822:	4b09      	ldr	r3, [pc, #36]	@ (8006848 <__assert_func+0x2c>)
 8006824:	4605      	mov	r5, r0
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68d8      	ldr	r0, [r3, #12]
 800682a:	b954      	cbnz	r4, 8006842 <__assert_func+0x26>
 800682c:	4b07      	ldr	r3, [pc, #28]	@ (800684c <__assert_func+0x30>)
 800682e:	461c      	mov	r4, r3
 8006830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006834:	9100      	str	r1, [sp, #0]
 8006836:	462b      	mov	r3, r5
 8006838:	4905      	ldr	r1, [pc, #20]	@ (8006850 <__assert_func+0x34>)
 800683a:	f000 f86f 	bl	800691c <fiprintf>
 800683e:	f000 f87f 	bl	8006940 <abort>
 8006842:	4b04      	ldr	r3, [pc, #16]	@ (8006854 <__assert_func+0x38>)
 8006844:	e7f4      	b.n	8006830 <__assert_func+0x14>
 8006846:	bf00      	nop
 8006848:	20000038 	.word	0x20000038
 800684c:	08007196 	.word	0x08007196
 8006850:	08007168 	.word	0x08007168
 8006854:	0800715b 	.word	0x0800715b

08006858 <_calloc_r>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	fba1 5402 	umull	r5, r4, r1, r2
 800685e:	b93c      	cbnz	r4, 8006870 <_calloc_r+0x18>
 8006860:	4629      	mov	r1, r5
 8006862:	f7ff f997 	bl	8005b94 <_malloc_r>
 8006866:	4606      	mov	r6, r0
 8006868:	b928      	cbnz	r0, 8006876 <_calloc_r+0x1e>
 800686a:	2600      	movs	r6, #0
 800686c:	4630      	mov	r0, r6
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	220c      	movs	r2, #12
 8006872:	6002      	str	r2, [r0, #0]
 8006874:	e7f9      	b.n	800686a <_calloc_r+0x12>
 8006876:	462a      	mov	r2, r5
 8006878:	4621      	mov	r1, r4
 800687a:	f7fe fa3a 	bl	8004cf2 <memset>
 800687e:	e7f5      	b.n	800686c <_calloc_r+0x14>

08006880 <__ascii_mbtowc>:
 8006880:	b082      	sub	sp, #8
 8006882:	b901      	cbnz	r1, 8006886 <__ascii_mbtowc+0x6>
 8006884:	a901      	add	r1, sp, #4
 8006886:	b142      	cbz	r2, 800689a <__ascii_mbtowc+0x1a>
 8006888:	b14b      	cbz	r3, 800689e <__ascii_mbtowc+0x1e>
 800688a:	7813      	ldrb	r3, [r2, #0]
 800688c:	600b      	str	r3, [r1, #0]
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	1e10      	subs	r0, r2, #0
 8006892:	bf18      	it	ne
 8006894:	2001      	movne	r0, #1
 8006896:	b002      	add	sp, #8
 8006898:	4770      	bx	lr
 800689a:	4610      	mov	r0, r2
 800689c:	e7fb      	b.n	8006896 <__ascii_mbtowc+0x16>
 800689e:	f06f 0001 	mvn.w	r0, #1
 80068a2:	e7f8      	b.n	8006896 <__ascii_mbtowc+0x16>

080068a4 <_realloc_r>:
 80068a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a8:	4680      	mov	r8, r0
 80068aa:	4615      	mov	r5, r2
 80068ac:	460c      	mov	r4, r1
 80068ae:	b921      	cbnz	r1, 80068ba <_realloc_r+0x16>
 80068b0:	4611      	mov	r1, r2
 80068b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b6:	f7ff b96d 	b.w	8005b94 <_malloc_r>
 80068ba:	b92a      	cbnz	r2, 80068c8 <_realloc_r+0x24>
 80068bc:	f7ff f8f8 	bl	8005ab0 <_free_r>
 80068c0:	2400      	movs	r4, #0
 80068c2:	4620      	mov	r0, r4
 80068c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c8:	f000 f841 	bl	800694e <_malloc_usable_size_r>
 80068cc:	4285      	cmp	r5, r0
 80068ce:	4606      	mov	r6, r0
 80068d0:	d802      	bhi.n	80068d8 <_realloc_r+0x34>
 80068d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80068d6:	d8f4      	bhi.n	80068c2 <_realloc_r+0x1e>
 80068d8:	4629      	mov	r1, r5
 80068da:	4640      	mov	r0, r8
 80068dc:	f7ff f95a 	bl	8005b94 <_malloc_r>
 80068e0:	4607      	mov	r7, r0
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d0ec      	beq.n	80068c0 <_realloc_r+0x1c>
 80068e6:	42b5      	cmp	r5, r6
 80068e8:	462a      	mov	r2, r5
 80068ea:	4621      	mov	r1, r4
 80068ec:	bf28      	it	cs
 80068ee:	4632      	movcs	r2, r6
 80068f0:	f7ff ff86 	bl	8006800 <memcpy>
 80068f4:	4621      	mov	r1, r4
 80068f6:	4640      	mov	r0, r8
 80068f8:	f7ff f8da 	bl	8005ab0 <_free_r>
 80068fc:	463c      	mov	r4, r7
 80068fe:	e7e0      	b.n	80068c2 <_realloc_r+0x1e>

08006900 <__ascii_wctomb>:
 8006900:	4603      	mov	r3, r0
 8006902:	4608      	mov	r0, r1
 8006904:	b141      	cbz	r1, 8006918 <__ascii_wctomb+0x18>
 8006906:	2aff      	cmp	r2, #255	@ 0xff
 8006908:	d904      	bls.n	8006914 <__ascii_wctomb+0x14>
 800690a:	228a      	movs	r2, #138	@ 0x8a
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	4770      	bx	lr
 8006914:	2001      	movs	r0, #1
 8006916:	700a      	strb	r2, [r1, #0]
 8006918:	4770      	bx	lr
	...

0800691c <fiprintf>:
 800691c:	b40e      	push	{r1, r2, r3}
 800691e:	b503      	push	{r0, r1, lr}
 8006920:	4601      	mov	r1, r0
 8006922:	ab03      	add	r3, sp, #12
 8006924:	4805      	ldr	r0, [pc, #20]	@ (800693c <fiprintf+0x20>)
 8006926:	f853 2b04 	ldr.w	r2, [r3], #4
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	f000 f83d 	bl	80069ac <_vfiprintf_r>
 8006932:	b002      	add	sp, #8
 8006934:	f85d eb04 	ldr.w	lr, [sp], #4
 8006938:	b003      	add	sp, #12
 800693a:	4770      	bx	lr
 800693c:	20000038 	.word	0x20000038

08006940 <abort>:
 8006940:	2006      	movs	r0, #6
 8006942:	b508      	push	{r3, lr}
 8006944:	f000 fa06 	bl	8006d54 <raise>
 8006948:	2001      	movs	r0, #1
 800694a:	f7fa fe16 	bl	800157a <_exit>

0800694e <_malloc_usable_size_r>:
 800694e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006952:	1f18      	subs	r0, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	bfbc      	itt	lt
 8006958:	580b      	ldrlt	r3, [r1, r0]
 800695a:	18c0      	addlt	r0, r0, r3
 800695c:	4770      	bx	lr

0800695e <__sfputc_r>:
 800695e:	6893      	ldr	r3, [r2, #8]
 8006960:	b410      	push	{r4}
 8006962:	3b01      	subs	r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	6093      	str	r3, [r2, #8]
 8006968:	da07      	bge.n	800697a <__sfputc_r+0x1c>
 800696a:	6994      	ldr	r4, [r2, #24]
 800696c:	42a3      	cmp	r3, r4
 800696e:	db01      	blt.n	8006974 <__sfputc_r+0x16>
 8006970:	290a      	cmp	r1, #10
 8006972:	d102      	bne.n	800697a <__sfputc_r+0x1c>
 8006974:	bc10      	pop	{r4}
 8006976:	f000 b931 	b.w	8006bdc <__swbuf_r>
 800697a:	6813      	ldr	r3, [r2, #0]
 800697c:	1c58      	adds	r0, r3, #1
 800697e:	6010      	str	r0, [r2, #0]
 8006980:	7019      	strb	r1, [r3, #0]
 8006982:	4608      	mov	r0, r1
 8006984:	bc10      	pop	{r4}
 8006986:	4770      	bx	lr

08006988 <__sfputs_r>:
 8006988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698a:	4606      	mov	r6, r0
 800698c:	460f      	mov	r7, r1
 800698e:	4614      	mov	r4, r2
 8006990:	18d5      	adds	r5, r2, r3
 8006992:	42ac      	cmp	r4, r5
 8006994:	d101      	bne.n	800699a <__sfputs_r+0x12>
 8006996:	2000      	movs	r0, #0
 8006998:	e007      	b.n	80069aa <__sfputs_r+0x22>
 800699a:	463a      	mov	r2, r7
 800699c:	4630      	mov	r0, r6
 800699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a2:	f7ff ffdc 	bl	800695e <__sfputc_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d1f3      	bne.n	8006992 <__sfputs_r+0xa>
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069ac <_vfiprintf_r>:
 80069ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b0:	460d      	mov	r5, r1
 80069b2:	4614      	mov	r4, r2
 80069b4:	4698      	mov	r8, r3
 80069b6:	4606      	mov	r6, r0
 80069b8:	b09d      	sub	sp, #116	@ 0x74
 80069ba:	b118      	cbz	r0, 80069c4 <_vfiprintf_r+0x18>
 80069bc:	6a03      	ldr	r3, [r0, #32]
 80069be:	b90b      	cbnz	r3, 80069c4 <_vfiprintf_r+0x18>
 80069c0:	f7fe f8fe 	bl	8004bc0 <__sinit>
 80069c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069c6:	07d9      	lsls	r1, r3, #31
 80069c8:	d405      	bmi.n	80069d6 <_vfiprintf_r+0x2a>
 80069ca:	89ab      	ldrh	r3, [r5, #12]
 80069cc:	059a      	lsls	r2, r3, #22
 80069ce:	d402      	bmi.n	80069d6 <_vfiprintf_r+0x2a>
 80069d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069d2:	f7fe fa0c 	bl	8004dee <__retarget_lock_acquire_recursive>
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	071b      	lsls	r3, r3, #28
 80069da:	d501      	bpl.n	80069e0 <_vfiprintf_r+0x34>
 80069dc:	692b      	ldr	r3, [r5, #16]
 80069de:	b99b      	cbnz	r3, 8006a08 <_vfiprintf_r+0x5c>
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f000 f938 	bl	8006c58 <__swsetup_r>
 80069e8:	b170      	cbz	r0, 8006a08 <_vfiprintf_r+0x5c>
 80069ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069ec:	07dc      	lsls	r4, r3, #31
 80069ee:	d504      	bpl.n	80069fa <_vfiprintf_r+0x4e>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	b01d      	add	sp, #116	@ 0x74
 80069f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fa:	89ab      	ldrh	r3, [r5, #12]
 80069fc:	0598      	lsls	r0, r3, #22
 80069fe:	d4f7      	bmi.n	80069f0 <_vfiprintf_r+0x44>
 8006a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a02:	f7fe f9f5 	bl	8004df0 <__retarget_lock_release_recursive>
 8006a06:	e7f3      	b.n	80069f0 <_vfiprintf_r+0x44>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a12:	2330      	movs	r3, #48	@ 0x30
 8006a14:	f04f 0901 	mov.w	r9, #1
 8006a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a1c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006bc8 <_vfiprintf_r+0x21c>
 8006a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a24:	4623      	mov	r3, r4
 8006a26:	469a      	mov	sl, r3
 8006a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a2c:	b10a      	cbz	r2, 8006a32 <_vfiprintf_r+0x86>
 8006a2e:	2a25      	cmp	r2, #37	@ 0x25
 8006a30:	d1f9      	bne.n	8006a26 <_vfiprintf_r+0x7a>
 8006a32:	ebba 0b04 	subs.w	fp, sl, r4
 8006a36:	d00b      	beq.n	8006a50 <_vfiprintf_r+0xa4>
 8006a38:	465b      	mov	r3, fp
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff ffa2 	bl	8006988 <__sfputs_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	f000 80a7 	beq.w	8006b98 <_vfiprintf_r+0x1ec>
 8006a4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a4c:	445a      	add	r2, fp
 8006a4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a50:	f89a 3000 	ldrb.w	r3, [sl]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 809f 	beq.w	8006b98 <_vfiprintf_r+0x1ec>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a64:	f10a 0a01 	add.w	sl, sl, #1
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	9307      	str	r3, [sp, #28]
 8006a6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a70:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a72:	4654      	mov	r4, sl
 8006a74:	2205      	movs	r2, #5
 8006a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7a:	4853      	ldr	r0, [pc, #332]	@ (8006bc8 <_vfiprintf_r+0x21c>)
 8006a7c:	f7fe f9b9 	bl	8004df2 <memchr>
 8006a80:	9a04      	ldr	r2, [sp, #16]
 8006a82:	b9d8      	cbnz	r0, 8006abc <_vfiprintf_r+0x110>
 8006a84:	06d1      	lsls	r1, r2, #27
 8006a86:	bf44      	itt	mi
 8006a88:	2320      	movmi	r3, #32
 8006a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a8e:	0713      	lsls	r3, r2, #28
 8006a90:	bf44      	itt	mi
 8006a92:	232b      	movmi	r3, #43	@ 0x2b
 8006a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a98:	f89a 3000 	ldrb.w	r3, [sl]
 8006a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a9e:	d015      	beq.n	8006acc <_vfiprintf_r+0x120>
 8006aa0:	4654      	mov	r4, sl
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	f04f 0c0a 	mov.w	ip, #10
 8006aa8:	9a07      	ldr	r2, [sp, #28]
 8006aaa:	4621      	mov	r1, r4
 8006aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ab0:	3b30      	subs	r3, #48	@ 0x30
 8006ab2:	2b09      	cmp	r3, #9
 8006ab4:	d94b      	bls.n	8006b4e <_vfiprintf_r+0x1a2>
 8006ab6:	b1b0      	cbz	r0, 8006ae6 <_vfiprintf_r+0x13a>
 8006ab8:	9207      	str	r2, [sp, #28]
 8006aba:	e014      	b.n	8006ae6 <_vfiprintf_r+0x13a>
 8006abc:	eba0 0308 	sub.w	r3, r0, r8
 8006ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	46a2      	mov	sl, r4
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	e7d2      	b.n	8006a72 <_vfiprintf_r+0xc6>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	1d19      	adds	r1, r3, #4
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	9103      	str	r1, [sp, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bfbb      	ittet	lt
 8006ad8:	425b      	neglt	r3, r3
 8006ada:	f042 0202 	orrlt.w	r2, r2, #2
 8006ade:	9307      	strge	r3, [sp, #28]
 8006ae0:	9307      	strlt	r3, [sp, #28]
 8006ae2:	bfb8      	it	lt
 8006ae4:	9204      	strlt	r2, [sp, #16]
 8006ae6:	7823      	ldrb	r3, [r4, #0]
 8006ae8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006aea:	d10a      	bne.n	8006b02 <_vfiprintf_r+0x156>
 8006aec:	7863      	ldrb	r3, [r4, #1]
 8006aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af0:	d132      	bne.n	8006b58 <_vfiprintf_r+0x1ac>
 8006af2:	9b03      	ldr	r3, [sp, #12]
 8006af4:	3402      	adds	r4, #2
 8006af6:	1d1a      	adds	r2, r3, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	9203      	str	r2, [sp, #12]
 8006afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006bcc <_vfiprintf_r+0x220>
 8006b06:	2203      	movs	r2, #3
 8006b08:	4650      	mov	r0, sl
 8006b0a:	7821      	ldrb	r1, [r4, #0]
 8006b0c:	f7fe f971 	bl	8004df2 <memchr>
 8006b10:	b138      	cbz	r0, 8006b22 <_vfiprintf_r+0x176>
 8006b12:	2240      	movs	r2, #64	@ 0x40
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	eba0 000a 	sub.w	r0, r0, sl
 8006b1a:	4082      	lsls	r2, r0
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	3401      	adds	r4, #1
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b26:	2206      	movs	r2, #6
 8006b28:	4829      	ldr	r0, [pc, #164]	@ (8006bd0 <_vfiprintf_r+0x224>)
 8006b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b2e:	f7fe f960 	bl	8004df2 <memchr>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d03f      	beq.n	8006bb6 <_vfiprintf_r+0x20a>
 8006b36:	4b27      	ldr	r3, [pc, #156]	@ (8006bd4 <_vfiprintf_r+0x228>)
 8006b38:	bb1b      	cbnz	r3, 8006b82 <_vfiprintf_r+0x1d6>
 8006b3a:	9b03      	ldr	r3, [sp, #12]
 8006b3c:	3307      	adds	r3, #7
 8006b3e:	f023 0307 	bic.w	r3, r3, #7
 8006b42:	3308      	adds	r3, #8
 8006b44:	9303      	str	r3, [sp, #12]
 8006b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b48:	443b      	add	r3, r7
 8006b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b4c:	e76a      	b.n	8006a24 <_vfiprintf_r+0x78>
 8006b4e:	460c      	mov	r4, r1
 8006b50:	2001      	movs	r0, #1
 8006b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b56:	e7a8      	b.n	8006aaa <_vfiprintf_r+0xfe>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f04f 0c0a 	mov.w	ip, #10
 8006b5e:	4619      	mov	r1, r3
 8006b60:	3401      	adds	r4, #1
 8006b62:	9305      	str	r3, [sp, #20]
 8006b64:	4620      	mov	r0, r4
 8006b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b6a:	3a30      	subs	r2, #48	@ 0x30
 8006b6c:	2a09      	cmp	r2, #9
 8006b6e:	d903      	bls.n	8006b78 <_vfiprintf_r+0x1cc>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0c6      	beq.n	8006b02 <_vfiprintf_r+0x156>
 8006b74:	9105      	str	r1, [sp, #20]
 8006b76:	e7c4      	b.n	8006b02 <_vfiprintf_r+0x156>
 8006b78:	4604      	mov	r4, r0
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b80:	e7f0      	b.n	8006b64 <_vfiprintf_r+0x1b8>
 8006b82:	ab03      	add	r3, sp, #12
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	462a      	mov	r2, r5
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4b13      	ldr	r3, [pc, #76]	@ (8006bd8 <_vfiprintf_r+0x22c>)
 8006b8c:	a904      	add	r1, sp, #16
 8006b8e:	f7fd fbcd 	bl	800432c <_printf_float>
 8006b92:	4607      	mov	r7, r0
 8006b94:	1c78      	adds	r0, r7, #1
 8006b96:	d1d6      	bne.n	8006b46 <_vfiprintf_r+0x19a>
 8006b98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b9a:	07d9      	lsls	r1, r3, #31
 8006b9c:	d405      	bmi.n	8006baa <_vfiprintf_r+0x1fe>
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	059a      	lsls	r2, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_vfiprintf_r+0x1fe>
 8006ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ba6:	f7fe f923 	bl	8004df0 <__retarget_lock_release_recursive>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	f53f af1f 	bmi.w	80069f0 <_vfiprintf_r+0x44>
 8006bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bb4:	e71e      	b.n	80069f4 <_vfiprintf_r+0x48>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <_vfiprintf_r+0x22c>)
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	f7fd fe51 	bl	8004868 <_printf_i>
 8006bc6:	e7e4      	b.n	8006b92 <_vfiprintf_r+0x1e6>
 8006bc8:	08007140 	.word	0x08007140
 8006bcc:	08007146 	.word	0x08007146
 8006bd0:	0800714a 	.word	0x0800714a
 8006bd4:	0800432d 	.word	0x0800432d
 8006bd8:	08006989 	.word	0x08006989

08006bdc <__swbuf_r>:
 8006bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bde:	460e      	mov	r6, r1
 8006be0:	4614      	mov	r4, r2
 8006be2:	4605      	mov	r5, r0
 8006be4:	b118      	cbz	r0, 8006bee <__swbuf_r+0x12>
 8006be6:	6a03      	ldr	r3, [r0, #32]
 8006be8:	b90b      	cbnz	r3, 8006bee <__swbuf_r+0x12>
 8006bea:	f7fd ffe9 	bl	8004bc0 <__sinit>
 8006bee:	69a3      	ldr	r3, [r4, #24]
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	071a      	lsls	r2, r3, #28
 8006bf6:	d501      	bpl.n	8006bfc <__swbuf_r+0x20>
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	b943      	cbnz	r3, 8006c0e <__swbuf_r+0x32>
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 f82a 	bl	8006c58 <__swsetup_r>
 8006c04:	b118      	cbz	r0, 8006c0e <__swbuf_r+0x32>
 8006c06:	f04f 37ff 	mov.w	r7, #4294967295
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	6922      	ldr	r2, [r4, #16]
 8006c12:	b2f6      	uxtb	r6, r6
 8006c14:	1a98      	subs	r0, r3, r2
 8006c16:	6963      	ldr	r3, [r4, #20]
 8006c18:	4637      	mov	r7, r6
 8006c1a:	4283      	cmp	r3, r0
 8006c1c:	dc05      	bgt.n	8006c2a <__swbuf_r+0x4e>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f7ff fd9b 	bl	800675c <_fflush_r>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d1ed      	bne.n	8006c06 <__swbuf_r+0x2a>
 8006c2a:	68a3      	ldr	r3, [r4, #8]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	60a3      	str	r3, [r4, #8]
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	6022      	str	r2, [r4, #0]
 8006c36:	701e      	strb	r6, [r3, #0]
 8006c38:	6962      	ldr	r2, [r4, #20]
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d004      	beq.n	8006c4a <__swbuf_r+0x6e>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	07db      	lsls	r3, r3, #31
 8006c44:	d5e1      	bpl.n	8006c0a <__swbuf_r+0x2e>
 8006c46:	2e0a      	cmp	r6, #10
 8006c48:	d1df      	bne.n	8006c0a <__swbuf_r+0x2e>
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f7ff fd85 	bl	800675c <_fflush_r>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	d0d9      	beq.n	8006c0a <__swbuf_r+0x2e>
 8006c56:	e7d6      	b.n	8006c06 <__swbuf_r+0x2a>

08006c58 <__swsetup_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4b29      	ldr	r3, [pc, #164]	@ (8006d00 <__swsetup_r+0xa8>)
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	460c      	mov	r4, r1
 8006c62:	b118      	cbz	r0, 8006c6c <__swsetup_r+0x14>
 8006c64:	6a03      	ldr	r3, [r0, #32]
 8006c66:	b90b      	cbnz	r3, 8006c6c <__swsetup_r+0x14>
 8006c68:	f7fd ffaa 	bl	8004bc0 <__sinit>
 8006c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c70:	0719      	lsls	r1, r3, #28
 8006c72:	d422      	bmi.n	8006cba <__swsetup_r+0x62>
 8006c74:	06da      	lsls	r2, r3, #27
 8006c76:	d407      	bmi.n	8006c88 <__swsetup_r+0x30>
 8006c78:	2209      	movs	r2, #9
 8006c7a:	602a      	str	r2, [r5, #0]
 8006c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	e033      	b.n	8006cf0 <__swsetup_r+0x98>
 8006c88:	0758      	lsls	r0, r3, #29
 8006c8a:	d512      	bpl.n	8006cb2 <__swsetup_r+0x5a>
 8006c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c8e:	b141      	cbz	r1, 8006ca2 <__swsetup_r+0x4a>
 8006c90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c94:	4299      	cmp	r1, r3
 8006c96:	d002      	beq.n	8006c9e <__swsetup_r+0x46>
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f7fe ff09 	bl	8005ab0 <_free_r>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	2300      	movs	r3, #0
 8006cac:	6063      	str	r3, [r4, #4]
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f043 0308 	orr.w	r3, r3, #8
 8006cb8:	81a3      	strh	r3, [r4, #12]
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	b94b      	cbnz	r3, 8006cd2 <__swsetup_r+0x7a>
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc8:	d003      	beq.n	8006cd2 <__swsetup_r+0x7a>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 f882 	bl	8006dd6 <__smakebuf_r>
 8006cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd6:	f013 0201 	ands.w	r2, r3, #1
 8006cda:	d00a      	beq.n	8006cf2 <__swsetup_r+0x9a>
 8006cdc:	2200      	movs	r2, #0
 8006cde:	60a2      	str	r2, [r4, #8]
 8006ce0:	6962      	ldr	r2, [r4, #20]
 8006ce2:	4252      	negs	r2, r2
 8006ce4:	61a2      	str	r2, [r4, #24]
 8006ce6:	6922      	ldr	r2, [r4, #16]
 8006ce8:	b942      	cbnz	r2, 8006cfc <__swsetup_r+0xa4>
 8006cea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006cee:	d1c5      	bne.n	8006c7c <__swsetup_r+0x24>
 8006cf0:	bd38      	pop	{r3, r4, r5, pc}
 8006cf2:	0799      	lsls	r1, r3, #30
 8006cf4:	bf58      	it	pl
 8006cf6:	6962      	ldrpl	r2, [r4, #20]
 8006cf8:	60a2      	str	r2, [r4, #8]
 8006cfa:	e7f4      	b.n	8006ce6 <__swsetup_r+0x8e>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e7f7      	b.n	8006cf0 <__swsetup_r+0x98>
 8006d00:	20000038 	.word	0x20000038

08006d04 <_raise_r>:
 8006d04:	291f      	cmp	r1, #31
 8006d06:	b538      	push	{r3, r4, r5, lr}
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	d904      	bls.n	8006d18 <_raise_r+0x14>
 8006d0e:	2316      	movs	r3, #22
 8006d10:	6003      	str	r3, [r0, #0]
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006d1a:	b112      	cbz	r2, 8006d22 <_raise_r+0x1e>
 8006d1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d20:	b94b      	cbnz	r3, 8006d36 <_raise_r+0x32>
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 f830 	bl	8006d88 <_getpid_r>
 8006d28:	4622      	mov	r2, r4
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d32:	f000 b817 	b.w	8006d64 <_kill_r>
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d00a      	beq.n	8006d50 <_raise_r+0x4c>
 8006d3a:	1c59      	adds	r1, r3, #1
 8006d3c:	d103      	bne.n	8006d46 <_raise_r+0x42>
 8006d3e:	2316      	movs	r3, #22
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	2001      	movs	r0, #1
 8006d44:	e7e7      	b.n	8006d16 <_raise_r+0x12>
 8006d46:	2100      	movs	r1, #0
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006d4e:	4798      	blx	r3
 8006d50:	2000      	movs	r0, #0
 8006d52:	e7e0      	b.n	8006d16 <_raise_r+0x12>

08006d54 <raise>:
 8006d54:	4b02      	ldr	r3, [pc, #8]	@ (8006d60 <raise+0xc>)
 8006d56:	4601      	mov	r1, r0
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	f7ff bfd3 	b.w	8006d04 <_raise_r>
 8006d5e:	bf00      	nop
 8006d60:	20000038 	.word	0x20000038

08006d64 <_kill_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	2300      	movs	r3, #0
 8006d68:	4d06      	ldr	r5, [pc, #24]	@ (8006d84 <_kill_r+0x20>)
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	f7fa fbf2 	bl	800155a <_kill>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	d102      	bne.n	8006d80 <_kill_r+0x1c>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	b103      	cbz	r3, 8006d80 <_kill_r+0x1c>
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	200003cc 	.word	0x200003cc

08006d88 <_getpid_r>:
 8006d88:	f7fa bbe0 	b.w	800154c <_getpid>

08006d8c <__swhatbuf_r>:
 8006d8c:	b570      	push	{r4, r5, r6, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	4615      	mov	r5, r2
 8006d96:	2900      	cmp	r1, #0
 8006d98:	461e      	mov	r6, r3
 8006d9a:	b096      	sub	sp, #88	@ 0x58
 8006d9c:	da0c      	bge.n	8006db8 <__swhatbuf_r+0x2c>
 8006d9e:	89a3      	ldrh	r3, [r4, #12]
 8006da0:	2100      	movs	r1, #0
 8006da2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006da6:	bf14      	ite	ne
 8006da8:	2340      	movne	r3, #64	@ 0x40
 8006daa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006dae:	2000      	movs	r0, #0
 8006db0:	6031      	str	r1, [r6, #0]
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	b016      	add	sp, #88	@ 0x58
 8006db6:	bd70      	pop	{r4, r5, r6, pc}
 8006db8:	466a      	mov	r2, sp
 8006dba:	f000 f849 	bl	8006e50 <_fstat_r>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	dbed      	blt.n	8006d9e <__swhatbuf_r+0x12>
 8006dc2:	9901      	ldr	r1, [sp, #4]
 8006dc4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006dc8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006dcc:	4259      	negs	r1, r3
 8006dce:	4159      	adcs	r1, r3
 8006dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dd4:	e7eb      	b.n	8006dae <__swhatbuf_r+0x22>

08006dd6 <__smakebuf_r>:
 8006dd6:	898b      	ldrh	r3, [r1, #12]
 8006dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dda:	079d      	lsls	r5, r3, #30
 8006ddc:	4606      	mov	r6, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	d507      	bpl.n	8006df2 <__smakebuf_r+0x1c>
 8006de2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	2301      	movs	r3, #1
 8006dec:	6163      	str	r3, [r4, #20]
 8006dee:	b003      	add	sp, #12
 8006df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006df2:	466a      	mov	r2, sp
 8006df4:	ab01      	add	r3, sp, #4
 8006df6:	f7ff ffc9 	bl	8006d8c <__swhatbuf_r>
 8006dfa:	9f00      	ldr	r7, [sp, #0]
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	4639      	mov	r1, r7
 8006e00:	4630      	mov	r0, r6
 8006e02:	f7fe fec7 	bl	8005b94 <_malloc_r>
 8006e06:	b948      	cbnz	r0, 8006e1c <__smakebuf_r+0x46>
 8006e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0c:	059a      	lsls	r2, r3, #22
 8006e0e:	d4ee      	bmi.n	8006dee <__smakebuf_r+0x18>
 8006e10:	f023 0303 	bic.w	r3, r3, #3
 8006e14:	f043 0302 	orr.w	r3, r3, #2
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	e7e2      	b.n	8006de2 <__smakebuf_r+0xc>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	6020      	str	r0, [r4, #0]
 8006e2c:	b15b      	cbz	r3, 8006e46 <__smakebuf_r+0x70>
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e34:	f000 f81e 	bl	8006e74 <_isatty_r>
 8006e38:	b128      	cbz	r0, 8006e46 <__smakebuf_r+0x70>
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f023 0303 	bic.w	r3, r3, #3
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	81a3      	strh	r3, [r4, #12]
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	431d      	orrs	r5, r3
 8006e4a:	81a5      	strh	r5, [r4, #12]
 8006e4c:	e7cf      	b.n	8006dee <__smakebuf_r+0x18>
	...

08006e50 <_fstat_r>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	2300      	movs	r3, #0
 8006e54:	4d06      	ldr	r5, [pc, #24]	@ (8006e70 <_fstat_r+0x20>)
 8006e56:	4604      	mov	r4, r0
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	602b      	str	r3, [r5, #0]
 8006e5e:	f7fa fbdb 	bl	8001618 <_fstat>
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	d102      	bne.n	8006e6c <_fstat_r+0x1c>
 8006e66:	682b      	ldr	r3, [r5, #0]
 8006e68:	b103      	cbz	r3, 8006e6c <_fstat_r+0x1c>
 8006e6a:	6023      	str	r3, [r4, #0]
 8006e6c:	bd38      	pop	{r3, r4, r5, pc}
 8006e6e:	bf00      	nop
 8006e70:	200003cc 	.word	0x200003cc

08006e74 <_isatty_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	2300      	movs	r3, #0
 8006e78:	4d05      	ldr	r5, [pc, #20]	@ (8006e90 <_isatty_r+0x1c>)
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	602b      	str	r3, [r5, #0]
 8006e80:	f7fa fbd9 	bl	8001636 <_isatty>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_isatty_r+0x1a>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_isatty_r+0x1a>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	200003cc 	.word	0x200003cc

08006e94 <_init>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr

08006ea0 <_fini>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	bf00      	nop
 8006ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea6:	bc08      	pop	{r3}
 8006ea8:	469e      	mov	lr, r3
 8006eaa:	4770      	bx	lr
